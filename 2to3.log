--- ./20130628_1.py	(original)
+++ ./20130628_1.py	(refactored)
@@ -13,7 +13,7 @@
 from math import hypot, atan2
 
 if len(sys.argv) != 2:
-    print 'Usage: SCRIPT [file]'
+    print('Usage: SCRIPT [file]')
     sys.exit(2)
 
 pdb = PdbFile(sys.argv[1])
@@ -34,9 +34,9 @@
         N = atom.xyz
 
 # 動かす前        
-print "動かす前"
-print "Q:",Q.get_as_tuple()
-print "N:",N.get_as_tuple()
+print("動かす前")
+print("Q:",Q.get_as_tuple())
+print("N:",N.get_as_tuple())
 
 ##########################################################
 #Ste7(189-471)の重心(CAのみで計算）が原点に重なるように並進
@@ -50,7 +50,7 @@
                 n_com += 1
 
 if n_com != 283:
-    print "ERROR: n_com = ",n_com
+    print("ERROR: n_com = ",n_com)
     sys.exit(2)
 
 com /= n_com
@@ -62,9 +62,9 @@
         for a in r.atoms:
             a.xyz.transform(trans_com.mtx)
             
-print "重心を原点へ"
-print "Q:",Q.get_as_tuple()
-print "N:",N.get_as_tuple()
+print("重心を原点へ")
+print("Q:",Q.get_as_tuple())
+print("N:",N.get_as_tuple())
 
 
 ##########################################################
@@ -94,9 +94,9 @@
         for a in r.atoms:
             a.xyz.transform(rotateQ.mtx)
 #ここまでで、QがZ軸上にのった
-print "QをZ軸上へ"
-print "Q:",Q.get_as_tuple()
-print "N:",N.get_as_tuple()
+print("QをZ軸上へ")
+print("Q:",Q.get_as_tuple())
+print("N:",N.get_as_tuple())
 
 
 ##########################################################
@@ -114,9 +114,9 @@
             a.xyz.transform(rotateN.mtx)
 #DEBUG print "N",N.get_as_tuple()
 #ここまでで、NをX軸上へ
-print "NをX軸上へ"
-print "Q:",Q.get_as_tuple()
-print "N:",N.get_as_tuple()
+print("NをX軸上へ")
+print("Q:",Q.get_as_tuple())
+print("N:",N.get_as_tuple())
 
 pdb_out = PdbFile("20130628.pdb")
 pdb_out.open_to_write()
--- ./20130628_3.py	(original)
+++ ./20130628_3.py	(refactored)
@@ -21,7 +21,7 @@
 from math import atan2, sqrt, acos
 
 if len(sys.argv) != 3:
-    print 'Usage: SCRIPT [input DCD] [output file]'
+    print('Usage: SCRIPT [input DCD] [output file]')
     sys.exit(2)
 
 #RESIDUE_TOTAL = 868
@@ -48,7 +48,7 @@
     #Fus3(1-353)の重心
     com = [0.0] * 3
     n_com = ID_FUS3_DOM_END - ID_FUS3_DOM_INI + 1
-    for i in xrange(ID_FUS3_DOM_INI, ID_FUS3_DOM_END+1):
+    for i in range(ID_FUS3_DOM_INI, ID_FUS3_DOM_END+1):
         com[0] += data[i][0]
         com[1] += data[i][1]
         com[2] += data[i][2]
--- ./20130630_1.py	(original)
+++ ./20130630_1.py	(refactored)
@@ -8,7 +8,7 @@
 from scipy.constants.constants import pi
 
 if len(sys.argv) != 4:
-    print 'Usage: SCRIPT [input data] [output prefix] [output file]'
+    print('Usage: SCRIPT [input data] [output prefix] [output file]')
     sys.exit(2)
     
 file_in = open(sys.argv[1],'r')
@@ -50,8 +50,8 @@
         theta3.append(t)
         phi3.append(p)
     
-theta_bins = [x*10.0 for x in xrange(0,19)]
-phi_bins = [x*10.0 for x in xrange(-18,19)]
+theta_bins = [x*10.0 for x in range(0,19)]
+phi_bins = [x*10.0 for x in range(-18,19)]
 #theta_bins = [x*15.0 for x in xrange(0,13)]
 #phi_bins = [x*15.0 for x in xrange(-12,13)]
 
@@ -79,9 +79,9 @@
 
 Hj = zeros((18,36))
 Hnj = zeros((18,36))
-for t in xrange(18):
+for t in range(18):
     t_deg = t*10.0 + 5.0
-    for p in xrange(36):
+    for p in range(36):
         Hj[t,p] = H[t,p] / math.sin(math.radians(t_deg))
         Hnj[t,p] = Hn[t,p] / math.sin(math.radians(t_deg))
 #Hj = zeros((12,24))
--- ./20130702_1.py	(original)
+++ ./20130702_1.py	(refactored)
@@ -14,7 +14,7 @@
 out_file.write('%8s %6s %6s %7s %7s\n' 
                % ('#dist','theta','phi','deg(theta)','deg(phi)'))
 
-for i in xrange(100000):
+for i in range(100000):
     x = random.uniform(-r,r)
     y = random.uniform(-r,r)
     z = random.uniform(-r,r)
--- ./20130702_2.py	(original)
+++ ./20130702_2.py	(refactored)
@@ -30,7 +30,7 @@
 from scipy.constants.constants import pi
 
 if len(sys.argv) != 4:
-    print 'Usage: SCRIPT [input data] [output prefix] [output file]'
+    print('Usage: SCRIPT [input data] [output prefix] [output file]')
     sys.exit(2)
     
 file_in = open(sys.argv[1],'r')
@@ -41,16 +41,16 @@
 COL_THETA = 4 - 1
 COL_PHI = 5 - 1
 
-phi_bins = [x*10.0 for x in xrange(-18,19)]
+phi_bins = [x*10.0 for x in range(-18,19)]
 #phi_bins = [x*15.0 for x in xrange(-12,13)]
 
 DIV_Z = 17  # nの値。-180から180は 2n = 2 x DIV_Z に分割される。
 theta_bins = []
 theta_bins.append(0.0)          # i=0
-for i in xrange(1,DIV_Z):       # i=1,2,3,....,(n-1)
+for i in range(1,DIV_Z):       # i=1,2,3,....,(n-1)
     theta_bins.append(math.degrees(math.acos(1.0-i/float(DIV_Z))))
 theta_bins.append(90.0)         # i=n
-for i in xrange(1,DIV_Z):       # i=(n+1),(n+2),....,(2n-1)
+for i in range(1,DIV_Z):       # i=(n+1),(n+2),....,(2n-1)
     j = DIV_Z - i
     theta_bins.append(180.0-theta_bins[j])
 theta_bins.append(180.0)        # i=2n
@@ -102,24 +102,24 @@
 Hplt = zeros((n+1,m+1))
 
 Hplt[0,0] = H[0,0]
-for i in xrange(1, n):
+for i in range(1, n):
     Hplt[i,0] = (H[i-1,0]+H[i,0]) * 0.5
 Hplt[n,0] = H[n-1,0]
 
-for j in xrange(1,m):
+for j in range(1,m):
     Hplt[0,j] = (H[0,j-1]+H[0,j]) * 0.5
-    for i in xrange(1,n):
+    for i in range(1,n):
         Hplt[i,j] = (H[i-1,j-1]+H[i-1,j]+H[i,j-1]+H[i,j]) * 0.25
     Hplt[n,j] = (H[n-1,j-1]+H[n-1,j]) * 0.5
 
 Hplt[0,m] = H[0,m-1]
-for i in xrange(1,n):
+for i in range(1,n):
     Hplt[i,m] = (H[i-1,m-1]+H[i,m-1]) * 0.5
 Hplt[n,m] = H[n-1,m-1]
     
-for i in xrange(len(Hplt)):
+for i in range(len(Hplt)):
     file_out.write("\n")
-    for j in xrange(len(Hplt[i])):
+    for j in range(len(Hplt[i])):
         file_out.write('%f %f %f\n' % (phi_edge[j],theta_edge[i],Hplt[i,j]))
     
         
--- ./after_restart.py	(original)
+++ ./after_restart.py	(refactored)
@@ -11,7 +11,7 @@
 
 if __name__ == '__main__':
     if len(sys.argv) < 4:
-        print 'Usage: % SCRIPT [name] [Dir 1] ([Dir 2] [Dir 3] ...) [output dir]'
+        print('Usage: % SCRIPT [name] [Dir 1] ([Dir 2] [Dir 3] ...) [output dir]')
         sys.exit(2)
     
     name = sys.argv[1]
@@ -68,11 +68,11 @@
             nstep_ts -= 1
         
         if i_dir == 0:
-            print ('TS  in %s: #frame = %i (step=1 is eliminated.)' % (d, nstep_ts))
-            print ('DCD in %s: #frame = %i' % (d, nstep_dcd))
+            print(('TS  in %s: #frame = %i (step=1 is eliminated.)' % (d, nstep_ts)))
+            print(('DCD in %s: #frame = %i' % (d, nstep_dcd)))
         else:
-            print ('TS  in %s: #frame = %i (the first step is eliminated.)' % (d, nstep_ts))
-            print ('DCD in %s: #frame = %i (the first step is eliminated.)' % (d, nstep_dcd))
+            print(('TS  in %s: #frame = %i (the first step is eliminated.)' % (d, nstep_ts)))
+            print(('DCD in %s: #frame = %i (the first step is eliminated.)' % (d, nstep_dcd)))
 
         if nstep_ts != nstep_dcd:
             print( 'Warning: nstep_ts != nstep_dcd' )
@@ -83,5 +83,5 @@
         in_ts.close()
         in_dcd.close()
     
-    print('Total # of frames in  TS output to %s: %i' % (dir_out, nstep_total_ts))
-    print('Total # of frames in DCD output to %s: %i' % (dir_out, nstep_total_dcd))
+    print(('Total # of frames in  TS output to %s: %i' % (dir_out, nstep_total_ts)))
+    print(('Total # of frames in DCD output to %s: %i' % (dir_out, nstep_total_dcd)))
--- ./after_restart_2.py	(original)
+++ ./after_restart_2.py	(refactored)
@@ -11,7 +11,7 @@
 
 if __name__ == '__main__':
     if len(sys.argv) < 5:
-        print 'Usage: % SCRIPT [name] [Dir 1] [Dir 2] ([Dir 3] ...) [output dir]'
+        print('Usage: % SCRIPT [name] [Dir 1] [Dir 2] ([Dir 3] ...) [output dir]')
         sys.exit(2)
     
     name = sys.argv[1]
@@ -60,11 +60,11 @@
             nstep_ts += 1
         
         if i_dir == 0:
-            print ('TS  in %s: #frame = %i' % (d, nstep_ts))
-            print ('DCD in %s: #frame = %i' % (d, nstep_dcd))
+            print(('TS  in %s: #frame = %i' % (d, nstep_ts)))
+            print(('DCD in %s: #frame = %i' % (d, nstep_dcd)))
         else:
-            print ('TS  in %s: #frame = %i (the first step is eliminated.)' % (d, nstep_ts))
-            print ('DCD in %s: #frame = %i (the first step is eliminated.)' % (d, nstep_dcd))
+            print(('TS  in %s: #frame = %i (the first step is eliminated.)' % (d, nstep_ts)))
+            print(('DCD in %s: #frame = %i (the first step is eliminated.)' % (d, nstep_dcd)))
 
         if nstep_ts != nstep_dcd:
             print( 'Warning: nstep_ts != nstep_dcd' )
@@ -75,5 +75,5 @@
         in_ts.close()
         in_dcd.close()
     
-    print('Total # of frames in  TS output to %s: %i' % (dir_out, nstep_total_ts))
-    print('Total # of frames in DCD output to %s: %i' % (dir_out, nstep_total_dcd))
+    print(('Total # of frames in  TS output to %s: %i' % (dir_out, nstep_total_ts)))
+    print(('Total # of frames in DCD output to %s: %i' % (dir_out, nstep_total_dcd)))
--- ./bestfit_dcd_by_pdb.py	(original)
+++ ./bestfit_dcd_by_pdb.py	(refactored)
@@ -10,7 +10,7 @@
 import sys
 
 if len(sys.argv) != 4:
-    print 'Usage: % SCRIPT [PDB filename] [DCD filename] [out DCD filename]'
+    print('Usage: % SCRIPT [PDB filename] [DCD filename] [out DCD filename]')
     sys.exit(2)
     
 filename_pdb = sys.argv[1]
@@ -51,7 +51,7 @@
     data = dcd.read_onestep_np()
     rmsd = superimpose(ref, data.T) 
 
-    print k, rmsd
+    print(k, rmsd)
     out_dcd.write_onestep(data)
         
 dcd.close()
--- ./bestfit_dcd_by_pdb_part.py	(original)
+++ ./bestfit_dcd_by_pdb_part.py	(refactored)
@@ -7,8 +7,8 @@
 import sys
 
 if len(sys.argv) < 6:
-    print ('Usage: % SCRIPT [PDB filename] [DCD filename] [out DCD filename] '
-            +'[serial ID begin] [serial ID end]')
+    print(('Usage: % SCRIPT [PDB filename] [DCD filename] [out DCD filename] '
+            +'[serial ID begin] [serial ID end]'))
     sys.exit(2)
     
 filename_pdb = sys.argv[1]
@@ -17,7 +17,7 @@
 
 id_begin = []
 id_end = []
-for iarg in xrange(4, len(sys.argv)-1, 2) :
+for iarg in range(4, len(sys.argv)-1, 2) :
     id_begin.append(int(sys.argv[iarg]))
     id_end.append(int(sys.argv[iarg+1]))
 
@@ -45,8 +45,8 @@
 pre_idx = []
 
 # all to all
-for i in xrange(len(id_begin)) :
-    for j in xrange(id_begin[i], id_end[i]+1) :
+for i in range(len(id_begin)) :
+    for j in range(id_begin[i], id_end[i]+1) :
         ref_idx.append(j)
         pre_idx.append(j)
     
@@ -77,10 +77,10 @@
             post_dcd[j][i] = post[i][j]
     
     if ier == 0 :
-        print k, rmsd
+        print(k, rmsd)
         out_dcd.write_onestep(post_dcd)
     else :
-        print 'error in %i-th structure' % k
+        print('error in %i-th structure' % k)
         
 dcd.close()
 out_dcd.close()
--- ./bestfit_dcd_by_pdb_part_onlyRMSD.py	(original)
+++ ./bestfit_dcd_by_pdb_part_onlyRMSD.py	(refactored)
@@ -7,8 +7,8 @@
 import sys
 
 if len(sys.argv) < 5:
-    print ('Usage: % SCRIPT [PDB filename] [DCD filename]'
-            +'[serial ID begin] [serial ID end]')
+    print(('Usage: % SCRIPT [PDB filename] [DCD filename]'
+            +'[serial ID begin] [serial ID end]'))
     sys.exit(2)
     
 filename_pdb = sys.argv[1]
@@ -16,7 +16,7 @@
 
 id_begin = []
 id_end = []
-for iarg in xrange(3, len(sys.argv)-1, 2) :
+for iarg in range(3, len(sys.argv)-1, 2) :
     id_begin.append(int(sys.argv[iarg]))
     id_end.append(int(sys.argv[iarg+1]))
 
@@ -44,8 +44,8 @@
 pre_idx = []
 
 # all to all
-for i in xrange(len(id_begin)) :
-    for j in xrange(id_begin[i], id_end[i]+1) :
+for i in range(len(id_begin)) :
+    for j in range(id_begin[i], id_end[i]+1) :
         ref_idx.append(j)
         pre_idx.append(j)
     
@@ -67,9 +67,9 @@
                                                                         ref_idx, pre_idx)
     
     if ier == 0 :
-        print '%5.2f' % rmsd
+        print('%5.2f' % rmsd)
     else :
-        print 'error in %i-th structure' % k
+        print('error in %i-th structure' % k)
         
 dcd.close()
 
--- ./bestfit_pdb_by_matrix.py	(original)
+++ ./bestfit_pdb_by_matrix.py	(refactored)
@@ -5,7 +5,7 @@
 import sys
 
 if len(sys.argv) != 4:
-    print 'Usage: % SCRIPT [PDB filename] [matrix filename] [out PDB filename]'
+    print('Usage: % SCRIPT [PDB filename] [matrix filename] [out PDB filename]')
     sys.exit(2)
     
 filename_pdb = sys.argv[1]
@@ -26,11 +26,11 @@
 file_mat = file(filename_mat,'r')
 mat_lines = file_mat.readlines()
 if mat_lines[0][0:7] != '#matrix' :
-    print 'Error: format of matrix file'
+    print('Error: format of matrix file')
     sys.exit()
     
 transform = zeros((4,4),dtype=float64)
-for i in xrange(4) :
+for i in range(4) :
     transform[i] = mat_lines[i+1].strip().split()
     
 file_mat.close()
--- ./bfactor.py	(original)
+++ ./bfactor.py	(refactored)
@@ -10,7 +10,7 @@
 from cafysis.file_io.pdb import PdbFile
 
 if len(sys.argv) != 5:
-    print 'Usage: % SCRIPT [PDB filename] [DCD filename] [out PDB filename] [out bfactor file]'
+    print('Usage: % SCRIPT [PDB filename] [DCD filename] [out PDB filename] [out bfactor file]')
     sys.exit(2)
     
 filename_pdb = sys.argv[1]
@@ -67,7 +67,7 @@
 coef_pdb_bfactor = 10.0
 for chain in chains :
     for residue in chain.residues :
-        for i in xrange(len(residue.atoms)) :
+        for i in range(len(residue.atoms)) :
             bfactor = (bf[iatom,0]+bf[iatom,1]+bf[iatom,2])*8.0*math.pi*math.pi/3.0
             rmsf = math.sqrt(bf[iatom,0]+bf[iatom,1]+bf[iatom,2])
             residue.atoms[i].temp_factor = coef_pdb_bfactor * bfactor / bf_ave
--- ./calc_RDT_Mg.py	(original)
+++ ./calc_RDT_Mg.py	(refactored)
@@ -25,7 +25,7 @@
 # Output file preparing
 import os
 if os.path.exists(sys.argv[-1]) :
-    if raw_input('File %s exists. Rewrite? [Y/n]'%sys.argv[-1]) != 'Y' :
+    if input('File %s exists. Rewrite? [Y/n]'%sys.argv[-1]) != 'Y' :
         sys.exit(2)
 file_out = open(sys.argv[-1], 'w')
 
@@ -95,9 +95,9 @@
 minset_metal= []
 minset_pro  = []
 
-print (' the number of Mg : ',len(MgIds))
+print((' the number of Mg : ',len(MgIds)))
 for icount, i in enumerate(MgIds) :
-    print ('%i/%i' % (icount+1,len(MgIds)) )
+    print(('%i/%i' % (icount+1,len(MgIds)) ))
     ''' 各Mgに対し、他の全残基に対する距離を計算'''
     #print (i)
     for (i_chain, chain) in enumerate(chains) :
@@ -162,22 +162,22 @@
 
 # output to file_out
 file_out.write('#0 Phosphate\n')
-for i in xrange(len(hist_phos[0])) :
+for i in range(len(hist_phos[0])) :
     file_out.write("%f %i\n" % (hist_phos[1][i], hist_phos[0][i]) )
 file_out.write('\n\n#1 Base\n')
-for i in xrange(len(hist_base[0])) :
+for i in range(len(hist_base[0])) :
     file_out.write("%f %i\n" % (hist_base[1][i], hist_base[0][i]) )
 file_out.write('\n\n#2 Sugar\n')
-for i in xrange(len(hist_sugar[0])) :
+for i in range(len(hist_sugar[0])) :
     file_out.write("%f %i\n" % (hist_sugar[1][i], hist_sugar[0][i]) )
 file_out.write('\n\n#3 Oxygen of Water\n')
-for i in xrange(len(hist_water[0])) :
+for i in range(len(hist_water[0])) :
     file_out.write("%f %i\n" % (hist_water[1][i], hist_water[0][i]) )
 file_out.write('\n\n#4 Metal\n')
-for i in xrange(len(hist_metal[0])) :
+for i in range(len(hist_metal[0])) :
     file_out.write("%f %i\n" % (hist_metal[1][i], hist_metal[0][i]) )
 file_out.write('\n\n#4 Protein\n')
-for i in xrange(len(hist_pro[0])) :
+for i in range(len(hist_pro[0])) :
     file_out.write("%f %i\n" % (hist_pro[1][i], hist_pro[0][i]) )
 file_out.close()
                 
--- ./cls_aln_to_list.py	(original)
+++ ./cls_aln_to_list.py	(refactored)
@@ -40,7 +40,7 @@
             line = self._file.readline()
                 
         length = len(al.seq[0])
-        for idx in xrange(len(al.names)) :
+        for idx in range(len(al.names)) :
             if len(al.seq[idx]) != length :
                 raise Error('AlnFile', 'read_all', 'al.seq[idx] != length')
             
@@ -69,18 +69,18 @@
 #            else :
 #                raise Error('AlnFile', 'read_all', 'unknown letter in seq_idnt')
         
-        for i in xrange(length) :
+        for i in range(length) :
             ref = al.seq[0][i]
             flg = True 
-            for idx in xrange(len(al.names)) :
+            for idx in range(len(al.names)) :
                 if al.seq[idx][i] != ref :
                     flg = False
                     break
             al.loc2idnt.append(flg)
                 
-        for i in xrange(length) :
+        for i in range(length) :
             flg = True
-            for idx in xrange(len(al.names)) :
+            for idx in range(len(al.names)) :
                 if al.seq[idx][i] == '-' :
                     flg = False
                     break
@@ -129,16 +129,16 @@
 
 al = f_aln.read_all()
 
-for i in xrange(al.length) :
-    print al.seq[0][i], al.seq[1][i], al.loc2res[0][i], al.loc2res[1][i], al.loc2idnt[i], al.gap[i]
-print 'al.loc2res'
-print al.loc2res[0]
-print 'al.res2loc'
-print al.res2loc[0]
-print 'loc2idnt'
-print al.loc2idnt
-print 'idnt2loc'
-print al.idnt2loc
+for i in range(al.length) :
+    print(al.seq[0][i], al.seq[1][i], al.loc2res[0][i], al.loc2res[1][i], al.loc2idnt[i], al.gap[i])
+print('al.loc2res')
+print(al.loc2res[0])
+print('al.res2loc')
+print(al.res2loc[0])
+print('loc2idnt')
+print(al.loc2idnt)
+print('idnt2loc')
+print(al.idnt2loc)
 
 # write header
 f_out.write('#')
@@ -147,11 +147,11 @@
 f_out.write('\n')
 
 # write data
-for i in xrange(al.length) :
+for i in range(al.length) :
     if al.gap[i] :
         continue
     f_out.write(' ')
-    for idx in xrange(len(al.names)) :
+    for idx in range(len(al.names)) :
         f_out.write(' %5i' % al.loc2res[idx][i])
     f_out.write('\n')
 
--- ./cls_pdb_atom_pair_distance.py	(original)
+++ ./cls_pdb_atom_pair_distance.py	(refactored)
@@ -22,7 +22,7 @@
 f_out = open(sys.argv[4], 'w')
 
 if len(chains1) != len(chains2) :
-    print ("Error: len(chains1)(=%i)  !=  len(chains2)(=%i)" %(len(chains1), len(chains2)))
+    print(("Error: len(chains1)(=%i)  !=  len(chains2)(=%i)" %(len(chains1), len(chains2))))
     sys.exit(2)
 # !!! current version is for only single chain !!!
 if len(chains1) != 1 or len(chains2) != 1:
--- ./cls_pdb_atom_pair_distance_unitimp.py	(original)
+++ ./cls_pdb_atom_pair_distance_unitimp.py	(refactored)
@@ -25,7 +25,7 @@
 f_out = open(sys.argv[4], 'w')
 
 if len(chains1) != len(chains2) :
-    print ("Error: len(chains1)(=%i)  !=  len(chains2)(=%i)" %(len(chains1), len(chains2)))
+    print(("Error: len(chains1)(=%i)  !=  len(chains2)(=%i)" %(len(chains1), len(chains2))))
     sys.exit(2)
 # !!! current version is for only single chain !!!
 if len(chains1) != 1 or len(chains2) != 1:
--- ./cls_vec_apply_alignment.py	(original)
+++ ./cls_vec_apply_alignment.py	(refactored)
@@ -26,7 +26,7 @@
         continue
     
     if imp_out in imp_out_to_in:
-        print ('Error: %i is already exist in imp_out_to_in' % imp_out)
+        print(('Error: %i is already exist in imp_out_to_in' % imp_out))
         sys.exit(2)
     imp_out_to_in[imp_out] = imp_in
     
@@ -39,7 +39,7 @@
     v = (float(linesp[2]), float(linesp[3]), float(linesp[4]))
     mpvec[imp] = v
     
-for imp_out in xrange(imp_begin, imp_end+1) :
+for imp_out in range(imp_begin, imp_end+1) :
     if imp_out in imp_out_to_in :
         imp_in = imp_out_to_in[imp_out]
         if not imp_in in mpvec :
--- ./cluster_dcd.py	(original)
+++ ./cluster_dcd.py	(refactored)
@@ -7,7 +7,7 @@
 from cafysis.file_io.dcd import DcdFile
 
 if len(sys.argv) != 4:
-    print 'Usage: % SCRIPT [input DCD] [#frame to skip] [output prefix]'
+    print('Usage: % SCRIPT [input DCD] [#frame to skip] [output prefix]')
     sys.exit(2)
 
 nskip = int(sys.argv[2])
@@ -33,7 +33,7 @@
 
 dcd.close()
 
-print len(dist_array)
+print(len(dist_array))
 
 #z = scipy.cluster.hierarchy.ward(dist)  # This does not work for some reason 
 z = scipy.cluster.hierarchy.linkage(dist_array, method='ward', metric='euclidean')
--- ./cluster_dcd_cutoff.py	(original)
+++ ./cluster_dcd_cutoff.py	(refactored)
@@ -8,7 +8,7 @@
 from cafysis.file_io.dcd import DcdFile
 
 if len(sys.argv) != 6:
-    print 'Usage: SCRIPT [DCD file] [Native (reference) DCD] [prefix] [cutoff] [nskip (to calculate frame id)]'
+    print('Usage: SCRIPT [DCD file] [Native (reference) DCD] [prefix] [cutoff] [nskip (to calculate frame id)]')
     sys.exit(2)
 
 dcd_filepath = sys.argv[1]
@@ -127,7 +127,7 @@
 # Check this code correctly working
 for icls in range(ncls):
     if cls_num_node[icls] != fcls.tolist().count(icls+1):
-        print 'Error: cls_num_node[icls] != fcls.count(icls+1)'
+        print('Error: cls_num_node[icls] != fcls.count(icls+1)')
         sys.exit(2)
 
 for icls in range(ncls):
--- ./cluster_dend.py	(original)
+++ ./cluster_dend.py	(refactored)
@@ -4,8 +4,8 @@
 import scipy.cluster.hierarchy
 
 if len(sys.argv) not in (3,4):
-    print 'Usage: SCRIPT [prefix] [p (number of leaves)]'
-    print 'Usage: SCRIPT [prefix] [p (number of leaves)] [["NOLABEL"]]'
+    print('Usage: SCRIPT [prefix] [p (number of leaves)]')
+    print('Usage: SCRIPT [prefix] [p (number of leaves)] [["NOLABEL"]]')
     sys.exit(2)
 
 if len(sys.argv) == 3:
@@ -14,8 +14,8 @@
     if sys.argv[3] == "NOLABEL":
         flg_no_label = True
     else:
-        print 'Usage: SCRIPT [prefix] [p (number of leaves)]'
-        print 'Usage: SCRIPT [prefix] [p (number of leaves)] [["NOLABEL"]]'
+        print('Usage: SCRIPT [prefix] [p (number of leaves)]')
+        print('Usage: SCRIPT [prefix] [p (number of leaves)] [["NOLABEL"]]')
         sys.exit(2)
 
 prefix = sys.argv[1]
--- ./cluster_drid.py	(original)
+++ ./cluster_drid.py	(refactored)
@@ -9,7 +9,7 @@
 import math
 
 if len(sys.argv) != 4:
-    print 'Usage: % SCRIPT [input DRID] [#frame to skip] [output prefix]'
+    print('Usage: % SCRIPT [input DRID] [#frame to skip] [output prefix]')
     sys.exit(2)
 
 nskip = int(sys.argv[2])
--- ./cluster_drid_cutoff.py	(original)
+++ ./cluster_drid_cutoff.py	(refactored)
@@ -7,7 +7,7 @@
 from cafysis.file_io.drid import DridFile
 
 if len(sys.argv) != 5:
-    print 'Usage: SCRIPT [DRID file] [prefix] [cutoff] [nskip (to calculate frame id)]'
+    print('Usage: SCRIPT [DRID file] [prefix] [cutoff] [nskip (to calculate frame id)]')
     sys.exit(2)
 
 drid_filepath = sys.argv[1]
@@ -131,7 +131,7 @@
 # Check this code correctly working
 for icls in range(ncls):
     if cls_num_node[icls] != fcls.tolist().count(icls+1):
-        print 'Error: cls_num_node[icls] != fcls.count(icls+1)'
+        print('Error: cls_num_node[icls] != fcls.count(icls+1)')
         sys.exit(2)
 
 for icls in range(ncls):
--- ./contact_order.py	(original)
+++ ./contact_order.py	(refactored)
@@ -18,7 +18,7 @@
 import sys
 
 if len(sys.argv) != 2:
-    print 'Usage: SCRIPT [pairdist.dat]'
+    print('Usage: SCRIPT [pairdist.dat]')
     sys.exit(2)
 
 
@@ -47,8 +47,8 @@
     s += sij
     m += 1
 
-print 's: ',s
-print 'm: ',m
-print 'n: ',n
-print 'ACO: ', s / float(m)
-print 'RCO: ', s / float(m*n)
+print('s: ',s)
+print('m: ',m)
+print('n: ',n)
+print('ACO: ', s / float(m))
+print('RCO: ', s / float(m*n))
--- ./coord2dcd.py	(original)
+++ ./coord2dcd.py	(refactored)
@@ -11,8 +11,8 @@
 from cafysis.elements.psf import Atom, Psf
 
 if not len(sys.argv) in (4,5):
-    print 'Usage: % SCRIPT [input Coord] [#atom] [output DCD]'
-    print '  or : % SCRIPT [input Coord] [#atom] [output DCD] [output PSF]'
+    print('Usage: % SCRIPT [input Coord] [#atom] [output DCD]')
+    print('  or : % SCRIPT [input Coord] [#atom] [output DCD] [output PSF]')
     sys.exit(2)
 
 filepath_crd = sys.argv[1]
@@ -25,7 +25,7 @@
     # Generate PSF data
     psfdata = Psf()
     ires = 1
-    for i in xrange(1, nmp+1):
+    for i in range(1, nmp+1):
         a = Atom()
         a.atom_id = i
         a.seg_name = 'R'
@@ -44,7 +44,7 @@
         a.res_name = 'R'
         psfdata.atoms.append(a)
 
-    for i in xrange(2, nmp+1):
+    for i in range(2, nmp+1):
         if i%3 == 1: #S
             psfdata.bonds.append((i-1,i))
         elif i%3 == 2: #B
--- ./dat_ave_sigma.py	(original)
+++ ./dat_ave_sigma.py	(refactored)
@@ -13,8 +13,8 @@
 
 if __name__ == '__main__':
     if not len(sys.argv) in (4,5):
-        print 'Usage: % SCRIPT [GLOB query ("" needed)] [#step to be ignored] [output]'
-        print '  or : % SCRIPT [GLOB query ("" needed)] [#step to be ignored] [final step] [output]'
+        print('Usage: % SCRIPT [GLOB query ("" needed)] [#step to be ignored] [output]')
+        print('  or : % SCRIPT [GLOB query ("" needed)] [#step to be ignored] [final step] [output]')
         sys.exit(2)
 
     files = glob.glob(sys.argv[1])
@@ -50,7 +50,7 @@
         f_in.close()
 
         if num != (step - step_ignore +1):
-            print ('Warning: number step is %i in %s' % (num, filepath))
+            print(('Warning: number step is %i in %s' % (num, filepath)))
         if num == 0:
             continue
             
--- ./dat_column_hist.py	(original)
+++ ./dat_column_hist.py	(refactored)
@@ -3,12 +3,12 @@
 import sys
 
 if len(sys.argv) != 6:
-    print ' Usage: % SCRIPT [file] [data column (1,2,3,...)] [bin most left] [bin most right] [bin width]'
+    print(' Usage: % SCRIPT [file] [data column (1,2,3,...)] [bin most left] [bin most right] [bin width]')
     sys.exit(2)
 
 for i,arg in enumerate(sys.argv):
-    print '#%i %s' % (i,arg)
-print ''
+    print('#%i %s' % (i,arg))
+print('')
 
 f = sys.argv[1]
 data_col = int(sys.argv[2])
@@ -35,10 +35,10 @@
 dens,b = histogram(data,b,density=True)
 
 for (i,h_x) in enumerate(h):
-    print (b[i]+b[i+1])*0.5, h_x, dens[i], b[i],b[i+1]
+    print((b[i]+b[i+1])*0.5, h_x, dens[i], b[i],b[i+1])
 # print average
-print ''
-print ''
-print '#average= %f' % (sum(data)/len(data),)
+print('')
+print('')
+print('#average= %f' % (sum(data)/len(data),))
 
     
--- ./dat_hb2nd_bwyv.py	(original)
+++ ./dat_hb2nd_bwyv.py	(refactored)
@@ -20,7 +20,7 @@
 import glob
 
 if len(sys.argv) != 3:
-    print 'Usage: SCRIPT [HB file (bwyv.hb)] [dir_search]'
+    print('Usage: SCRIPT [HB file (bwyv.hb)] [dir_search]')
     sys.exit(2)
 
 filepath_hb = sys.argv[1]
@@ -44,7 +44,7 @@
     rnd = d_sp[-1]
     type = d.split('/')[-3][0:2]
     if type not in ('pN','cM'):
-        print 'Error: not pN nor cM'
+        print('Error: not pN nor cM')
         sys.exit(2)
     simulations.append((type,cM,frc,rnd))
 
--- ./dat_hb_contact.py	(original)
+++ ./dat_hb_contact.py	(refactored)
@@ -20,7 +20,7 @@
 import glob
 
 if len(sys.argv) != 3:
-    print 'Usage: SCRIPT [HB file (bwyv.hb)] [dir_search]'
+    print('Usage: SCRIPT [HB file (bwyv.hb)] [dir_search]')
     sys.exit(2)
 
 filepath_hb = sys.argv[1]
@@ -44,7 +44,7 @@
     rnd = d_sp[-1]
     type_pNcM = d.split('/')[-3][0:2]
     if type_pNcM not in ('pN','cM'):
-        print 'Error: not pN nor cM'
+        print('Error: not pN nor cM')
         sys.exit(2)
     simulations.append((type_pNcM,cM,frc,rnd))
 
--- ./dat_hb_cor.py	(original)
+++ ./dat_hb_cor.py	(refactored)
@@ -25,8 +25,8 @@
 elif len(sys.argv) == 4:
     flg_final = False
 else:
-    print 'Usage: SCRIPT [HB file (bwyv.hb)] [dir_search] [step_ignore]'
-    print ' or  : SCRIPT [HB file (bwyv.hb)] [dir_search] [step_ignore] [step_final]'
+    print('Usage: SCRIPT [HB file (bwyv.hb)] [dir_search] [step_ignore]')
+    print(' or  : SCRIPT [HB file (bwyv.hb)] [dir_search] [step_ignore] [step_final]')
     sys.exit(2)
 
 filepath_hb = sys.argv[1]
@@ -81,7 +81,7 @@
             continue
 
     if flg_skip:
-        print ('Skip %s' % (os.getcwd(),) )
+        print(('Skip %s' % (os.getcwd(),) ))
         os.chdir(orig_dir)
         continue
 
@@ -93,7 +93,7 @@
     for l in f_data[0]:
         lines = [l]
         for i in range(1,num_con):
-            lines.append(f_data[i].next())
+            lines.append(next(f_data[i]))
 
         if (lines[0].find('#') != -1):
             continue
--- ./dat_hb_cor_from_con.py	(original)
+++ ./dat_hb_cor_from_con.py	(refactored)
@@ -25,8 +25,8 @@
 elif len(sys.argv) == 5:
     flg_final = False
 else:
-    print 'Usage: SCRIPT [HB file (bwyv.hb)] [dir_search] [step_ignore] [dir_out]'
-    print ' or  : SCRIPT [HB file (bwyv.hb)] [dir_search] [step_ignore] [step_final] [dir_out]'
+    print('Usage: SCRIPT [HB file (bwyv.hb)] [dir_search] [step_ignore] [dir_out]')
+    print(' or  : SCRIPT [HB file (bwyv.hb)] [dir_search] [step_ignore] [step_final] [dir_out]')
     sys.exit(2)
 
 filepath_hb = sys.argv[1]
@@ -93,7 +93,7 @@
             try:
                 f_con = open('hbcon.out','r')
             except:
-                print ('Skip %s' % (os.getcwd(),) )
+                print(('Skip %s' % (os.getcwd(),) ))
                 os.chdir(orig_dir)
                 continue
         
--- ./dat_hb_prob.py	(original)
+++ ./dat_hb_prob.py	(refactored)
@@ -24,8 +24,8 @@
 elif len(sys.argv) == 4:
     flg_final = False
 else:
-    print 'Usage: SCRIPT [HB file (bwyv.hb)] [output file] [step_ignore]'
-    print ' or  : SCRIPT [HB file (bwyv.hb)] [output file] [step_ignore] [step_final]'
+    print('Usage: SCRIPT [HB file (bwyv.hb)] [output file] [step_ignore]')
+    print(' or  : SCRIPT [HB file (bwyv.hb)] [output file] [step_ignore] [step_final]')
     sys.exit(2)
 
 filepath_hb = sys.argv[1]
@@ -94,7 +94,7 @@
                 break
 
         if num == 0:
-            print ('Warning: %s has no data.' % (datafile,))
+            print(('Warning: %s has no data.' % (datafile,)))
         else:
             ratio = 100.0 * float(n_con) / float(num)
             f_out.write('%s %s %s %5i %6.3f\n' % (cM,frc,rnd,idx,ratio))
--- ./dat_hbenergy_contact.py	(original)
+++ ./dat_hbenergy_contact.py	(refactored)
@@ -48,7 +48,7 @@
     rnd = d_sp[-1]
     type_pNcM = d.split('/')[-3][0:2]
     if type_pNcM not in ('pN','cM'):
-        print 'Error: not pN nor cM'
+        print('Error: not pN nor cM')
         sys.exit(2)
     simulations.append((type_pNcM,cM,frc,rnd))
 
@@ -61,8 +61,8 @@
     os.chdir('%s/%s%s/%s_%s_%s' % (orig_dir, type_pNcM, cM, cM, frc, rnd))
 
     if not os.path.exists('Energies2_HB.dat'):
-        print ('Warning: No file Energies2_HB.dat in (type_pNcM, cM, frc, rnd)=(%s,%s,%s,%s)' 
-              % (type_pNcM, cM, frc, rnd) )
+        print(('Warning: No file Energies2_HB.dat in (type_pNcM, cM, frc, rnd)=(%s,%s,%s,%s)' 
+              % (type_pNcM, cM, frc, rnd) ))
         continue
 
     if os.path.exists(filename_out):
--- ./dat_hbenergy_hb2nd.py	(original)
+++ ./dat_hbenergy_hb2nd.py	(refactored)
@@ -17,9 +17,9 @@
 import glob
 
 if len(sys.argv) != 5:
-    print ('Usage: SCRIPT [HB file (bwyv_forEne2.hb)] [dir_search]'
+    print(('Usage: SCRIPT [HB file (bwyv_forEne2.hb)] [dir_search]'
                         +' [filename con (hbcon2_-1.47.out)]'
-                        +' [filename hb2nd (hb2nd_-1.47.out)]')
+                        +' [filename hb2nd (hb2nd_-1.47.out)]'))
     sys.exit(2)
 
 filepath_hb = sys.argv[1]
@@ -45,7 +45,7 @@
     rnd = d_sp[-1]
     type = d.split('/')[-3][0:2]
     if type not in ('pN','cM'):
-        print 'Error: not pN nor cM'
+        print('Error: not pN nor cM')
         sys.exit(2)
     simulations.append((type,cM,frc,rnd))
 
--- ./dat_hbprob.py	(original)
+++ ./dat_hbprob.py	(refactored)
@@ -25,8 +25,8 @@
 elif len(sys.argv) == 3:
     flg_final = False
 else:
-    print 'Usage: SCRIPT [HB file (bwyv.hb)] [step_ignore]'
-    print ' or  : SCRIPT [HB file (bwyv.hb)] [step_ignore] [step_final]'
+    print('Usage: SCRIPT [HB file (bwyv.hb)] [step_ignore]')
+    print(' or  : SCRIPT [HB file (bwyv.hb)] [step_ignore] [step_final]')
     sys.exit(2)
 
 filepath_hb = sys.argv[1]
@@ -99,7 +99,7 @@
                 break
 
         if num == 0:
-            print ('Warning: %s has no data.' % (datafile,))
+            print(('Warning: %s has no data.' % (datafile,)))
         else:
             ratio = 100.0 * float(n_con) / float(num)
             f_out.write('%s %s %s %5i %6.3f\n' % (cM,frc,rnd,idx,ratio))
--- ./dat_stprob.py	(original)
+++ ./dat_stprob.py	(refactored)
@@ -25,8 +25,8 @@
 elif len(sys.argv) == 3:
     flg_final = False
 else:
-    print 'Usage: SCRIPT [HB file (bwyv.st)] [step_ignore]'
-    print ' or  : SCRIPT [HB file (bwyv.st)] [step_ignore] [step_final]'
+    print('Usage: SCRIPT [HB file (bwyv.st)] [step_ignore]')
+    print(' or  : SCRIPT [HB file (bwyv.st)] [step_ignore] [step_final]')
     sys.exit(2)
 
 filepath_hb = sys.argv[1]
@@ -99,7 +99,7 @@
                 break
 
         if num == 0:
-            print ('Warning: %s has no data.' % (datafile,))
+            print(('Warning: %s has no data.' % (datafile,)))
         else:
             ratio = 100.0 * float(n_con) / float(num)
             f_out.write('%s %s %s %5i %6.3f\n' % (cM,frc,rnd,idx,ratio))
--- ./dcd2dcd_with_ts.py	(original)
+++ ./dcd2dcd_with_ts.py	(refactored)
@@ -10,7 +10,7 @@
 from cafysis.file_io.ts import TsFile
 
 if len(sys.argv) != 4:
-    print 'Usage: % SCRIPT [input DCD] [ts file] [output DCD]'
+    print('Usage: % SCRIPT [input DCD] [ts file] [output DCD]')
     sys.exit(2)
 
 # Open DCD and read the header
@@ -43,7 +43,7 @@
 #i_org = 0
 while dcd.has_more_data():
     if not ts.has_more_data():
-        print 'Not enough data in .ts file (1)'
+        print('Not enough data in .ts file (1)')
         sys.exit(2)
         
     tsdata, lines = ts.read_onestep()
@@ -51,7 +51,7 @@
     # skip step=1
     if tsdata[0][ts.head_col.step] == 1:
         if not ts.has_more_data():
-            print 'Not enough data in .ts file (2)'
+            print('Not enough data in .ts file (2)')
             sys.exit(2)
         tsdata, lines = ts.read_onestep()
     
--- ./dcd2drid.py	(original)
+++ ./dcd2drid.py	(refactored)
@@ -14,8 +14,8 @@
 import numpy as np
 
 if len(sys.argv) not in (4,5):
-    print 'Usage: % SCRIPT [input DCD] [mask file] [output DRID]'
-    print '  or : % SCRIPT [input DCD] [mask file] [# solute in DCD] [output DRID]'
+    print('Usage: % SCRIPT [input DCD] [mask file] [output DRID]')
+    print('  or : % SCRIPT [input DCD] [mask file] [# solute in DCD] [output DRID]')
     sys.exit(2)
 
 dcd = DcdFile(sys.argv[1])
@@ -34,7 +34,7 @@
     flg_solute = True
     nsolute = int(sys.argv[3])
     if len(mask) != nsolute or len(mask[0]) != nsolute:
-        print 'Error: # solute and size of mask is not consistent'
+        print('Error: # solute and size of mask is not consistent')
         sys.exit(2)
 
 drid = DridFile(sys.argv[-1])
--- ./dcd2movie_with_ts.py	(original)
+++ ./dcd2movie_with_ts.py	(refactored)
@@ -11,7 +11,7 @@
 from cafysis.file_io.pdb import PdbFile
 
 if len(sys.argv) != 5:
-    print 'Usage: % SCRIPT [input DCD] [ts file] [reference PDB] [output movie]'
+    print('Usage: % SCRIPT [input DCD] [ts file] [reference PDB] [output movie]')
     sys.exit(2)
 
 # Read the reference PDB
@@ -40,7 +40,7 @@
 i_org = 0
 while dcd.has_more_data():
     if not ts.has_more_data():
-        print 'Not enough data in .ts file (1)'
+        print('Not enough data in .ts file (1)')
         sys.exit(2)
         
     tsdata, lines = ts.read_onestep()
@@ -48,7 +48,7 @@
     # skip step=1
     if tsdata[0][ts.head_col.step] == 1:
         if not ts.has_more_data():
-            print 'Not enough data in .ts file (2)'
+            print('Not enough data in .ts file (2)')
             sys.exit(2)
         tsdata, lines = ts.read_onestep()
     
--- ./dcd_align_and_origin_PBC.py	(original)
+++ ./dcd_align_and_origin_PBC.py	(refactored)
@@ -26,7 +26,7 @@
 MAXD = 50.0
 
 if len(sys.argv) != 9:
-    print 'Usage: SCRIPT [input DCD] [input PDB] [ID domain begin] [ID domain end] [ID for fit begin] [ID for fit end] [Box size] [output DCD]'
+    print('Usage: SCRIPT [input DCD] [input PDB] [ID domain begin] [ID domain end] [ID for fit begin] [ID for fit end] [Box size] [output DCD]')
     sys.exit(2)
 
 ID_DOM_INI = int(sys.argv[3]) - 1  # 重心を求める際に必要
@@ -132,7 +132,7 @@
     max_xyz, min_xyz, L = find_max_min_PBC(data[ID_DOM_INI_FIT:ID_DOM_END_FIT+1])
 
     if L[0] > BOXSIZE or L[1] > BOXSIZE or L[2] > BOXSIZE:
-        print ('Warning: (1) L exceeds BOXSIZE at frame %i' % iframe)
+        print(('Warning: (1) L exceeds BOXSIZE at frame %i' % iframe))
 
     mtx_move = mtx_crd_transform()
     #mtx_move.reset()
@@ -157,7 +157,7 @@
     max_xyz, min_xyz, L = find_max_min_PBC(data[ID_DOM_INI:ID_DOM_END+1])
 
     if L[0] > BOXSIZE or L[1] > BOXSIZE or L[2] > BOXSIZE:
-        print ('Warning: (2) L exceeds BOXSIZE at frame %i' % iframe)
+        print(('Warning: (2) L exceeds BOXSIZE at frame %i' % iframe))
 
     move = [0.0, 0.0, 0.0]
     if max_xyz[0] > 0.5*L[0]:
--- ./dcd_body_origin_PBC.py	(original)
+++ ./dcd_body_origin_PBC.py	(refactored)
@@ -20,7 +20,7 @@
 MAXD = 50.0
 
 if len(sys.argv) != 6:
-    print 'Usage: SCRIPT [input DCD] [ID domain begin] [ID domain end] [Box size] [output DCD]'
+    print('Usage: SCRIPT [input DCD] [ID domain begin] [ID domain end] [Box size] [output DCD]')
     sys.exit(2)
 
 ID_DOM_INI = int(sys.argv[2]) - 1  # 重心を求める際に必要
@@ -89,7 +89,7 @@
     max_xyz, min_xyz, L = find_max_min_PBC(data[ID_DOM_INI:ID_DOM_END+1])
 
     if L[0] > BOXSIZE or L[1] > BOXSIZE or L[2] > BOXSIZE:
-        print ('Warning: L exceeds BOXSIZE at frame %i' % iframe)
+        print(('Warning: L exceeds BOXSIZE at frame %i' % iframe))
 
     mtx_move = mtx_crd_transform()
     #mtx_move.reset()
--- ./dcd_body_origin_PBC_unwrap_solute.py	(original)
+++ ./dcd_body_origin_PBC_unwrap_solute.py	(refactored)
@@ -20,7 +20,7 @@
 MAXD = 50.0
 
 if len(sys.argv) != 6:
-    print 'Usage: SCRIPT [input DCD] [ID domain begin] [ID domain end] [Box size] [output DCD]'
+    print('Usage: SCRIPT [input DCD] [ID domain begin] [ID domain end] [Box size] [output DCD]')
     sys.exit(2)
 
 ID_DOM_INI = int(sys.argv[2]) - 1  # 重心を求める際に必要
--- ./dcd_centroid_origin.py	(original)
+++ ./dcd_centroid_origin.py	(refactored)
@@ -13,7 +13,7 @@
 import sys
 
 if len(sys.argv) != 5:
-    print 'Usage: SCRIPT [input DCD] [ID domain begin] [ID domain end] [output DCD]'
+    print('Usage: SCRIPT [input DCD] [ID domain begin] [ID domain end] [output DCD]')
     sys.exit(2)
 
 ID_DOM_INI = int(sys.argv[2]) - 1  # 重心を求める際に必要
@@ -39,7 +39,7 @@
     #重心(CAのみで計算）が原点に重なるように並進
     com = [0.0] * 3
     n_com = ID_DOM_END - ID_DOM_INI + 1
-    for i in xrange(ID_DOM_INI, ID_DOM_END+1):
+    for i in range(ID_DOM_INI, ID_DOM_END+1):
         com[0] += data[i][0]
         com[1] += data[i][1]
         com[2] += data[i][2]
--- ./dcd_centroid_origin_PBC.py	(original)
+++ ./dcd_centroid_origin_PBC.py	(refactored)
@@ -17,7 +17,7 @@
 import copy
 
 if len(sys.argv) != 6:
-    print 'Usage: SCRIPT [input DCD] [ID domain begin] [ID domain end] [Box size] [output DCD]'
+    print('Usage: SCRIPT [input DCD] [ID domain begin] [ID domain end] [Box size] [output DCD]')
     sys.exit(2)
 
 ID_DOM_INI = int(sys.argv[2]) - 1  # 重心を求める際に必要
--- ./dcd_concatenate.py	(original)
+++ ./dcd_concatenate.py	(refactored)
@@ -22,7 +22,7 @@
     
     # Count the total frame number
     num_frame = 1
-    for i in xrange(0,num_dcd-1) :
+    for i in range(0,num_dcd-1) :
         f_in = DcdFile(filepaths[i])
         f_in.open_to_read()
         f_in.read_header()
@@ -51,7 +51,7 @@
         f_out.write_onestep(f_in.read_onestep())
     f_in.close()
     
-    for i in xrange(1,num_dcd) :
+    for i in range(1,num_dcd) :
         f_in = DcdFile(filepaths[i])
         f_in.open_to_read()
         f_in.read_header()
@@ -69,8 +69,8 @@
 
 if __name__ == '__main__':
     if len(sys.argv) < 4:
-        print 'Usage: % SCRIPT [DCD1] [DCD2] ([DCD3] ...) [output DCD]'
+        print('Usage: % SCRIPT [DCD1] [DCD2] ([DCD3] ...) [output DCD]')
         sys.exit(2)
     n_frames = dcd_concatenate(sys.argv[1:])
     for i,n in enumerate(n_frames):
-        print 'file ',i+1,': ', n
+        print('file ',i+1,': ', n)
--- ./dcd_concatenate_dist.py	(original)
+++ ./dcd_concatenate_dist.py	(refactored)
@@ -21,9 +21,9 @@
         self._title = title
         
     def show(self):
-        print 'class:', self._class
-        print 'function:', self._func
-        print 'matter:', self._title
+        print('class:', self._class)
+        print('function:', self._func)
+        print('matter:', self._title)
 
 ############################
 # cafysis.file_io.dcd
@@ -43,17 +43,17 @@
         
     def show(self):
         for line in self.title :
-            print line
-        print 'nset', self.nset
-        print 'istart', self.istart
-        print 'nstep_save', self.nstep_save
-        print 'nstep', self.nstep
-        print 'nunit_real', self.nunit_real
-        print 'delta', self.delta
-        print 'tempk', self.tempk
-        for i in xrange(self.nunit_real) :
-            print 'lunit2mp[', i, ']', self.lunit2mp[i]
-        print 'nmp_real', self.nmp_real
+            print(line)
+        print('nset', self.nset)
+        print('istart', self.istart)
+        print('nstep_save', self.nstep_save)
+        print('nstep', self.nstep)
+        print('nunit_real', self.nunit_real)
+        print('delta', self.delta)
+        print('tempk', self.tempk)
+        for i in range(self.nunit_real) :
+            print('lunit2mp[', i, ']', self.lunit2mp[i])
+        print('nmp_real', self.nmp_real)
         
 class DcdFile :
     def __init__(self, filename) :
@@ -98,7 +98,7 @@
         #self._header.tempk = float(bdata[3].strip('\0 '))
         self._header.tempk = float(bdata[3])
         self._header.lunit2mp = []
-        for i in xrange(self._header.nunit_real) :
+        for i in range(self._header.nunit_real) :
 #            self._header.lunit2mp.append(int(bdata[i + 4].strip('\0 ')))
             self._header.lunit2mp.append(int(bdata[i + 4]))
             
@@ -137,7 +137,7 @@
         
         p = struct.pack('80s', str(self._header.tempk))
         binary += re_null.sub(' ', p)
-        for i in xrange(self._header.nunit_real) :
+        for i in range(self._header.nunit_real) :
             p = struct.pack('80s', str(self._header.lunit2mp[i]))
             binary += re_null.sub(' ', p)
             
@@ -170,7 +170,7 @@
         b = self._pick_data()
         z = struct.unpack('f' * self._header.nmp_real, b)
         
-        for i in xrange(self._header.nmp_real) :
+        for i in range(self._header.nmp_real) :
             xyz = [x[i], y[i], z[i]]
             coord_matrix.append(xyz)
         
@@ -185,7 +185,7 @@
         self._file.seek(4+num, os.SEEK_CUR)
      
     def skip(self, num):
-        for i in xrange(num):
+        for i in range(num):
             self.skip_onestep()
        
     def write_onestep(self, coord_matrix):
@@ -230,7 +230,7 @@
     def _read_at(self, num):
         self._file.seek(0)
         self.read_header()
-        for i in xrange(num - 1) :
+        for i in range(num - 1) :
             self.read_onestep()
         return self.read_onestep()
         
@@ -239,7 +239,7 @@
 ############################
 if __name__ == '__main__':
     if len(sys.argv) < 4:
-        print 'Usage: % SCRIPT [DCD1] [DCD2] ([DCD3] ...) [output DCD]'
+        print('Usage: % SCRIPT [DCD1] [DCD2] ([DCD3] ...) [output DCD]')
         sys.exit(2)
         
     # Number of input DCD files
@@ -251,7 +251,7 @@
     
     # Count the total frame number
     num_frame = 1
-    for i in xrange(1,num_dcd) :
+    for i in range(1,num_dcd) :
         f_in = DcdFile(sys.argv[i])
         f_in.open_to_read()
         f_in.read_header()
@@ -274,17 +274,17 @@
     header.nstep = num_step
     f_out.set_header(header)
     f_out.write_header()
-    print sys.argv[1], f_in.get_header().nset
+    print(sys.argv[1], f_in.get_header().nset)
     while f_in.has_more_data() :
         f_out.write_onestep(f_in.read_onestep())
     f_in.close()
     
-    for i in xrange(2,num_dcd+1) :
+    for i in range(2,num_dcd+1) :
         f_in = DcdFile(sys.argv[i])
         f_in.open_to_read()
         f_in.read_header()
         f_in.skip_onestep()  # skip the first step
-        print sys.argv[i], f_in.get_header().nset - 1
+        print(sys.argv[i], f_in.get_header().nset - 1)
         while f_in.has_more_data() :
             f_out.write_onestep(f_in.read_onestep())
         f_in.close()
--- ./dcd_concatenate_noskip.py	(original)
+++ ./dcd_concatenate_noskip.py	(refactored)
@@ -11,7 +11,7 @@
 
 if __name__ == '__main__':
     if len(sys.argv) < 4:
-        print 'Usage: % SCRIPT [DCD1] [DCD2] ([DCD3] ...) [output DCD]'
+        print('Usage: % SCRIPT [DCD1] [DCD2] ([DCD3] ...) [output DCD]')
         sys.exit(2)
         
     # Number of input DCD files
@@ -23,7 +23,7 @@
     
     # Count the total frame number
     num_frame = 1
-    for i in xrange(1,num_dcd) :
+    for i in range(1,num_dcd) :
         f_in = DcdFile(sys.argv[i])
         f_in.open_to_read()
         f_in.read_header()
@@ -46,17 +46,17 @@
     header.nstep = num_step
     f_out.set_header(header)
     f_out.write_header()
-    print sys.argv[1], f_in.get_header().nset
+    print(sys.argv[1], f_in.get_header().nset)
     while f_in.has_more_data() :
         f_out.write_onestep(f_in.read_onestep())
     f_in.close()
     
-    for i in xrange(2,num_dcd+1) :
+    for i in range(2,num_dcd+1) :
         f_in = DcdFile(sys.argv[i])
         f_in.open_to_read()
         f_in.read_header()
         #f_in.skip_onestep()  # skip the first step
-        print sys.argv[i], f_in.get_header().nset
+        print(sys.argv[i], f_in.get_header().nset)
         while f_in.has_more_data() :
             f_out.write_onestep(f_in.read_onestep())
         f_in.close()
--- ./dcd_contactmap.py	(original)
+++ ./dcd_contactmap.py	(refactored)
@@ -10,8 +10,8 @@
 from numpy import zeros, int32
 
 if not len(sys.argv) in (4,5):
-    print 'Usage: % SCRIPT [input DCD] [cutoff] [output]'
-    print '       % SCRIPT [input DCD] [cutoff] [output] [output PNG file (optional)]'
+    print('Usage: % SCRIPT [input DCD] [cutoff] [output]')
+    print('       % SCRIPT [input DCD] [cutoff] [output] [output PNG file (optional)]')
     sys.exit(2)
     
 cutoff = float(sys.argv[2])
@@ -28,8 +28,8 @@
 while dcd.has_more_data() :
     data = dcd.read_onestep()
     
-    for i in xrange(nmp) :
-        for j in xrange(i+1,nmp) :
+    for i in range(nmp) :
+        for j in range(i+1,nmp) :
             distance = ( (data[i][0] - data[j][0]) ** 2
                         +(data[i][1] - data[j][1]) ** 2
                         +(data[i][2] - data[j][2]) ** 2 )
@@ -37,8 +37,8 @@
                 hist[i][j] += 1
 
 file_out = open(filepath_out,'w')
-for i in xrange(nmp) :
-    for j in xrange(i+1,nmp) :
+for i in range(nmp) :
+    for j in range(i+1,nmp) :
         file_out.write('%8i %8i %20i\n'%(i+1,j+1,hist[i][j]))
     file_out.write('\n')
 file_out.close()    
--- ./dcd_domain_angle.py	(original)
+++ ./dcd_domain_angle.py	(refactored)
@@ -34,7 +34,7 @@
 mp_domA_1 = 3 * ( 72 - 11)
 
 mp_domB = []
-for nt12 in range(42, 47+1)+range(174,178+1)+range(130,166+1):
+for nt12 in list(range(42, 47+1))+list(range(174,178+1))+list(range(130,166+1)):
     nt = nt12 - 11
     mp_domB.append( 3 * (nt-1) )  # Use phosphate
 
--- ./dcd_frame_count.py	(original)
+++ ./dcd_frame_count.py	(refactored)
@@ -38,4 +38,4 @@
         print ('Usage: SCRIPT [dcd file]')
         sys.exit(2)
 
-    print ('# frames = %i' % (count(sys.argv[1])))
+    print(('# frames = %i' % (count(sys.argv[1]))))
--- ./dcd_frame_extract.py	(original)
+++ ./dcd_frame_extract.py	(refactored)
@@ -44,7 +44,7 @@
 
 frame_begin = int(sys.argv[2])
 if frame_begin < 0:
-    print 'Error: beginning frame should not less than 0'
+    print('Error: beginning frame should not less than 0')
     sys.exit(2)
 frame_end = int(sys.argv[3])
 if (len(sys.argv) == 5) :
@@ -52,12 +52,12 @@
 else:
     frame_stride = int(sys.argv[4])
     if frame_stride <= 0:
-        print 'The frame stride is invalid'
+        print('The frame stride is invalid')
         sys.exit(2)
         
 frame_num = frame_end - frame_begin + 1
 if frame_num < 1 :
-    print 'The number of frames is invalid.'
+    print('The number of frames is invalid.')
     sys.exit(2)
 
 dcd = DcdFile(sys.argv[1])
@@ -81,8 +81,8 @@
 dcd_out.write_header()
 
 def error_no_data() :
-    print 'The number of frames is invalid.'
-    print 'Header information:'
+    print('The number of frames is invalid.')
+    print('Header information:')
     dcd.show_header()
     sys.exit(2)
 
@@ -91,7 +91,7 @@
 
 # read and write
 icount = -1
-for i in xrange(frame_num) :
+for i in range(frame_num) :
     if not dcd.has_more_data() :
         error_no_data()
     icount += 1
--- ./dcd_frame_extract_as_dat.py	(original)
+++ ./dcd_frame_extract_as_dat.py	(refactored)
@@ -12,13 +12,13 @@
 from cafysis.file_io.pdb import PdbFile
 
 if (not len(sys.argv) in (5, 6)):
-    print 'Usage: % SCRIPT [input DCD] [beginning (0)] [end] [output movie]'
-    print '       % SCRIPT [input DCD] [beginning (0)] [end] [stride] [output movie]'
+    print('Usage: % SCRIPT [input DCD] [beginning (0)] [end] [output movie]')
+    print('       % SCRIPT [input DCD] [beginning (0)] [end] [stride] [output movie]')
     sys.exit(2)
 
 frame_begin = int(sys.argv[2])
 if frame_begin < 0:
-    print 'Error: beginning frame should not less than 0'
+    print('Error: beginning frame should not less than 0')
     sys.exit(2)
 frame_end = int(sys.argv[3])
 if (len(sys.argv) == 5) :
@@ -26,12 +26,12 @@
 else:
     frame_stride = int(sys.argv[4])
     if frame_stride <= 0:
-        print 'The frame stride is invalid'
+        print('The frame stride is invalid')
         sys.exit(2)
         
 frame_num = frame_end - frame_begin + 1
 if frame_num < 1 :
-    print 'The number of frames is invalid.'
+    print('The number of frames is invalid.')
     sys.exit(2)
 
 
@@ -46,8 +46,8 @@
 dcd.read_header()
 
 def error_no_data() :
-    print 'The number of frames is invalid.'
-    print 'Header information:'
+    print('The number of frames is invalid.')
+    print('Header information:')
     dcd.show_header()
     sys.exit(2)
 
@@ -58,7 +58,7 @@
 
 # read and write
 icount = -1
-for i in xrange(frame_num) :
+for i in range(frame_num) :
     if not dcd.has_more_data() :
         error_no_data()
         
--- ./dcd_frame_extract_as_movie.py	(original)
+++ ./dcd_frame_extract_as_movie.py	(refactored)
@@ -12,13 +12,13 @@
 from cafysis.file_io.pdb import PdbFile
 
 if (not len(sys.argv) in (6, 7)):
-    print 'Usage: % SCRIPT [input DCD] [beginning (0)] [end] [reference PDB] [output movie]'
-    print '       % SCRIPT [input DCD] [beginning (0)] [end] [stride] [reference PDB] [output movie]'
+    print('Usage: % SCRIPT [input DCD] [beginning (0)] [end] [reference PDB] [output movie]')
+    print('       % SCRIPT [input DCD] [beginning (0)] [end] [stride] [reference PDB] [output movie]')
     sys.exit(2)
 
 frame_begin = int(sys.argv[2])
 if frame_begin < 0:
-    print 'Error: beginning frame should not less than 0'
+    print('Error: beginning frame should not less than 0')
     sys.exit(2)
 frame_end = int(sys.argv[3])
 if (len(sys.argv) == 6) :
@@ -26,12 +26,12 @@
 else:
     frame_stride = int(sys.argv[4])
     if frame_stride <= 0:
-        print 'The frame stride is invalid'
+        print('The frame stride is invalid')
         sys.exit(2)
         
 frame_num = frame_end - frame_begin + 1
 if frame_num < 1 :
-    print 'The number of frames is invalid.'
+    print('The number of frames is invalid.')
     sys.exit(2)
 
 
@@ -53,8 +53,8 @@
 dcd.read_header()
 
 def error_no_data() :
-    print 'The number of frames is invalid.'
-    print 'Header information:'
+    print('The number of frames is invalid.')
+    print('Header information:')
     dcd.show_header()
     sys.exit(2)
 
@@ -65,7 +65,7 @@
 
 # read and write
 icount = -1
-for i in xrange(frame_num) :
+for i in range(frame_num) :
     if not dcd.has_more_data() :
         error_no_data()
         
--- ./dcd_onlyS.py	(original)
+++ ./dcd_onlyS.py	(refactored)
@@ -6,7 +6,7 @@
 import sys
 
 if len(sys.argv) != 4:
-    print 'Usage: SCRIPT [input DCD] [last index of RNA (count from 0)] [output DCD]'
+    print('Usage: SCRIPT [input DCD] [last index of RNA (count from 0)] [output DCD]')
     sys.exit(2)
 
 last_mp = int(sys.argv[2])
--- ./dcd_pairwise.py	(original)
+++ ./dcd_pairwise.py	(refactored)
@@ -3,7 +3,7 @@
 import sys
 
 if len(sys.argv) != 3:
-    print 'Usage: SCRIPT [DCD] [output matrix file]'
+    print('Usage: SCRIPT [DCD] [output matrix file]')
     sys.exit(2)
 
 from cafysis.file_io.dcd import DcdFile
--- ./dcd_persistencelength.py	(original)
+++ ./dcd_persistencelength.py	(refactored)
@@ -49,7 +49,7 @@
     data = dcd.read_onestep_np()
         
     #print 'Start i loop'
-    for i in xrange(args.offset+args.gap, nmp-args.gap, args.gap) :
+    for i in range(args.offset+args.gap, nmp-args.gap, args.gap) :
 
         #print i, i-args.gap
         vi = data[i] - data[i-args.gap]
@@ -57,7 +57,7 @@
         n_unit_len_sq += 1
 
         #print 'Start j loop'
-        for j in xrange(i+args.gap, nmp, args.gap) :
+        for j in range(i+args.gap, nmp, args.gap) :
 
             #print '    ',j, j-args.gap
             vj = data[j] - data[j-args.gap]
@@ -74,7 +74,7 @@
 
 ## Calculate average correlation
 cor = []
-for i in xrange(nmp/args.gap-1):
+for i in range(nmp/args.gap-1):
     if num_n[i] == 0:
         cor.append(1.0)
     else:
@@ -98,7 +98,7 @@
 
 para, dev = curve_fit(func_exp, ij, cor[:n_cor])
 
-print ('Persistent length: %f nm' % (para[0]*0.1,))
+print(('Persistent length: %f nm' % (para[0]*0.1,)))
 
 ## Output
 f_out = open(args.out, 'w')
--- ./dcd_positioning.py	(original)
+++ ./dcd_positioning.py	(refactored)
@@ -21,7 +21,7 @@
 from math import hypot, atan2
 
 if len(sys.argv) != 7:
-    print 'Usage: SCRIPT [input DCD] [ID domain begin] [ID domain end] [ID for North] [ID for Greenwich] [output DCD]'
+    print('Usage: SCRIPT [input DCD] [ID domain begin] [ID domain end] [ID for North] [ID for Greenwich] [output DCD]')
     sys.exit(2)
 
 ID_DOM_INI = int(sys.argv[2]) - 1  # 重心を求める際に必要
@@ -64,7 +64,7 @@
     #重心(CAのみで計算）が原点に重なるように並進
     com = [0.0] * 3
     n_com = ID_DOM_END - ID_DOM_INI + 1
-    for i in xrange(ID_DOM_INI, ID_DOM_END+1):
+    for i in range(ID_DOM_INI, ID_DOM_END+1):
         com[0] += data[i][0]
         com[1] += data[i][1]
         com[2] += data[i][2]
--- ./dcd_show_header.py	(original)
+++ ./dcd_show_header.py	(refactored)
@@ -7,7 +7,7 @@
 from cafysis.file_io.dcd import DcdFile
 
 if (len(sys.argv) != 2):
-    print 'Usage: % SCRIPT [filename]'
+    print('Usage: % SCRIPT [filename]')
     sys.exit(2)
     
 dcd = DcdFile(sys.argv[1])
--- ./dcd_struct_extract.py	(original)
+++ ./dcd_struct_extract.py	(refactored)
@@ -9,9 +9,9 @@
 from cafysis.file_io.dcd import DcdFile
 
 if len(sys.argv) < 5:
-    print 
-    print 'Usage: % SCRIPT [input DCD] [output DCD] [[(mp begin) (mp end)] ....]'
-    print 
+    print() 
+    print('Usage: % SCRIPT [input DCD] [output DCD] [[(mp begin) (mp end)] ....]')
+    print() 
     sys.exit(2)
     
 # input
@@ -28,8 +28,8 @@
     n *= -1
 
 if n == -1:
-    print 
-    print 'Usage: % SCRIPT [input DCD] [output DCD] [[(mp begin) (mp end)] ....]'
+    print() 
+    print('Usage: % SCRIPT [input DCD] [output DCD] [[(mp begin) (mp end)] ....]')
     sys.exit(2)
     
 f_dcd_in.open_to_read()
@@ -55,7 +55,7 @@
     data_out = []
     for id_pair in id_pairs :
         if id_pair[1] > nmp_in + 1:
-            print 'Error: id_pair[1] > nmp_in + 1'
+            print('Error: id_pair[1] > nmp_in + 1')
             sys.exit(2)
         data_out.extend(data[id_pair[0]-1 : id_pair[1]])
     ##debug
--- ./dcd_traj_average.py	(original)
+++ ./dcd_traj_average.py	(refactored)
@@ -9,7 +9,7 @@
 from cafysis.file_io.pdb import PdbFile
 
 if len(sys.argv) != 4:
-    print ' Usage: % SCRIPT [input DCD] [input PDB] [output PDB] '
+    print(' Usage: % SCRIPT [input DCD] [input PDB] [output PDB] ')
     sys.exit(2)
     
 dcd = DcdFile(sys.argv[1])
@@ -26,7 +26,7 @@
 f_out.open_to_write()
 
 ave = []
-for i in xrange(nmp) :
+for i in range(nmp) :
     xyz = [0.0, 0.0, 0.0]
     ave.append(xyz)
     
@@ -34,8 +34,8 @@
 while dcd.has_more_data() :
     data = dcd.read_onestep()
     nframe += 1
-    print nframe
-    for i in xrange(nmp) :
+    print(nframe)
+    for i in range(nmp) :
         ave[i][0] += data[i][0]
         ave[i][1] += data[i][1]
         ave[i][2] += data[i][2]
@@ -48,7 +48,7 @@
     
 imp = 0
 for c in chains:
-    for i in xrange(c.num_atom()) :
+    for i in range(c.num_atom()) :
         imp += 1
         c.get_atom(i).xyz.x = ave[i][0]
         c.get_atom(i).xyz.y = ave[i][1]
--- ./dcd_traj_diffuse.py	(original)
+++ ./dcd_traj_diffuse.py	(refactored)
@@ -41,11 +41,11 @@
 dcd.close()
 
 if nstep != len(com):
-    print 'Error: nstep != len(com)'
+    print('Error: nstep != len(com)')
     sys.exit(2)
 Nmax = int(nstep / 2)
-print 'nstep: ',nstep
-print 'Nmax: ', Nmax
+print('nstep: ',nstep)
+print('Nmax: ', Nmax)
 
 
 msd = []
@@ -74,4 +74,4 @@
 
 for dt in range(1, Nmax+1):
     f_out.write('%i %f\n' % (dt, msd[dt]/float(n_add[dt])) )
-print n_add
+print(n_add)
--- ./dcd_traj_distance.py	(original)
+++ ./dcd_traj_distance.py	(refactored)
@@ -9,7 +9,7 @@
 from cafysis.file_io.dcd import DcdFile
 
 if len(sys.argv) != 5:
-    print ' Usage: % SCRIPT [input DCD] [ID1] [ID2] [output PDB] '
+    print(' Usage: % SCRIPT [input DCD] [ID1] [ID2] [output PDB] ')
     sys.exit(2)
     
 dcd = DcdFile(sys.argv[1])
--- ./dcd_traj_distance_PBC.py	(original)
+++ ./dcd_traj_distance_PBC.py	(refactored)
@@ -10,7 +10,7 @@
 from cafysis.file_io.dcd import DcdFile
 
 if len(sys.argv) != 6:
-    print ' Usage: % SCRIPT [input DCD] [boxsize] [ID1] [ID2] [output PDB] '
+    print(' Usage: % SCRIPT [input DCD] [boxsize] [ID1] [ID2] [output PDB] ')
     sys.exit(2)
     
 dcd = DcdFile(sys.argv[1])
--- ./dcd_traj_measure.py	(original)
+++ ./dcd_traj_measure.py	(refactored)
@@ -53,63 +53,63 @@
     pass
 
 if len(sys.argv) != 3:
-    print ' Usage: % SCRIPT [input DCD] [command file] '
-    print '      command file is...'
-    print '      ##########################################'
-    print '      #frameskip 5                             #'
-    print '      #display 1000                            #'
-    print '      #out_time 1                              #'
-    print '      #          (0:nothing, 1:frame, 2:time)  #'
-    print '      #                                        #'
-    print '      #def_mp  mp1  34                         #'
-    print '      #def_mp  mp2  189                        #'
-    print '      #def_mp   A   200                        #'
-    print '      #     :    :   :                         #'
-    print '      #                                        #'
-    print '      #def_com com1 2 3 4 5 - 10 12 14 - 20    #'
-    print '      #def_com com2 2 3 4 5 - 10 12 14 - 20    #'
-    print '      #     :    :   :                         #'
-    print '      #                                        #'
-    print '      #def_mol mol1 2 3 4 5 - 10 12 14 - 20    #'
-    print '      #def_mol mol2 2 3 4 5 - 10 12 14 - 20    #'
-    print '      #     :    :   :                         #'
-    print '      #                                        #'
-    print '      #distance  1   2                         #'
-    print '      #distance  3   A                         #'
-    print '      #distance 100  com2                      #'
-    print '      #distance com1 com2                      #'
-    print '      #     :    :   :                         #'
-    print '      #                                        #'
-    print '      #angle     10  11  12  13                #'
-    print '      #angle     com1  11  com2  13            #'
-    print '      #     :    :   :                         #'
-    print '      #                                        #'
-    print '      #locaxis com1 com2 com3                  #'
-    print '      # !location of com1 on axis (com2->com3) #'
-    print '      #     :    :   :                         #'
-    print '      #                                        #'
-    print '      #def_ninfo ninfo1 filename               #'
-    print '      #q all ninfo1                            #'
-    print '      #q contact ninfo1                        #'
-    print '      #q basepair ninfo1                       #'
-    print '      #q basestack ninfo1                      #'
-    print '      #     :    :   :                         #'
-    print '      #                                        #'
-    print '      #dock mol mol cutdist cutnum cutcom      #'
-    print '      #dock mol mol   10.0    4     100.0      #'
-    print '      #     :    :   :                         #'
-    print '      #                                        #'
-    print '      #enc contact mol mol 10.0 100.0          #'
-    print '      #     :    :   :                         #'
-    print '      #                                        #'
-    print '      #polar com1                              #'
-    print '      #     :    :   :                         #'
-    print '      #                                        #'
-    print '      #rg    mol                               #'
-    print '      #     :    :   :                         #'
-    print '      #                                        #'
-    print '      #dt_hb name r theta1 theta2 phi phi1 phi2#'
-    print '      ##########################################'
+    print(' Usage: % SCRIPT [input DCD] [command file] ')
+    print('      command file is...')
+    print('      ##########################################')
+    print('      #frameskip 5                             #')
+    print('      #display 1000                            #')
+    print('      #out_time 1                              #')
+    print('      #          (0:nothing, 1:frame, 2:time)  #')
+    print('      #                                        #')
+    print('      #def_mp  mp1  34                         #')
+    print('      #def_mp  mp2  189                        #')
+    print('      #def_mp   A   200                        #')
+    print('      #     :    :   :                         #')
+    print('      #                                        #')
+    print('      #def_com com1 2 3 4 5 - 10 12 14 - 20    #')
+    print('      #def_com com2 2 3 4 5 - 10 12 14 - 20    #')
+    print('      #     :    :   :                         #')
+    print('      #                                        #')
+    print('      #def_mol mol1 2 3 4 5 - 10 12 14 - 20    #')
+    print('      #def_mol mol2 2 3 4 5 - 10 12 14 - 20    #')
+    print('      #     :    :   :                         #')
+    print('      #                                        #')
+    print('      #distance  1   2                         #')
+    print('      #distance  3   A                         #')
+    print('      #distance 100  com2                      #')
+    print('      #distance com1 com2                      #')
+    print('      #     :    :   :                         #')
+    print('      #                                        #')
+    print('      #angle     10  11  12  13                #')
+    print('      #angle     com1  11  com2  13            #')
+    print('      #     :    :   :                         #')
+    print('      #                                        #')
+    print('      #locaxis com1 com2 com3                  #')
+    print('      # !location of com1 on axis (com2->com3) #')
+    print('      #     :    :   :                         #')
+    print('      #                                        #')
+    print('      #def_ninfo ninfo1 filename               #')
+    print('      #q all ninfo1                            #')
+    print('      #q contact ninfo1                        #')
+    print('      #q basepair ninfo1                       #')
+    print('      #q basestack ninfo1                      #')
+    print('      #     :    :   :                         #')
+    print('      #                                        #')
+    print('      #dock mol mol cutdist cutnum cutcom      #')
+    print('      #dock mol mol   10.0    4     100.0      #')
+    print('      #     :    :   :                         #')
+    print('      #                                        #')
+    print('      #enc contact mol mol 10.0 100.0          #')
+    print('      #     :    :   :                         #')
+    print('      #                                        #')
+    print('      #polar com1                              #')
+    print('      #     :    :   :                         #')
+    print('      #                                        #')
+    print('      #rg    mol                               #')
+    print('      #     :    :   :                         #')
+    print('      #                                        #')
+    print('      #dt_hb name r theta1 theta2 phi phi1 phi2#')
+    print('      ##########################################')
     sys.exit(2)
 
 JUDGE_CONTACT = 1.2
@@ -150,7 +150,7 @@
     elif linesp[0] == 'out_time' :
         out_time = int(linesp[1])
         if not out_time in (0,1,2):
-            print ('out_time is should be 0,1 or 2\n>>>>' + line)
+            print(('out_time is should be 0,1 or 2\n>>>>' + line))
             sys.exit(2)
             
     elif linesp[0] == 'distance':
@@ -162,13 +162,13 @@
             linesp[2] = int(linesp[2])
         if re1 and re2 :
             if int(linesp[1]) > nmp or int(linesp[2]) > nmp :
-                print ('id is larger than nmp\n in the line:' + line)
+                print(('id is larger than nmp\n in the line:' + line))
                 sys.exit(2)
         cmds.append(tuple(linesp))
 
     elif linesp[0] == 'angle':
         if len(linesp) != 5:
-            print ('not enough arguments for angle in the line:' + line)
+            print(('not enough arguments for angle in the line:' + line))
             sys.exit(2)
         #linesp[1] = int(linesp[1])
         #linesp[2] = int(linesp[2])
@@ -178,7 +178,7 @@
 
     elif linesp[0] == 'delta_angle':
         if len(linesp) != 3:
-            print ('not enough arguments for delta_angle in the line:' + line)
+            print(('not enough arguments for delta_angle in the line:' + line))
             sys.exit(2)
         linesp[1] = int(linesp[1])
         linesp[2] = int(linesp[2])
@@ -190,7 +190,7 @@
         flg_sequence = False
         for arg in linesp[2:] :
             if flg_sequence :
-                mps.extend([imp for imp in xrange(mps[-1] + 1, int(arg) + 1)])
+                mps.extend([imp for imp in range(mps[-1] + 1, int(arg) + 1)])
                 flg_sequence = False
             if arg == '-' :
                 flg_sequence = True
@@ -208,7 +208,7 @@
         flg_sequence = False
         for arg in linesp[2:] :
             if flg_sequence :
-                mps.extend([imp for imp in xrange(mps[-1] + 1, int(arg) + 1)])
+                mps.extend([imp for imp in range(mps[-1] + 1, int(arg) + 1)])
                 flg_sequence = False
             if arg == '-' :
                 flg_sequence = True
@@ -380,7 +380,7 @@
         if cmd[2] in defs:
             out_files[-1].write(defs[cmd[2]][1])
         else :
-            print ('%s is not in definitions\n' % cmd[2])
+            print(('%s is not in definitions\n' % cmd[2]))
             sys.exit(2)
         out_files[-1].write('\n')
     elif cmd[0] == 'dock' :
@@ -515,7 +515,7 @@
         iframe += 1
         if display != 0 :
             if (iframe % display == 0) :
-                print ('%i frame done' % iframe)
+                print(('%i frame done' % iframe))
             
         # Skip
         if frameskip > 1 and iframe != 0 :
@@ -531,7 +531,7 @@
             flg_initial_data = False
             
         coms = {}
-        for key, d in defs.items():
+        for key, d in list(defs.items()):
             if d[0] in ('com', 'RgCom'):
                 com = [0.0, 0.0, 0.0]
                 for imp in d[1] :
@@ -697,7 +697,7 @@
             elif cmd[0] == 'q' :
                 type = cmd[1]
                 if defs[cmd[2]][0] != 'ninfo' :
-                    print ('definition error : %s is not ninfo file\n' % cmd[1])
+                    print(('definition error : %s is not ninfo file\n' % cmd[1]))
                     sys.exit(2)
                 ns = defs[cmd[2]][2]
                 n_denominator = 0
--- ./dcd_traj_pca_coord.py	(original)
+++ ./dcd_traj_pca_coord.py	(refactored)
@@ -11,7 +11,7 @@
 
 
 if len(sys.argv) != 5:
-    print ' Usage: % SCRIPT [input DCD] [average PDB] [input eigen vector] [output] '
+    print(' Usage: % SCRIPT [input DCD] [average PDB] [input eigen vector] [output] ')
     sys.exit(2)
     
 dcd = DcdFile(sys.argv[1])
@@ -27,13 +27,13 @@
 ave = []
 for c in chains:
     imp = 0
-    for i in xrange(c.num_atom()) :
+    for i in range(c.num_atom()) :
         imp += 1
         ave.append(c.get_atom(i).xyz.x)
         ave.append(c.get_atom(i).xyz.y)
         ave.append(c.get_atom(i).xyz.z)
 if len(ave) != 3*nmp :
-    print 'Error: len(ave) != 3*nmp'
+    print('Error: len(ave) != 3*nmp')
     sys.exit(2)
 
 # reading pca eigenvector
@@ -44,9 +44,9 @@
         continue
     ev.append(float(line))
 f_pca.close()
-print ev
+print(ev)
 if len(ev) != 3*nmp :
-    print 'Error: len(ev) != 3*nmp'
+    print('Error: len(ev) != 3*nmp')
     sys.exit(2)
 
 # loop for DCD
@@ -56,9 +56,9 @@
     data = dcd.read_onestep()
     nframe += 1
     if nframe % 1000 == 0:
-        print nframe
+        print(nframe)
     coord = 0.0
-    for i in xrange(nmp) :
+    for i in range(nmp) :
         coord += ( (data[i][0] - ave[3*i+0]) * ev[3*i+0] 
                  + (data[i][1] - ave[3*i+1]) * ev[3*i+1] 
                  + (data[i][2] - ave[3*i+2]) * ev[3*i+2] )
--- ./dcd_traj_r_histogram.py	(original)
+++ ./dcd_traj_r_histogram.py	(refactored)
@@ -14,7 +14,7 @@
     print ('\n Usage: SCRIPT [input DCD] [nmp] [nskip] [max r]\n')
     sys.exit(2)
 
-print '#',sys.argv
+print('#',sys.argv)
     
 nmp = int(sys.argv[2])
 nskip = int(sys.argv[3])
@@ -44,7 +44,7 @@
 dcd.close()
 
 for i in range(nbin):
-    print bin_edges[i], bin_edges[i+1], hist_all[i] / float(icount)
+    print(bin_edges[i], bin_edges[i+1], hist_all[i] / float(icount))
 
 
 '''
--- ./dcd_traj_shape.py	(original)
+++ ./dcd_traj_shape.py	(refactored)
@@ -28,17 +28,17 @@
 import math
 
 if len(sys.argv) != 2:
-    print 'Usage: SCRIPT [PDB]'
-    print ''
-    print 'Returns: %5i %6.3f %6.3f %6.3f % (N, Rg, D, S)'
-    print '    N  = number of particles (atoms)'
-    print '    Rg = radius of gyration'
-    print '    D  = Sphericity (0 <= D <= 1)'
-    print '          D = 0 --> perfect sphere'
-    print '          D > 0 --> anisotropic'
-    print '    S  = Spheroidal shape (-1/4 <= S <= 2)'
-    print '          S < 0 --> oblate'
-    print '          S > 0 --> prolate'
+    print('Usage: SCRIPT [PDB]')
+    print('')
+    print('Returns: %5i %6.3f %6.3f %6.3f % (N, Rg, D, S)')
+    print('    N  = number of particles (atoms)')
+    print('    Rg = radius of gyration')
+    print('    D  = Sphericity (0 <= D <= 1)')
+    print('          D = 0 --> perfect sphere')
+    print('          D > 0 --> anisotropic')
+    print('    S  = Spheroidal shape (-1/4 <= S <= 2)')
+    print('          S < 0 --> oblate')
+    print('          S > 0 --> prolate')
     sys.exit(2)
 
 
@@ -95,4 +95,4 @@
     data = dcd.read_onestep()
     Rg, D, S = calc_shape(data)
 
-    print ('%6.3f %6.3f %6.3f' % (Rg, D, S))
+    print(('%6.3f %6.3f %6.3f' % (Rg, D, S)))
--- ./dcd_traj_so.py	(original)
+++ ./dcd_traj_so.py	(refactored)
@@ -32,7 +32,7 @@
 nmp = dcd.get_header().nmp_real
 
 if (nmp-1)*(nmp-2)/2 != ncon:
-    print 'Warning: (nmp-1)*(nmp-2)/2 != ncon,  ncon=%i, nmp=%i' % (ncon,nmp)
+    print('Warning: (nmp-1)*(nmp-2)/2 != ncon,  ncon=%i, nmp=%i' % (ncon,nmp))
     #sys.exit(2)
 
 f_out = open(sys.argv[-1],'w')
--- ./ddrid_ref.py	(original)
+++ ./ddrid_ref.py	(refactored)
@@ -12,7 +12,7 @@
 from cafysis.lib_f2py import py_ddrid
 
 if len(sys.argv) != 4:
-    print 'Usage: % SCRIPT [input drid] [reference drid] [output dDRID]'
+    print('Usage: % SCRIPT [input drid] [reference drid] [output dDRID]')
     sys.exit(2)
 
 drid = DridFile(sys.argv[1])
@@ -24,7 +24,7 @@
 drid_ref.read_header()
 
 if not np.array_equal(drid.get_header().mask, drid_ref.get_header().mask):
-    print 'Two masks are not identical'
+    print('Two masks are not identical')
     sys.exit(2)
 
 x_ref = drid_ref.read_onestep()
--- ./distance2contactlist.py	(original)
+++ ./distance2contactlist.py	(refactored)
@@ -5,7 +5,7 @@
 import sys
 
 if len(sys.argv) != 5:
-    print 'SCRIPT [CG pdb] [pairdist.dat] [Rc] [output prefix]'
+    print('SCRIPT [CG pdb] [pairdist.dat] [Rc] [output prefix]')
     sys.exit(2)
 
 d_cut = float(sys.argv[3])
@@ -21,7 +21,7 @@
     xyz_com.append((x,y,z))
 
 num_nt = len(xyz_com)
-print "num_nt: ",num_nt
+print("num_nt: ",num_nt)
 
 dat = np.zeros((num_nt+1, num_nt+1))
 
--- ./drid_frame_count.py	(original)
+++ ./drid_frame_count.py	(refactored)
@@ -31,4 +31,4 @@
         print ('Usage: SCRIPT [drid file]')
         sys.exit(2)
 
-    print ('# frames = ', count(sys.argv[1]))
+    print(('# frames = ', count(sys.argv[1])))
--- ./drid_generate_mask_rna.py	(original)
+++ ./drid_generate_mask_rna.py	(refactored)
@@ -9,7 +9,7 @@
 import numpy as np
 
 if len(sys.argv) != 3:
-    print 'Usage: SCRIPT [# mp] [output]'
+    print('Usage: SCRIPT [# mp] [output]')
     sys.exit(2)
 
 nmp = int(sys.argv[1])
@@ -42,7 +42,7 @@
         mark( imp + 1 )
 
     else:
-        print 'it should not occur....'
+        print('it should not occur....')
         sys.exit(2)
 
 for imp in range(1, nmp+1):
--- ./drid_pairwise.py	(original)
+++ ./drid_pairwise.py	(refactored)
@@ -6,7 +6,7 @@
 import math
 
 if len(sys.argv) != 3:
-    print 'Usage: % SCRIPT [input DRID] [output pairwise]'
+    print('Usage: % SCRIPT [input DRID] [output pairwise]')
     sys.exit(2)
 
 f_out = open(sys.argv[-1],'w')
--- ./edc_apply_to_ninfo_with_aln.py	(original)
+++ ./edc_apply_to_ninfo_with_aln.py	(refactored)
@@ -48,7 +48,7 @@
     #     Jenner             Dunkle
     imp_Jenner = int(linesp[1])
     imp_Dunkle = int(linesp[3])
-    if aln.has_key(imp_Jenner) :
+    if imp_Jenner in aln :
         aln[imp_Jenner] = aln[imp_Jenner] + (imp_Dunkle,)
     else :
         aln[imp_Jenner] = (imp_Dunkle,)
@@ -64,18 +64,18 @@
     linesp = line.split()
     imp1_orig = int(linesp[3])
     imp2_orig = int(linesp[9])
-    if aln.has_key(imp1_orig):
+    if imp1_orig in aln:
         imp1_tp = aln[imp1_orig]
     else :
         continue
-    if aln.has_key(imp2_orig):
+    if imp2_orig in aln:
         imp2_tp = aln[imp2_orig]
     else :
         continue
     for imp1 in imp1_tp :
         for imp2 in imp2_tp :
             if (imp1, imp2) in energys :
-                print ('Error: (imp1,imp2) in energys = True',imp1_orig,imp2_orig,imp1,imp2)
+                print(('Error: (imp1,imp2) in energys = True',imp1_orig,imp2_orig,imp1,imp2))
             energys[(imp1,imp2)] = float(linesp[15])
 f_edc.close()
     
--- ./edc_apply_to_ninfo_with_aln_onebyone.py	(original)
+++ ./edc_apply_to_ninfo_with_aln_onebyone.py	(refactored)
@@ -48,7 +48,7 @@
     #     Jenner             Dunkle
     imp_Jenner = int(linesp[1])
     imp_Dunkle = int(linesp[3])
-    if aln.has_key(imp_Jenner) :
+    if imp_Jenner in aln :
         aln[imp_Jenner] = aln[imp_Jenner] + (imp_Dunkle,)
     else :
         aln[imp_Jenner] = (imp_Dunkle,)
@@ -64,18 +64,18 @@
     linesp = line.split()
     imp1_orig = int(linesp[3])
     imp2_orig = int(linesp[9])
-    if aln.has_key(imp1_orig):
+    if imp1_orig in aln:
         imp1_tp = aln[imp1_orig]
     else :
         continue
-    if aln.has_key(imp2_orig):
+    if imp2_orig in aln:
         imp2_tp = aln[imp2_orig]
     else :
         continue
     for imp1 in imp1_tp :
         for imp2 in imp2_tp :
             if (imp1, imp2) in energys :
-                print ('Error: (imp1,imp2) in energys = True',imp1_orig,imp2_orig,imp1,imp2)
+                print(('Error: (imp1,imp2) in energys = True',imp1_orig,imp2_orig,imp1,imp2))
             energys[(imp1,imp2)] = float(linesp[15])
 f_edc.close()
     
--- ./edc_factor_to_coef.py	(original)
+++ ./edc_factor_to_coef.py	(refactored)
@@ -8,7 +8,7 @@
 from cafysis.elements.ninfo import NinfoSet
 
 if len(sys.argv) < 4 :
-    print "Usage: SCRIPT [input ninfo] [factor] [unit ID ...] [output ninfo]"
+    print("Usage: SCRIPT [input ninfo] [factor] [unit ID ...] [output ninfo]")
     sys.exit(2)
     
 f_ninfo_in = NinfoFile(sys.argv[1])
--- ./edc_factor_to_coef_onebyone.py	(original)
+++ ./edc_factor_to_coef_onebyone.py	(refactored)
@@ -5,7 +5,7 @@
 from cafysis.elements.ninfo import NinfoSet
 
 if len(sys.argv) < 3 :
-    print "Usage: SCRIPT [input ninfo] [factor] [output ninfo]"
+    print("Usage: SCRIPT [input ninfo] [factor] [output ninfo]")
     sys.exit(2)
     
 f_ninfo_in = NinfoFile(sys.argv[1])
--- ./edc_post.py	(original)
+++ ./edc_post.py	(refactored)
@@ -1,8 +1,8 @@
 #!/usr/bin/env python
 
 import sys
-from file_io.ninfo import NinfoFile
-from elements.ninfo import NinfoSet
+from .file_io.ninfo import NinfoFile
+from .elements.ninfo import NinfoSet
 
 if len(sys.argv) < 7 or len(sys.argv)%1 != 0 :
     print ('Usage: SCRIPT [edc residue file] [ninfo file] [edc Amber mdout file] [(ID begin, ID end)...] [out file]')
@@ -38,7 +38,7 @@
         self.mp_name = ''
         self.ires_amber = 0
     def show(self):
-        print self.ichain, self.ires, self.imp, self.imp, self.ires_l, self.imp_l, self.res_name, self.mp_name, self.ires_amber
+        print(self.ichain, self.ires, self.imp, self.imp, self.ires_l, self.imp_l, self.res_name, self.mp_name, self.ires_amber)
         
 cafemp2mpinfo = {}
 for line in f_residue :
@@ -146,7 +146,7 @@
                                  mpinfo2.ichain, mpinfo2.ires, mpinfo2.res_name, imp2, mpinfo2.mp_name,
                                  ires_amber1, ires_amber2, energy) )
 
-for unitpair in edcinfo.keys() :
+for unitpair in list(edcinfo.keys()) :
     f_out.write('#unit %i %i\n' % unitpair)
     f_out.write('#c1   res1 res1    mp1 mp1 |  c2   res2 res2    mp2 mp2 | amber1 amber2 | energy\n')
     for info in edcinfo[unitpair] :
--- ./edc_post_add_unitimp.py	(original)
+++ ./edc_post_add_unitimp.py	(refactored)
@@ -9,8 +9,8 @@
 
 if __name__ == '__main__':
     if len(sys.argv) != 4:
-        print 'Usage: SCRIPT [edc_pre.3i8h.out] [../post_edc_3i8h/edc_post.out] [post_edc.out]'
-        print 'assuming at ~/ribo/ribo_015/forDunkleJenner/'
+        print('Usage: SCRIPT [edc_pre.3i8h.out] [../post_edc_3i8h/edc_post.out] [post_edc.out]')
+        print('assuming at ~/ribo/ribo_015/forDunkleJenner/')
         sys.exit(2)
         
 f_out = open(sys.argv[-1],'w')
--- ./edc_post_aln.py	(original)
+++ ./edc_post_aln.py	(refactored)
@@ -11,8 +11,8 @@
 
 if __name__ == '__main__':
     if len(sys.argv) != 10:
-        print 'Usage: SCRIPT [ninfo (one-by-one)] [unit] [dist] [side] [unit] [dist] [side] [edc (post_edc.out)] [out]'
-        print ''
+        print('Usage: SCRIPT [ninfo (one-by-one)] [unit] [dist] [side] [unit] [dist] [side] [edc (post_edc.out)] [out]')
+        print('')
         sys.exit(2)
         
     fninfo_in = NinfoFile(sys.argv[1])
@@ -40,7 +40,7 @@
         elif side == 2:
             aln1[mp2] = mp1
         else:
-            print '"side" is not acceptable. See usage'
+            print('"side" is not acceptable. See usage')
             sys.exit(2)
     
     unit_aln2 = int(sys.argv[5])
@@ -64,7 +64,7 @@
             #aln[mp2 - delta2] = mp1 - delta1
             aln2[mp2] = mp1
         else:
-            print '"side" is not acceptable. See usage'
+            print('"side" is not acceptable. See usage')
             sys.exit(2)
             
     class pairinfo:
@@ -127,11 +127,11 @@
             aln_mp1_u = aln2[con.imp1un]
             aln_mp2_u = aln1[con.imp2un]
         else:
-            print 'Error:'
-            print 'unit_aln1:',unit_aln1
-            print 'unit_aln2:',unit_aln2
-            print 'con.iunit1:',iunit1
-            print 'con.iunit2:',iunit2
+            print('Error:')
+            print('unit_aln1:',unit_aln1)
+            print('unit_aln2:',unit_aln2)
+            print('con.iunit1:',iunit1)
+            print('con.iunit2:',iunit2)
             sys.exit(2)
             
         if (aln_mp1_u,aln_mp2_u) in pairlist:
@@ -140,8 +140,8 @@
             energy = pairlist[(aln_mp2_u,aln_mp1_u)].energy
         else:
             energy = 0.0
-            print 'caution: pair is not found.'
-            print 'icon=',con.id
+            print('caution: pair is not found.')
+            print('icon=',con.id)
         
         if energy < 0.0:
             con.factor = -1.0 * energy
--- ./edc_pre.py	(original)
+++ ./edc_pre.py	(refactored)
@@ -2,14 +2,14 @@
 # -*- coding: utf-8 -*-
 # 2011/05/29 coded by Naoto HORI
 
-from file_io.pdb import PdbFile
-from file_io.ninfo import NinfoFile
-from elements.ninfo import NinfoSet
+from .file_io.pdb import PdbFile
+from .file_io.ninfo import NinfoFile
+from .elements.ninfo import NinfoSet
 import sys
 
 if len(sys.argv) < 9 or len(sys.argv)%2 != 1 :
-    print ('Usage: SCRIPT [input PDB] [cafe_to_amber file] [ninfo file] '+
-           '[(imp begin, imp end) ...] [log file] [Amber file] [residue file]')
+    print(('Usage: SCRIPT [input PDB] [cafe_to_amber file] [ninfo file] '+
+           '[(imp begin, imp end) ...] [log file] [Amber file] [residue file]'))
     sys.exit(2)
     
 # Output file
@@ -71,12 +71,12 @@
 
 # check
 f_out.write('#check\n')
-for i in xrange(len(cafe_res)) :
+for i in range(len(cafe_res)) :
     n_amber = aa_res[i+1][1] - aa_res[i+1][0] + 1
     n_cafe = cafe_res[i+1][1]- cafe_res[i+1][0] + 1
     if n_cafe != n_amber :
-        print 'Inconsistent!!'
-        print i+1, 'amber=', n_amber, 'cafe=', n_cafe
+        print('Inconsistent!!')
+        print(i+1, 'amber=', n_amber, 'cafe=', n_cafe)
     f_out.write('%3i , amber= %6i-%6i , cafe= %6i-%6i\n' % (i+1, aa_res[i+1][0], aa_res[i+1][1],
                                         cafe_res[i+1][0], cafe_res[i+1][1]) )
 f_out.write('\n\n')
@@ -99,7 +99,7 @@
 # Generate ligand set : imp(cafe)
 ligand_set = set()
 for pair in id_pairs :
-    for imp in xrange(pair[0], pair[1]+1) :
+    for imp in range(pair[0], pair[1]+1) :
         ligand_set.add(imp)
 f_out.write('#Ligands imp(cafe)\n')
 for i in ligand_set :
@@ -198,7 +198,7 @@
     
 ### Residue file output
 f_residue.write('#ichain ires  imp ires_l  imp_l  res  mp   ires_aa\n')
-for imp in xrange(1, len(cafe_mp_info)+1) :
+for imp in range(1, len(cafe_mp_info)+1) :
     mp_info = cafe_mp_info[imp]
     ichain  = cafe_mp_info[imp][0]
     ires    = cafe_mp_info[imp][1]
--- ./gnu_data.py	(original)
+++ ./gnu_data.py	(refactored)
@@ -11,18 +11,18 @@
     Hplt = zeros((n+1,m+1))
     
     Hplt[0,0] = H[0,0]
-    for i in xrange(1, n):
+    for i in range(1, n):
         Hplt[i,0] = (H[i-1,0]+H[i,0]) * 0.5
     Hplt[n,0] = H[n-1,0]
     
-    for j in xrange(1,m):
+    for j in range(1,m):
         Hplt[0,j] = (H[0,j-1]+H[0,j]) * 0.5
-        for i in xrange(1,n):
+        for i in range(1,n):
             Hplt[i,j] = (H[i-1,j-1]+H[i-1,j]+H[i,j-1]+H[i,j]) * 0.25
         Hplt[n,j] = (H[n-1,j-1]+H[n-1,j]) * 0.5
     
     Hplt[0,m] = H[0,m-1]
-    for i in xrange(1,n):
+    for i in range(1,n):
         Hplt[i,m] = (H[i-1,m-1]+H[i,m-1]) * 0.5
     Hplt[n,m] = H[n-1,m-1]
                 
--- ./hb2nd_collect_bwyv.py	(original)
+++ ./hb2nd_collect_bwyv.py	(refactored)
@@ -18,8 +18,8 @@
     step_ignore = int(sys.argv[2])
     flg_final = False
 else:
-    print 'Usage: SCRIPT [output file] [step_ignore]'
-    print ' or  : SCRIPT [output file] [step_ignore] [step_final]'
+    print('Usage: SCRIPT [output file] [step_ignore]')
+    print(' or  : SCRIPT [output file] [step_ignore] [step_final]')
     sys.exit(2)
 
 f_out = open(sys.argv[1], 'w')
@@ -88,7 +88,7 @@
         elif (not S1) and (not S2) and (not L1) and (not L2):
             count['U'] = count['U'] + 1
         else:
-            print 'Error hendesuyo'
+            print('Error hendesuyo')
 
         num = num + 1
         if flg_final and step == step_final:
--- ./hb2nd_collect_bwyv_simple.py	(original)
+++ ./hb2nd_collect_bwyv_simple.py	(refactored)
@@ -17,8 +17,8 @@
     step_ignore = int(sys.argv[3])
     flg_final = False
 else:
-    print 'Usage: SCRIPT [filename hb2nd] [output file] [step_ignore]'
-    print ' or  : SCRIPT [filename hb2nd] [output file] [step_ignore] [step_final]'
+    print('Usage: SCRIPT [filename hb2nd] [output file] [step_ignore]')
+    print(' or  : SCRIPT [filename hb2nd] [output file] [step_ignore] [step_final]')
     sys.exit(2)
 
 filename_hb2nd = sys.argv[1]
--- ./hb2nd_summary_bwyv.py	(original)
+++ ./hb2nd_summary_bwyv.py	(refactored)
@@ -15,7 +15,7 @@
 
 import sys
 if len(sys.argv) != 3:
-    print 'Usage: SCRIPT [input file (hb2nd.out)] [output dir (hb2nd/)]'
+    print('Usage: SCRIPT [input file (hb2nd.out)] [output dir (hb2nd/)]')
     sys.exit(2)
 
 filepath_inp = sys.argv[1]
@@ -34,7 +34,7 @@
     sim = (cM, frc)
     sim_done.add(sim)
 
-    if n_ratio.has_key(sim):
+    if sim in n_ratio:
         n_ratio[sim] = n_ratio[sim] + 1
         for i in range(8):  
             x = float(l[i+3])
--- ./hb2nd_summary_bwyv_simple.py	(original)
+++ ./hb2nd_summary_bwyv_simple.py	(refactored)
@@ -15,7 +15,7 @@
 
 import sys
 if len(sys.argv) != 3:
-    print 'Usage: SCRIPT [input file (hb2nd.out)] [output dir (hb2nd/)]'
+    print('Usage: SCRIPT [input file (hb2nd.out)] [output dir (hb2nd/)]')
     sys.exit(2)
 
 filepath_inp = sys.argv[1]
@@ -34,7 +34,7 @@
     sim = (cM, frc)
     sim_done.add(sim)
 
-    if n_ratio.has_key(sim):
+    if sim in n_ratio:
         n_ratio[sim] = n_ratio[sim] + 1
         for i in range(5):  
             x = float(l[i+3])
--- ./hb_concatenate.py	(original)
+++ ./hb_concatenate.py	(refactored)
@@ -48,7 +48,7 @@
 if __name__ == '__main__':
         
     if len(sys.argv) != 5:
-        print 'Usage: % SCRIPT [input root dir] [name (file prefix)] [output dir] [last run number]'
+        print('Usage: % SCRIPT [input root dir] [name (file prefix)] [output dir] [last run number]')
         sys.exit(2)
 
     dir_in = sys.argv[1]
@@ -57,7 +57,7 @@
     nrun = int(sys.argv[4])
 
     if nrun < 3:
-        print 'Usage: Error nrun < 3'
+        print('Usage: Error nrun < 3')
         sys.exit(2)
 
     hb_concatenate(dir_in, name, dir_out, nrun)
--- ./hb_prob_summary_bwyv.py	(original)
+++ ./hb_prob_summary_bwyv.py	(refactored)
@@ -33,7 +33,7 @@
 
     sim_done.add(sim)
 
-    if n_ratio.has_key(key):
+    if key in n_ratio:
         n_ratio[key] = n_ratio[key] + 1
         sum_ratio[key] = sum_ratio[key] + ratio
         sum2_ratio[key] = sum2_ratio[key] + ratio * ratio
--- ./hbcontact_collect.py	(original)
+++ ./hbcontact_collect.py	(refactored)
@@ -17,8 +17,8 @@
     step_ignore = int(sys.argv[2])
     flg_final = False
 else:
-    print 'Usage: SCRIPT [output file] [step_ignore]'
-    print ' or  : SCRIPT [output file] [step_ignore] [step_final]'
+    print('Usage: SCRIPT [output file] [step_ignore]')
+    print(' or  : SCRIPT [output file] [step_ignore] [step_final]')
     sys.exit(2)
 
 f_out = open(sys.argv[1], 'w')
--- ./hbprob_summary_bwyv.py	(original)
+++ ./hbprob_summary_bwyv.py	(refactored)
@@ -35,7 +35,7 @@
 
     sim_done.add(sim)
 
-    if n_ratio.has_key(key):
+    if key in n_ratio:
         n_ratio[key] = n_ratio[key] + 1
         sum_ratio[key] = sum_ratio[key] + ratio
     else:
@@ -72,7 +72,7 @@
     ratio = float(l[4])
 
     key = ((cM,frc), ihb)
-    if sum2_ratio.has_key(key):
+    if key in sum2_ratio:
         sum2_ratio[key] = sum2_ratio[key] + (ratio - avg_ratio[key]) ** 2
     else:
         sum2_ratio[key] = (ratio - avg_ratio[key]) ** 2
--- ./make_replica_rst.py	(original)
+++ ./make_replica_rst.py	(refactored)
@@ -68,7 +68,7 @@
         data = dcd.read_onestep()
 
     if len(data) != nmp:
-        print ('Error len(data) != nmp in replica %i. len(data)=%i' % (irep,len(data)))
+        print(('Error len(data) != nmp in replica %i. len(data)=%i' % (irep,len(data))))
         sys.exit(2)
 
     f_rst.write('nmp_all: %i\n' % (nmp,))
--- ./mapk_Rg_hist.py	(original)
+++ ./mapk_Rg_hist.py	(refactored)
@@ -7,7 +7,7 @@
 from numpy import histogram
 
 if len(sys.argv) != 3:
-    print 'Usage: SCRIPT [input data] [output prefix]'
+    print('Usage: SCRIPT [input data] [output prefix]')
     sys.exit(2)
     
 file_in = open(sys.argv[1],'r')
@@ -15,7 +15,7 @@
 
 COL_DIST = 1 - 1
 
-dist_bins = [x*2.0 for x in xrange(0,81)]
+dist_bins = [x*2.0 for x in range(0,81)]
 
 dist = []
 
--- ./mapk_angle_hist.py	(original)
+++ ./mapk_angle_hist.py	(refactored)
@@ -8,7 +8,7 @@
 from numpy import histogram
 
 if len(sys.argv) != 3:
-    print 'Usage: SCRIPT [input data] [output prefix]'
+    print('Usage: SCRIPT [input data] [output prefix]')
     sys.exit(2)
     
 file_in = open(sys.argv[1],'r')
@@ -17,7 +17,7 @@
 COL_THETA = 2 - 1
 
 #theta_bins = [x*10.0 for x in xrange(0,19)] # 10度
-theta_bins = [x*5.0 for x in xrange(0,37)] #  5度
+theta_bins = [x*5.0 for x in range(0,37)] #  5度
 #phi_bins = [x*15.0 for x in xrange(-12,13)] # 15度
 
 
--- ./mapk_angle_hist_by_position.py	(original)
+++ ./mapk_angle_hist_by_position.py	(refactored)
@@ -8,8 +8,8 @@
 from numpy import histogram
 
 if len(sys.argv) != 8:
-    print 'Usage: SCRIPT [angle data] [polar data] [theta from] [theta to] [phi from] [phi to] [output prefix]'
-    print ' (theta and phi is in the unit of degree)'
+    print('Usage: SCRIPT [angle data] [polar data] [theta from] [theta to] [phi from] [phi to] [output prefix]')
+    print(' (theta and phi is in the unit of degree)')
     sys.exit(2)
     
 file_in = open(sys.argv[1],'r')
@@ -32,7 +32,7 @@
 COL_POL_PHI = 5 - 1
 
 #theta_bins = [x*5.0 for x in xrange(0,37)] #  5度
-theta_bins = [x*10.0 for x in xrange(0,19)] # 10度
+theta_bins = [x*10.0 for x in range(0,19)] # 10度
 #theta_bins = [x*15.0 for x in xrange(0,13)] #  15度
 
 
@@ -69,8 +69,8 @@
     weight.append(1.0/math.sin(math.radians(t)))
 
 if num_ang != num_pol:
-    print 'Error: angle data and polar coordinate data are inconsistent!'
-    print 'ABORT'
+    print('Error: angle data and polar coordinate data are inconsistent!')
+    print('ABORT')
     sys.exit(2)
         
         
--- ./mapk_polar_hist.py	(original)
+++ ./mapk_polar_hist.py	(refactored)
@@ -29,10 +29,10 @@
 import sys
 import math
 from numpy import histogram, histogram2d
-from gnu_data import convert_array_for3D
+from .gnu_data import convert_array_for3D
 
 if len(sys.argv) != 3:
-    print 'Usage: SCRIPT [input data] [output prefix]'
+    print('Usage: SCRIPT [input data] [output prefix]')
     sys.exit(2)
     
 file_in = open(sys.argv[1],'r')
@@ -42,30 +42,30 @@
 COL_THETA = 4 - 1
 COL_PHI = 5 - 1
 
-phi_bins = [x*10.0 for x in xrange(-18,19)] # 10度
+phi_bins = [x*10.0 for x in range(-18,19)] # 10度
 #phi_bins = [x*15.0 for x in xrange(-12,13)] # 15度
 
 DIV_Z = 17  # nの値。-180から180は 2n = 2 x DIV_Z に分割される。
 theta_bins = []
 theta_bins.append(0.0)          # i=0
-for i in xrange(1,DIV_Z):       # i=1,2,3,....,(n-1)
+for i in range(1,DIV_Z):       # i=1,2,3,....,(n-1)
     theta_bins.append(math.degrees(math.acos(1.0-i/float(DIV_Z))))
 theta_bins.append(90.0)         # i=n
-for i in xrange(1,DIV_Z):       # i=(n+1),(n+2),....,(2n-1)
+for i in range(1,DIV_Z):       # i=(n+1),(n+2),....,(2n-1)
     j = DIV_Z - i
     theta_bins.append(180.0-theta_bins[j])
 theta_bins.append(180.0)        # i=2n
 
 #dist_bins = [x*5.0 for x in xrange(0,61)]
-dist_bins = [x*10.0 for x in xrange(0,31)]
+dist_bins = [x*10.0 for x in range(0,31)]
 
 phi = []
 theta = [] 
-for i in xrange(4):
+for i in range(4):
     phi.append([])
     theta.append([])
 dist = []
-for i in xrange(11):
+for i in range(11):
     dist.append([])
 
 
@@ -160,8 +160,8 @@
     #Hd_plt = convert_array_for3D(Hd)
     hsum = H.sum()
     
-    for i in xrange(len(H_plt)):
-        for j in xrange(len(H_plt[i])):
+    for i in range(len(H_plt)):
+        for j in range(len(H_plt[i])):
             file_gnu.write('%8.3f %8.3f %15.10e %10.3f\n' % (phi_edge[j],theta_edge[i],H_plt[i,j]/float(hsum),H_plt[i,j]))
         file_gnu.write("\n")
     file_gnu.write("\n\n")
--- ./mapk_polar_hist_ppr.py	(original)
+++ ./mapk_polar_hist_ppr.py	(refactored)
@@ -29,10 +29,10 @@
 import sys
 import math
 from numpy import histogram, histogram2d
-from gnu_data import convert_array_for3D
+from .gnu_data import convert_array_for3D
 
 if len(sys.argv) != 3:
-    print 'Usage: SCRIPT [input data] [output prefix]'
+    print('Usage: SCRIPT [input data] [output prefix]')
     sys.exit(2)
     
 file_in = open(sys.argv[1],'r')
@@ -42,22 +42,22 @@
 COL_THETA = 4 - 1
 COL_PHI = 5 - 1
 
-phi_bins = [x*10.0 for x in xrange(-18,19)] # 10度
+phi_bins = [x*10.0 for x in range(-18,19)] # 10度
 #phi_bins = [x*15.0 for x in xrange(-12,13)] # 15度
 
 DIV_Z = 17  # nの値。-180から180は 2n = 2 x DIV_Z に分割される。
 theta_bins = []
 theta_bins.append(0.0)          # i=0
-for i in xrange(1,DIV_Z):       # i=1,2,3,....,(n-1)
+for i in range(1,DIV_Z):       # i=1,2,3,....,(n-1)
     theta_bins.append(math.degrees(math.acos(1.0-i/float(DIV_Z))))
 theta_bins.append(90.0)         # i=n
-for i in xrange(1,DIV_Z):       # i=(n+1),(n+2),....,(2n-1)
+for i in range(1,DIV_Z):       # i=(n+1),(n+2),....,(2n-1)
     j = DIV_Z - i
     theta_bins.append(180.0-theta_bins[j])
 theta_bins.append(180.0)        # i=2n
 
 #dist_bins = [x*5.0 for x in xrange(0,61)]
-dist_bins = [x*10.0 for x in xrange(0,31)]
+dist_bins = [x*10.0 for x in range(0,31)]
 
 phi = []
 theta = [] 
@@ -147,8 +147,8 @@
     #Hd_plt = convert_array_for3D(Hd)
 hsum = H.sum()
     
-for i in xrange(len(H_plt)):
-    for j in xrange(len(H_plt[i])):
+for i in range(len(H_plt)):
+    for j in range(len(H_plt[i])):
         file_gnu.write('%8.3f %8.3f %15.10e %10.3f\n' % (phi_edge[j],theta_edge[i],H_plt[i,j]/float(hsum),H_plt[i,j]))
     file_gnu.write("\n")
 file_gnu.write("\n\n")
--- ./mapk_polar_hist_ppr_FE.py	(original)
+++ ./mapk_polar_hist_ppr_FE.py	(refactored)
@@ -29,10 +29,10 @@
 import sys
 import math
 from numpy import histogram, histogram2d, zeros
-from gnu_data import convert_array_for3D
+from .gnu_data import convert_array_for3D
 
 if len(sys.argv) != 3:
-    print 'Usage: SCRIPT [input data] [output prefix]'
+    print('Usage: SCRIPT [input data] [output prefix]')
     sys.exit(2)
     
 file_in = open(sys.argv[1],'r')
@@ -42,22 +42,22 @@
 COL_THETA = 4 - 1
 COL_PHI = 5 - 1
 
-phi_bins = [x*10.0 for x in xrange(-18,19)] # 10度
+phi_bins = [x*10.0 for x in range(-18,19)] # 10度
 #phi_bins = [x*15.0 for x in xrange(-12,13)] # 15度
 
 DIV_Z = 17  # nの値。-180から180は 2n = 2 x DIV_Z に分割される。
 theta_bins = []
 theta_bins.append(0.0)          # i=0
-for i in xrange(1,DIV_Z):       # i=1,2,3,....,(n-1)
+for i in range(1,DIV_Z):       # i=1,2,3,....,(n-1)
     theta_bins.append(math.degrees(math.acos(1.0-i/float(DIV_Z))))
 theta_bins.append(90.0)         # i=n
-for i in xrange(1,DIV_Z):       # i=(n+1),(n+2),....,(2n-1)
+for i in range(1,DIV_Z):       # i=(n+1),(n+2),....,(2n-1)
     j = DIV_Z - i
     theta_bins.append(180.0-theta_bins[j])
 theta_bins.append(180.0)        # i=2n
 
 #dist_bins = [x*5.0 for x in xrange(0,61)]
-dist_bins = [x*10.0 for x in xrange(0,31)]
+dist_bins = [x*10.0 for x in range(0,31)]
 
 phi = []
 theta = [] 
@@ -144,8 +144,8 @@
     # normed=Trueにすると変になる。（範囲の広さに応じてnormalizeしてる?)
     
     
-for i in xrange(len(H)):
-    for j in xrange(len(H[i])):
+for i in range(len(H)):
+    for j in range(len(H[i])):
         if H[i,j] == 0:
             H[i,j] = 1
 Prob = zeros((len(H),len(H[0])))
@@ -153,8 +153,8 @@
 FE = zeros((len(H),len(H[0])))
 hsum = H.sum()
 
-for i in xrange(len(H)):
-    for j in xrange(len(H[i])):
+for i in range(len(H)):
+    for j in range(len(H[i])):
         Prob[i,j] = H[i,j] / hsum
         FE[i,j] = -math.log(Prob[i,j])
         
@@ -176,17 +176,17 @@
 FE_plt = convert_array_for3D(FE)
 
 fe_max = -99999.9
-for i in xrange(len(FE_plt)):
-    for j in xrange(len(FE_plt[i])):
+for i in range(len(FE_plt)):
+    for j in range(len(FE_plt[i])):
         if FE_plt[i,j] > fe_max:
             fe_max = FE_plt[i,j]
             
-for i in xrange(len(FE_plt)):
-    for j in xrange(len(FE_plt[i])):
+for i in range(len(FE_plt)):
+    for j in range(len(FE_plt[i])):
         FE_plt[i,j] = FE_plt[i,j] - fe_max
 
-for i in xrange(len(FE_plt)):
-    for j in xrange(len(FE_plt[i])):
+for i in range(len(FE_plt)):
+    for j in range(len(FE_plt[i])):
         file_gnu.write('%8.3f %8.3f %10.5e %10.5e\n' % 
                        (phi_edge[j],theta_edge[i],FE_plt[i,j],FE_raw[i,j]))
     file_gnu.write("\n")
--- ./matrix_make.py	(original)
+++ ./matrix_make.py	(refactored)
@@ -4,7 +4,7 @@
 import sys
 
 if len(sys.argv) != 4:
-    print 'Usage: % SCRIPT [PDB filename] [matrix filename] [out PDB filename]'
+    print('Usage: % SCRIPT [PDB filename] [matrix filename] [out PDB filename]')
     sys.exit(2)
     
 filename_pdb = sys.argv[1]
@@ -25,11 +25,11 @@
 file_mat = file(filename_mat,'r')
 mat_lines = file_mat.readlines()
 if mat_lines[0][0:7] != '#matrix' :
-    print 'Error: format of matrix file'
+    print('Error: format of matrix file')
     sys.exit()
     
 transform = zeros((4,4),dtype=float64)
-for i in xrange(4) :
+for i in range(4) :
     transform[i] = mat_lines[i+1].strip().split()
     
 file_mat.close()
--- ./matrix_transform_make.py	(original)
+++ ./matrix_transform_make.py	(refactored)
@@ -39,11 +39,11 @@
          
 if __name__ == "__main__" :
     if len(sys.argv) != 8:
-        print ''
-        print 'This script makes a homogeneous transformation matrix,'
-        print 'angles of which is defined by Z-X-Z Euler angles.'
-        print ''
-        print 'Usage: % SCRIPT [alpha] [beta] [gamma] [x] [y] [z] [output]'
+        print('')
+        print('This script makes a homogeneous transformation matrix,')
+        print('angles of which is defined by Z-X-Z Euler angles.')
+        print('')
+        print('Usage: % SCRIPT [alpha] [beta] [gamma] [x] [y] [z] [output]')
         sys.exit(2)
 
     a = float(sys.argv[1])
--- ./mtx_coord_transform.py	(original)
+++ ./mtx_coord_transform.py	(refactored)
@@ -18,7 +18,7 @@
         
     def show(self):
         for i in range(4):
-            print tuple(self.mtx[i])
+            print(tuple(self.mtx[i]))
             
     def do_to_array(self, d):
         '''配列d[x,y,z]を受け取って、mtxを施して返す。
@@ -129,14 +129,14 @@
     import sys
     
     if not len(sys.argv) in (7,8):
-        print ''
-        print 'This script makes a homogeneous transformation matrix,'
-        print 'angles of which is defined by Z-X-Z Euler angles.'
-        print ''
-        print 'Usage: % SCRIPT [alpha] [beta] [gamma] [x] [y] [z] [[output]]'
-        print ''
-        print 'When "output" is specified, the matrix will be written in the file.'
-        print 'Otherwise STDOUT is used to display.'
+        print('')
+        print('This script makes a homogeneous transformation matrix,')
+        print('angles of which is defined by Z-X-Z Euler angles.')
+        print('')
+        print('Usage: % SCRIPT [alpha] [beta] [gamma] [x] [y] [z] [[output]]')
+        print('')
+        print('When "output" is specified, the matrix will be written in the file.')
+        print('Otherwise STDOUT is used to display.')
         sys.exit(2)
 
     a = float(sys.argv[1])
--- ./ninfo_RNA13_pdb.py	(original)
+++ ./ninfo_RNA13_pdb.py	(refactored)
@@ -10,7 +10,7 @@
 from cafysis.elements.ninfo import NinfoSet, BondLength, BondAngle, BaseStackDT, HBondDT
 
 if len(sys.argv) != 4:
-    print 'Usage: SCRIPT [cg pdb] [hb list file] [output ninfo]'
+    print('Usage: SCRIPT [cg pdb] [hb list file] [output ninfo]')
     sys.exit(2)
 
 f_in = PdbFile(sys.argv[1])
@@ -23,19 +23,19 @@
 #n_mp = 3 * n_nt - 1
 
 if len(chains) > 1:
-    print 'Error: currently more than one chain can not be processed.'
+    print('Error: currently more than one chain can not be processed.')
     sys.exit(2)
 
 chain = chains[0]
 n_nt = chain.num_res()
-print '#nt: ', n_nt
+print('#nt: ', n_nt)
 
 seq = []
 for r in chain.residues:
     # "RA " ---> "A"
     seq.append(r.atoms[0].res_name.strip()[1])
-print 'Sequence:'
-print seq
+print('Sequence:')
+print(seq)
 
 ns = NinfoSet()
 
@@ -256,12 +256,12 @@
     ## Check
     if lsp[0] == 'CAN':
         if lsp[2] != 'B' or lsp[4] != 'B':
-            print 'Error: Canonical base pair should be by B and B'
+            print('Error: Canonical base pair should be by B and B')
             sys.exit(2)
     elif lsp[0] == 'NON':
         pass
     else:
-        print 'Error: unknown H-bond type'
+        print('Error: unknown H-bond type')
         sys.exit(2)
 
     hblist.append((lsp[0],int(lsp[1]),lsp[2],int(lsp[3]),lsp[4],int(lsp[5])))
@@ -300,7 +300,7 @@
         dih2 = ARNA.HBD_PSGC
         nHB = 3
     else:
-        print 'Canonical basepair should be A-U or G-C: ',i,j
+        print('Canonical basepair should be A-U or G-C: ',i,j)
         sys.exit(2)
     return dist, ang1, ang2, dih0, dih1, dih2, nHB
 
--- ./ninfo_RNA13_pdb_multichain.py	(original)
+++ ./ninfo_RNA13_pdb_multichain.py	(refactored)
@@ -10,7 +10,7 @@
 from cafysis.elements.ninfo import NinfoSet, BondLength, BondAngle, BaseStackDT, HBondDT
 
 if len(sys.argv) != 4:
-    print 'Usage: SCRIPT [cg pdb] [hb list file] [output ninfo]'
+    print('Usage: SCRIPT [cg pdb] [hb list file] [output ninfo]')
     sys.exit(2)
 
 f_in = PdbFile(sys.argv[1])
@@ -19,12 +19,12 @@
 f_in.close()
 
 if len(chains) > 1:
-    print '%i chains' % len(chains)
+    print('%i chains' % len(chains))
 
 n_nt = []
 for ic, c in enumerate(chains):
     n_nt.append(c.num_res())
-    print '#nt (chain %i): ', ic+1, n_nt
+    print('#nt (chain %i): ', ic+1, n_nt)
 
 seq = []
 for ic, c in enumerate(chains):
@@ -33,7 +33,7 @@
         # "RA " ---> "A"
         s.append(r.atoms[0].res_name.strip()[1])
     seq.append(s)
-    print 'Sequence (chain %i): ', ic+1, s
+    print('Sequence (chain %i): ', ic+1, s)
 
 ns = NinfoSet()
 
@@ -280,12 +280,12 @@
     ## Check
     if lsp[0] == 'CAN':
         if lsp[3] != 'B' or lsp[6] != 'B':
-            print 'Error: Canonical base pair should be by B and B'
+            print('Error: Canonical base pair should be by B and B')
             sys.exit(2)
     elif lsp[0] == 'NON':
         pass
     else:
-        print 'Error: unknown H-bond type'
+        print('Error: unknown H-bond type')
         sys.exit(2)
 
     hblist.append((lsp[0],int(lsp[1]),int(lsp[2]),lsp[3],
@@ -326,7 +326,7 @@
         dih2 = ARNA.HBD_PSGC
         nHB = 3
     else:
-        print 'Canonical basepair should be A-U or G-C: ',i,j
+        print('Canonical basepair should be A-U or G-C: ',i,j)
         sys.exit(2)
     return dist, ang1, ang2, dih0, dih1, dih2, nHB
 
--- ./ninfo_RNA15_pdb.py	(original)
+++ ./ninfo_RNA15_pdb.py	(refactored)
@@ -12,7 +12,7 @@
 NNHB_NT_SEP = 5
 
 if len(sys.argv) != 6:
-    print 'Usage: SCRIPT [cg pdb] [hb list file] [st list file] [GO/NN] [output ninfo]'
+    print('Usage: SCRIPT [cg pdb] [hb list file] [st list file] [GO/NN] [output ninfo]')
     sys.exit(2)
 
 path_hb_file = sys.argv[2]
@@ -37,19 +37,19 @@
 #n_mp = 3 * n_nt - 1
 
 if len(chains) > 1:
-    print 'Error: currently more than one chain can not be processed.'
+    print('Error: currently more than one chain can not be processed.')
     sys.exit(2)
 
 chain = chains[0]
 n_nt = chain.num_res()
-print '#nt: ', n_nt
+print('#nt: ', n_nt)
 
 seq = []
 for r in chain.residues:
     # "RA " ---> "A"
     seq.append(r.atoms[0].res_name.strip()[1])
-print 'Sequence:'
-print seq
+print('Sequence:')
+print(seq)
 
 ns = NinfoSet()
 
@@ -246,18 +246,18 @@
     ## Check
     if lsp[0] == 'CAN':
         if lsp[2] != 'B' or lsp[4] != 'B':
-            print 'Error: Canonical base pair should be by B and B'
+            print('Error: Canonical base pair should be by B and B')
             sys.exit(2)
     elif lsp[0] == 'NON':
         pass
     else:
-        print 'Error: unknown H-bond type'
+        print('Error: unknown H-bond type')
         sys.exit(2)
 
     def take2(ls):
         i = iter(ls)
         while 1:
-            yield i.next(), i.next()
+            yield next(i), next(i)
 
     atoms1 = []
     atoms2 = []
@@ -370,7 +370,7 @@
         dih2 = ARNA.HBD_PSGU
         nHB = 2
     else:
-        print 'Canonical basepair should be A-U, G-C, or G-U: ',i,j
+        print('Canonical basepair should be A-U, G-C, or G-U: ',i,j)
         sys.exit(2)
     return dist, ang1, ang2, dih0, dih1, dih2, nHB
 
@@ -411,7 +411,7 @@
          dih0_native, dih1_native, dih2_native, nHB) = hb_ARNA_native(nt_1, nt_2)
 
         if nHB != c[5]:
-            print ('Error: nHB != c[5] in ninfo_RNA15_pdb',c)
+            print(('Error: nHB != c[5] in ninfo_RNA15_pdb',c))
             sys.exit(2)
 
         sectert = 'S'
@@ -511,7 +511,7 @@
     elif lsp[0] == 'F':
         tstlist_force.append( (nt1, nt2) )
     else:
-        print 'Error: unknown stack type'
+        print('Error: unknown stack type')
         sys.exit(2)
 
 #### Remove inner stem
--- ./ninfo_SOPSC_noSCforGLY.py	(original)
+++ ./ninfo_SOPSC_noSCforGLY.py	(refactored)
@@ -25,7 +25,7 @@
 from cafysis.para.BetancourtThirumalai import BTmatrix
 
 if len(sys.argv) != 3:
-    print 'Usage: SCRIPT [input PDB] [output ninfo]'
+    print('Usage: SCRIPT [input PDB] [output ninfo]')
     sys.exit(2)
 
 p = PdbFile(sys.argv[1])
@@ -48,13 +48,13 @@
         for a in r.atoms:
             if a.res_name.strip() == 'GLY':
                 if num_a != 1:
-                    print 'Error: num_a != 1'
-                    print a.name, a.res_name, a.res_seq
+                    print('Error: num_a != 1')
+                    print(a.name, a.res_name, a.res_seq)
                     sys.exit(2)
             else:
                 if num_a != 2:
-                    print 'Error: num_a != 2'
-                    print a.name, a.res_name, a.res_seq
+                    print('Error: num_a != 2')
+                    print(a.name, a.res_name, a.res_seq)
                     sys.exit(2)
 
             if a.name.strip() == 'B':
@@ -62,8 +62,8 @@
             elif a.name.strip() == 'S':
                 a_SC = a
             else:
-                print 'Error: unknown particle type'
-                print a.name, a.res_name, a.res_seq
+                print('Error: unknown particle type')
+                print(a.name, a.res_name, a.res_seq)
                 sys.exit(2)
 
         ## bond between B(i-1) and B(i)
@@ -79,7 +79,7 @@
         ## bond between B(i) and S(i)
         if num_a == 2:
             if a_SC is None:
-                print 'Error: a_SC is None'
+                print('Error: a_SC is None')
                 sys.exit(2)
             ni = Fene(id=None,iunit1=ic+1,iunit2=ic+1, imp1=a_BB.serial, imp2=a_SC.serial,
                      imp1un=a_BB.serial,imp2un=a_SC.serial,
@@ -128,7 +128,7 @@
                     elif (a2.res_name, a1.res_name) in BTmatrix:
                         BTeps = BTmatrix[(a2.res_name, a1.res_name)]
                     else:
-                        print 'Erorr: either a1.res_name=%s or a2.res_name=%s is wrong' % (a1.res_name, a2.res_name)
+                        print('Erorr: either a1.res_name=%s or a2.res_name=%s is wrong' % (a1.res_name, a2.res_name))
                         sys.exit(2)
 
                     eps = COEF_S_S * abs(BTeps - 0.7)
@@ -152,7 +152,7 @@
                             factor=None, correct_mgo=None, type_str=None)
                     ns.LJs.append(ni)
         else:
-            print "Error: either name1=%s or name2=%s is unknown" % (name1,name2)
+            print("Error: either name1=%s or name2=%s is unknown" % (name1,name2))
             sys.exit(2)
 
 nf = NinfoFile(sys.argv[-1])
--- ./ninfo_change_gmp_by_list.py	(original)
+++ ./ninfo_change_gmp_by_list.py	(refactored)
@@ -11,9 +11,9 @@
 
 if __name__ == '__main__':
     if len(sys.argv) != 6:
-        print 'Usage: %SCRIPT [ninfo] [target unit] [aln file] [side] [OUT ninfo]'
-        print '       side=1  old -> new'
-        print '       side=2  new -> old'
+        print('Usage: %SCRIPT [ninfo] [target unit] [aln file] [side] [OUT ninfo]')
+        print('       side=1  old -> new')
+        print('       side=2  new -> old')
         sys.exit(2)
 
     target = int(sys.argv[2])
@@ -39,7 +39,7 @@
             #aln[mp2 - delta2] = mp1 - delta1
             aln[mp2] = mp1
         else:
-            print '"side" is not acceptable. See usage'
+            print('"side" is not acceptable. See usage')
             sys.exit(2)
             
     ns = NinfoSet()
--- ./ninfo_change_mp_by_aln.py	(original)
+++ ./ninfo_change_mp_by_aln.py	(refactored)
@@ -11,9 +11,9 @@
 
 if __name__ == '__main__':
     if len(sys.argv) != 6:
-        print 'Usage: %SCRIPT [ninfo] [target unit] [aln file] [side] [OUT ninfo]'
-        print '       side=1  old -> new'
-        print '       side=2  new -> old'
+        print('Usage: %SCRIPT [ninfo] [target unit] [aln file] [side] [OUT ninfo]')
+        print('       side=1  old -> new')
+        print('       side=2  new -> old')
         sys.exit(2)
 
     target = int(sys.argv[2])
@@ -39,7 +39,7 @@
             #aln[mp2 - delta2] = mp1 - delta1
             aln[mp2] = mp1
         else:
-            print '"side" is not acceptable. See usage'
+            print('"side" is not acceptable. See usage')
             sys.exit(2)
             
     ns = NinfoSet()
--- ./ninfo_change_mp_by_list.py	(original)
+++ ./ninfo_change_mp_by_list.py	(refactored)
@@ -11,9 +11,9 @@
 
 if __name__ == '__main__':
     if len(sys.argv) != 6:
-        print 'Usage: %SCRIPT [ninfo] [target unit] [aln file] [side] [OUT ninfo]'
-        print '       side=1  old -> new'
-        print '       side=2  new -> old'
+        print('Usage: %SCRIPT [ninfo] [target unit] [aln file] [side] [OUT ninfo]')
+        print('       side=1  old -> new')
+        print('       side=2  new -> old')
         sys.exit(2)
 
     target = int(sys.argv[2])
@@ -39,7 +39,7 @@
             #aln[mp2 - delta2] = mp1 - delta1
             aln[mp2] = mp1
         else:
-            print '"side" is not acceptable. See usage'
+            print('"side" is not acceptable. See usage')
             sys.exit(2)
             
     ns = NinfoSet()
--- ./ninfo_combine_with_aln.py	(original)
+++ ./ninfo_combine_with_aln.py	(refactored)
@@ -1,9 +1,9 @@
 #!/usr/bin/env python
 
 def show_usage() :
-    print ''
-    print ' usage: SCRIPT [ninfo file 1] [ninfo file 2] [cmd file] [ninfo output file]'
-    print ''
+    print('')
+    print(' usage: SCRIPT [ninfo file 1] [ninfo file 2] [cmd file] [ninfo output file]')
+    print('')
     
 import sys
 from file_ninfo import NinfoFile
@@ -87,11 +87,11 @@
         if con.iunit1 != sub_iunit1 or con.iunit2 != sub_iunit2 :
             continue
         con_append = deepcopy(con)
-        if aln1.has_key(con.imp1) :
+        if con.imp1 in aln1 :
             con_append.imp1 = aln1[con.imp1]
         else :
             continue
-        if aln2.has_key(con.imp2) :
+        if con.imp2 in aln2 :
             con_append.imp2 = aln2[con.imp2]
         else :
             continue
@@ -103,11 +103,11 @@
         if bp.iunit1 != sub_iunit1 or bp.iunit2 != sub_iunit2 :
             continue
         bp_append = deepcopy(bp)
-        if aln1.has_key(bp.imp1) :
+        if bp.imp1 in aln1 :
             bp_append.imp1 = aln1[bp.imp1]
         else :
             continue
-        if aln2.has_key(bp.imp2) :
+        if bp.imp2 in aln2 :
             bp_append.imp2 = aln2[bp.imp2]
         else :
             continue
--- ./ninfo_contact_summary.py	(original)
+++ ./ninfo_contact_summary.py	(refactored)
@@ -30,8 +30,8 @@
 
 # Count the number of contacts or basepairs
 data = {} 
-for i in xrange(1,nunit+1) :
-    for j in xrange(i, nunit+1) :
+for i in range(1,nunit+1) :
+    for j in range(i, nunit+1) :
         n_con = len(ninfo.get_contacts_by_unit(i, j))
         n_bp  = len(ninfo.get_basepairs_by_unit(i, j))
         data[(i,j)] = (n_con, n_bp)
@@ -41,36 +41,36 @@
 ### contact
 # First line
 f_out.write("#contact")
-for j in xrange(1, nunit+1) :
+for j in range(1, nunit+1) :
     f_out.write(",%i" % j)
 f_out.write("\n")
 
 # Data
-for i in xrange(1, nunit+1) :
+for i in range(1, nunit+1) :
     f_out.write("%i" % i)
-    for j in xrange(1, nunit+1) :
+    for j in range(1, nunit+1) :
         f_out.write(",%i" % data[(i,j)][0] )
     f_out.write("\n")
     
 ### basepair
 # First line
 f_out.write("\n\n#basepair")
-for j in xrange(1, nunit+1) :
+for j in range(1, nunit+1) :
     f_out.write(",%i" % j)
 f_out.write("\n")
 
 # Data
-for i in xrange(1, nunit+1) :
+for i in range(1, nunit+1) :
     f_out.write("%i" % i)
-    for j in xrange(1, nunit+1) :
+    for j in range(1, nunit+1) :
         f_out.write(",%i" % data[(i,j)][1] )
     f_out.write("\n")
 f_out.close()    
 
 ####### Output for list
 if flg_out_list :
-    for i in xrange(1, nunit+1) :
-        for j in xrange(i, nunit+1) :
+    for i in range(1, nunit+1) :
+        for j in range(i, nunit+1) :
             f_out_list.write("%5i %5i %10i %10i\n" % ((i,j) + data[(i,j)]) )
         f_out_list.write('#--------------------------------\n')
     f_out_list.close()
--- ./ninfo_copy_bindingsite.py	(original)
+++ ./ninfo_copy_bindingsite.py	(refactored)
@@ -33,7 +33,7 @@
         imp_pair_m = (int(linesp[2]), int(linesp[3]))
         
 if unit_A == None or unit_P == None or unit_E == None or unit_m == None :
-    print 'Error:  tRNA information is not enough'
+    print('Error:  tRNA information is not enough')
     sys.exit(2)
         
 f_out_ninfo = NinfoFile(sys.argv[3])
@@ -320,12 +320,12 @@
         imp_set.add(imps)
 
 for imps in dupl_set:
-    print '#################### Warning: contact duplication'
-    print '%i %i' % imps
+    print('#################### Warning: contact duplication')
+    print('%i %i' % imps)
     for con in ninfo.contacts:
         if con.imp1 in imps and con.imp2 in imps :
             con.show()
-            print ''
+            print('')
 
 imp_set = set()
 dupl_set = set()
@@ -341,10 +341,10 @@
         imp_set.add(imps)
 
 for imps in dupl_set:
-    print '#################### Warning: contact duplication'
-    print '%i %i' % imps
+    print('#################### Warning: contact duplication')
+    print('%i %i' % imps)
     for con in ninfo.basepairs:
         if con.imp1 in imps and con.imp2 in imps :
             con.show()
-            print ''
-
+            print('')
+
--- ./ninfo_del_interaction.py	(original)
+++ ./ninfo_del_interaction.py	(refactored)
@@ -7,9 +7,9 @@
 from ninfo import NinfoSet
 
 if len(sys.argv) != 4:
-    print 
-    print 'Usage: % SCRIPT [NINFO file] [command file]  [output NINFO file]'
-    print 
+    print() 
+    print('Usage: % SCRIPT [NINFO file] [command file]  [output NINFO file]')
+    print() 
     sys.exit(2)
 
 # Input & file opening
--- ./ninfo_divide.py	(original)
+++ ./ninfo_divide.py	(refactored)
@@ -11,7 +11,7 @@
 
 if __name__ == '__main__':
     if len(sys.argv) != 3:
-        print 'Usage: %SCRIPT [input ninfo file] [output prefix]'
+        print('Usage: %SCRIPT [input ninfo file] [output prefix]')
         sys.exit(2)
     
     file_ninfo = NinfoFile(sys.argv[1])
@@ -24,8 +24,8 @@
     prefix = sys.argv[2]
     
     ndi = ns.dict_of_ninfoset_by_unit()
-    for i in xrange(1,ns.max_unit+1):
-        for j in xrange(i,ns.max_unit+1):
+    for i in range(1,ns.max_unit+1):
+        for j in range(i,ns.max_unit+1):
             if ndi[(i,j)].max_unit != 0:
                 file_out = NinfoFile(prefix+'%03i_%03i.ninfo'%(i,j))
                 file_out.open_to_write()
--- ./ninfo_make_inputlist.py	(original)
+++ ./ninfo_make_inputlist.py	(refactored)
@@ -11,7 +11,7 @@
 
 if __name__ == '__main__':
     if len(sys.argv) != 4:
-        print 'Usage: SCRIPT [input DIR] [prefix] [output file]'
+        print('Usage: SCRIPT [input DIR] [prefix] [output file]')
         sys.exit(2)
         
     files = glob.glob(sys.argv[1] + '/*.ninfo')
@@ -37,13 +37,13 @@
             if reobj2:
                 others.add(reobj2.group(1))
             else:
-                print 'Error reobj2 is None'
+                print('Error reobj2 is None')
                 sys.exit(2)
             
     file_out = open(sys.argv[3],'w')
     n = 0
-    for i in xrange(1,max_unitnum+1):
-        for j in xrange(i,max_unitnum+1):
+    for i in range(1,max_unitnum+1):
+        for j in range(i,max_unitnum+1):
             if (i,j) in pairs:
                 n += 1
                 file_out.write('NINFO(%i/%i) %i\n' % (i,j,n))
--- ./ninfo_onebyone_makelist.py	(original)
+++ ./ninfo_onebyone_makelist.py	(refactored)
@@ -8,7 +8,7 @@
 
 if __name__ == '__main__':
     if len(sys.argv) != 5:
-        print 'Usage: %SCRIPT [input dir] [unit list file] [OUT input] [OUT list]'
+        print('Usage: %SCRIPT [input dir] [unit list file] [OUT input] [OUT list]')
         sys.exit(2)
         
     re_unitlist = re.compile('^(\d+)\s+(\S+)\s+(\S+)$')
@@ -35,23 +35,23 @@
 
     file_input = open(sys.argv[3],'w')
     n = 0
-    for i in xrange(1,maxunit+1):
-        for j in xrange(i,maxunit+1):
+    for i in range(1,maxunit+1):
+        for j in range(i,maxunit+1):
             if (i,j) in filenames:
                 n += 1
                 file_input.write('NINFO(%i/%i) %i\n' % (i,j,n))
                 
     n = 0
-    for i in xrange(1,maxunit+1):
-        for j in xrange(i,maxunit+1):
+    for i in range(1,maxunit+1):
+        for j in range(i,maxunit+1):
             if (i,j) in filenames:
                 n += 1
                 file_input.write('%i %s\n' % (n, filenames[(i,j)]))
         
     file_list = open(sys.argv[4],'w')
     n = 0
-    for i in xrange(1,maxunit+1):
-        for j in xrange(i,maxunit+1):
+    for i in range(1,maxunit+1):
+        for j in range(i,maxunit+1):
             if (i,j) in filenames:
                 n += 1
                 file_list.write('%i %i %i %s %s\n' % (n,i,j,units[i],units[j]))
--- ./ninfo_split.py	(original)
+++ ./ninfo_split.py	(refactored)
@@ -8,9 +8,9 @@
 from cafysis.file_io.ninfo import NinfoFile, NinfoSet
 
 def show_usage() :
-    print ''
-    print ' usage: ninfo_split.py [ninfo file] [prefix (can be dir)]'
-    print ''
+    print('')
+    print(' usage: ninfo_split.py [ninfo file] [prefix (can be dir)]')
+    print('')
     
 if len(sys.argv) != 3:
     show_usage()
@@ -25,10 +25,10 @@
 out_prefix = sys.argv[2]
 ninfo.update_info()
 nUnit = ninfo.max_unit
-print nUnit 
+print(nUnit) 
 ninfo_out = {}
-for i in xrange(1,nUnit+1) :
-    for j in xrange(i,nUnit+1) :
+for i in range(1,nUnit+1) :
+    for j in range(i,nUnit+1) :
         ninfo_out[(i,j)] = NinfoSet()
         
 for bd in ninfo.bondlengths :
@@ -49,8 +49,8 @@
 for bs in ninfo.basestacks :
     ninfo_out[(bs.iunit1, bs.iunit2)].basestacks.append(bs)
     
-for i in xrange(1,nUnit+1) :
-    for j in xrange(i, nUnit+1) :
+for i in range(1,nUnit+1) :
+    for j in range(i, nUnit+1) :
         if (len(ninfo_out[(i,j)].bondlengths) != 0 or len(ninfo_out[(i,j)].bondangles) != 0  or
             len(ninfo_out[(i,j)].dihedrals) != 0   or len(ninfo_out[(i,j)].contacts) != 0    or
             len(ninfo_out[(i,j)].basepairs) != 0    or len(ninfo_out[(i,j)].basestacks) != 0 ):
--- ./ninfo_substitute_tRNA.py	(original)
+++ ./ninfo_substitute_tRNA.py	(refactored)
@@ -6,9 +6,9 @@
 import sys
 
 def show_usage() :
-    print 
-    print 'Usage: % SCRIPT [ninfo (all)] [ninfo (part)] [ninfo (output)] [[(unit ID) (starting imp)] ....]'
-    print 
+    print() 
+    print('Usage: % SCRIPT [ninfo (all)] [ninfo (part)] [ninfo (output)] [[(unit ID) (starting imp)] ....]')
+    print() 
     
 if len(sys.argv) < 5:
     show_usage()
--- ./pdb2dcd.py	(original)
+++ ./pdb2dcd.py	(refactored)
@@ -6,7 +6,7 @@
 import sys
 
 if len(sys.argv) != 3:
-    print 'Usage: SCRIPT [pdb] [dcd]'
+    print('Usage: SCRIPT [pdb] [dcd]')
     sys.exit(2)
 
 pdb = PdbFile(sys.argv[1])
--- ./pdb2drid.py	(original)
+++ ./pdb2drid.py	(refactored)
@@ -13,7 +13,7 @@
 import numpy as np
 
 if len(sys.argv) != 4:
-    print 'Usage: % SCRIPT [input PDB] [mask file] [output DRID]'
+    print('Usage: % SCRIPT [input PDB] [mask file] [output DRID]')
     sys.exit(2)
 
 pdb = PdbFile(sys.argv[1])
--- ./pdb2fasta.py	(original)
+++ ./pdb2fasta.py	(refactored)
@@ -1,9 +1,9 @@
 #!/usr/bin/env python
 
 def show_usage() :
-    print ''
-    print ' usage: SCRIPT [input pdb] [output fasta] [[TITLE]]'
-    print ''
+    print('')
+    print(' usage: SCRIPT [input pdb] [output fasta] [[TITLE]]')
+    print('')
     
 import sys
 if not len(sys.argv) in (3,4) :
@@ -35,18 +35,18 @@
 for c in chains :
     for r in c.residues :
         c3 = r.atoms[0].res_name
-        if amino.has_key(c3):
+        if c3 in amino:
             c1 = amino[c3]
-        elif rna.has_key(c3) :
+        elif c3 in rna :
             c1 = rna[c3]
         else:
-            print 'no data', c3
+            print('no data', c3)
             sys.exit(2)
         str += c1
         
 #print str
 
 lines = int (len(str) / 80)
-for i in xrange(lines) :
+for i in range(lines) :
     f_fasta.write(str[i*80:(i+1)*80] + '\n')
 f_fasta.write(str[lines*80:] + '\n')
--- ./pdb_aa2cg.py	(original)
+++ ./pdb_aa2cg.py	(refactored)
@@ -7,7 +7,7 @@
 import sys
 
 if len(sys.argv) != 3:
-    print 'Usage: SCRIPT [input aa PDB] [output cg PDB]'
+    print('Usage: SCRIPT [input aa PDB] [output cg PDB]')
     sys.exit(2)
 
 ATOMS_P = ('P', 'OP1', 'OP2')
--- ./pdb_centroid_origin_PBC.py	(original)
+++ ./pdb_centroid_origin_PBC.py	(refactored)
@@ -17,7 +17,7 @@
 import copy
 
 if len(sys.argv) != 6:
-    print 'Usage: SCRIPT [input PDB] [ID domain begin (starting with 1)] [ID domain end] [Box size] [output PDB]'
+    print('Usage: SCRIPT [input PDB] [ID domain begin (starting with 1)] [ID domain end] [Box size] [output PDB]')
     sys.exit(2)
 
 ID_DOM_INI = int(sys.argv[2]) - 1  # 重心を求める際に必要
--- ./pdb_cg_pair_distance.py	(original)
+++ ./pdb_cg_pair_distance.py	(refactored)
@@ -6,11 +6,11 @@
 '''
 
 import sys
-from file_io.pdb import PdbFile
+from .file_io.pdb import PdbFile
 
 if __name__ == '__main__':
     if len(sys.argv) != 3:
-        print 'Usage: %SCRIPT [input PDB file] [output]'
+        print('Usage: %SCRIPT [input PDB file] [output]')
         sys.exit(2)
 
 f_pdb = PdbFile(sys.argv[1])
@@ -19,7 +19,7 @@
 f_pdb.close()
 
 if len(chains) != 1:
-    print 'len(chains) != 1'
+    print('len(chains) != 1')
     sys.exit(2)
 
 f_out = open(sys.argv[-1],'w')
--- ./pdb_cg_separate_by_input.py	(original)
+++ ./pdb_cg_separate_by_input.py	(refactored)
@@ -14,9 +14,9 @@
 import re
 
 if len(sys.argv) != 4:
-    print
-    print 'Usage: % SCRIPT [cafemol pdb file] [cafemol input file]  [output prefix]'
-    print
+    print()
+    print('Usage: % SCRIPT [cafemol pdb file] [cafemol input file]  [output prefix]')
+    print()
     sys.exit(2)
 
 f_pdb = open(sys.argv[1], 'r')
@@ -41,7 +41,7 @@
             data[i] = (mo.groups()[1:])
 f_inp.close()
 
-for i in xrange(1, len(data)+1) :
+for i in range(1, len(data)+1) :
     f_out = open(out_prefix+data[i][1], 'w')
     for line in f_pdb :
         if line[:2] == '>>' :
--- ./pdb_chain_separate.py	(original)
+++ ./pdb_chain_separate.py	(refactored)
@@ -1,7 +1,7 @@
 #!/usr/bin/env python
 
 import sys
-from file_io.pdb import PdbFile
+from .file_io.pdb import PdbFile
 
 if len(sys.argv) != 3:
     print ('\n Usage: SCRIPT [input PDB file] [output DIR (with/without prefix)]\n')
@@ -12,7 +12,7 @@
 chains = f_pdb.read_all()
 f_pdb.close()
 
-print ('%i chains' %len(chains))
+print(('%i chains' %len(chains)))
 for c in chains :
     chain_id = c.get_atom(0).chain_id
     if chain_id == ' ' :
--- ./pdb_chain_separate_number.py	(original)
+++ ./pdb_chain_separate_number.py	(refactored)
@@ -1,7 +1,7 @@
 #!/usr/bin/env python
 
 import sys
-from file_io.pdb import PdbFile
+from .file_io.pdb import PdbFile
 
 if len(sys.argv) != 3:
     print ('\n Usage: SCRIPT [input PDB file] [output DIR (with/without prefix)]\n')
@@ -12,7 +12,7 @@
 chains = f_pdb.read_all()
 f_pdb.close()
 
-print ('%i chains' %len(chains))
+print(('%i chains' %len(chains)))
 inum = 0
 for c in chains :
     inum += 1
--- ./pdb_change_residue_number.py	(original)
+++ ./pdb_change_residue_number.py	(refactored)
@@ -7,9 +7,9 @@
 from cafysis.file_io.pdb import PdbFile
 
 if len(sys.argv) != 5 :
-    print ''
-    print ' Usage: SCRIPT [input PDB] [The residue number of the first a.a.] [output PDB] [log file]'
-    print ''
+    print('')
+    print(' Usage: SCRIPT [input PDB] [The residue number of the first a.a.] [output PDB] [log file]')
+    print('')
     sys.exit(2)
     
 pdb_in = PdbFile(sys.argv[1])
@@ -21,7 +21,7 @@
 f_log = open(sys.argv[4], 'w')
 f_log.write('#original -> new\n')
 for c in chains :
-    print sys.argv[1], '#residues', len(c.residues)
+    print(sys.argv[1], '#residues', len(c.residues))
     for r in c.residues :
         f_log.write('%i %s -> %i\n' % (r.atoms[0].res_seq, r.atoms[0].ins_code, res_id))
         for a in r.atoms :
--- ./pdb_contact_map_closest_atom.py	(original)
+++ ./pdb_contact_map_closest_atom.py	(refactored)
@@ -6,7 +6,7 @@
 '''
 
 import sys
-from file_io.pdb import PdbFile
+from .file_io.pdb import PdbFile
 
 if len(sys.argv) != 3:
     print ('\n Usage: SCRIPT [input PDB file] [output distance file]\n')
@@ -18,7 +18,7 @@
 f_pdb.close()
 
 if len(chains) != 1:
-    print 'len(chains) != 1'
+    print('len(chains) != 1')
     sys.exit(2)
 
 f_out = open(sys.argv[2],'w')
--- ./pdb_detect_basestack.py	(original)
+++ ./pdb_detect_basestack.py	(refactored)
@@ -17,8 +17,8 @@
 from cafysis.elements.coord import Coord
 
 if len(sys.argv) not in (2,3):
-    print 'Usage: SCRIPT [PDB]  (score cutoff = 0.5)'
-    print '  or : SCRIPT [PDB] [score cutoff]'
+    print('Usage: SCRIPT [PDB]  (score cutoff = 0.5)')
+    print('  or : SCRIPT [PDB] [score cutoff]')
     sys.exit(2)
 
 SCORE_CUT = 0.5
@@ -86,10 +86,10 @@
         coms.append(com)
 
         if xyz_a is None:
-            print 'Error: can not find atom "a" in ', ic+1, '-th chain, ',ir+1, '-th residue, ', ntd
+            print('Error: can not find atom "a" in ', ic+1, '-th chain, ',ir+1, '-th residue, ', ntd)
             sys.exit(2)
         if xyz_b is None:
-            print 'Error: can not find atom "b" in ', ic+1, '-th chain, ',ir+1, '-th residue, ', ntd
+            print('Error: can not find atom "b" in ', ic+1, '-th chain, ',ir+1, '-th residue, ', ntd)
             sys.exit(2)
         
         xyz_a -= com
@@ -168,8 +168,8 @@
     if score is not None and score >= SCORE_CUT:
         si, sj = sgn
         d, omega, xi = param
-        print ('%s %+4i %+4i  %5.3f  %4.2f %6.2f %6.2f' % 
-               ('S', si*locations[i][1], sj*locations[i+1][1], score, d, omega, xi))
+        print(('%s %+4i %+4i  %5.3f  %4.2f %6.2f %6.2f' % 
+               ('S', si*locations[i][1], sj*locations[i+1][1], score, d, omega, xi)))
 
 ''' Tertiary stacking '''
 for i in range(nres):
@@ -184,5 +184,5 @@
         if score is not None and score >= SCORE_CUT:
             si, sj = sgn
             d, omega, xi = param
-            print ('%s %+4i %+4i  %5.2f  %4.2f %6.2f %6.2f' % 
-                   ('T', si*locations[i][1], sj*locations[j][1], score, d, omega, xi))
+            print(('%s %+4i %+4i  %5.2f  %4.2f %6.2f %6.2f' % 
+                   ('T', si*locations[i][1], sj*locations[j][1], score, d, omega, xi)))
--- ./pdb_domain_angle.py	(original)
+++ ./pdb_domain_angle.py	(refactored)
@@ -36,7 +36,7 @@
 mp_domA_1 = 3 * ( 72 - 11)
 
 mp_domB = []
-for nt12 in range(42, 47+1)+range(174,178+1)+range(130,166+1):
+for nt12 in list(range(42, 47+1))+list(range(174,178+1))+list(range(130,166+1)):
     nt = nt12 - 11
     mp_domB.append( 3 * (nt-1) )  # Use phosphate
 
@@ -77,7 +77,7 @@
 if r1 < r0:
     vA[0] *= -1.0
 
-print 'Principal vector of domain A', vA[0]
+print('Principal vector of domain A', vA[0])
 
 
 '''
@@ -109,10 +109,10 @@
 if r1 < r0:
     vB[0] *= -1.0
 
-print 'Principal vector of domain B', vB[0]
+print('Principal vector of domain B', vB[0])
 
 
 ''' Angle between domain A and B '''
 #cos_theta = np.dot(vA[0],vB[0]) / math.sqrt(np.dot(vA[0],vA[0]) * np.dot(vB[0],vB[0]))
 theta = math.acos( np.dot(vA[0],vB[0]) / math.sqrt(np.dot(vA[0],vA[0]) * np.dot(vB[0],vB[0])) )
-print 180.0 * theta / math.pi
+print(180.0 * theta / math.pi)
--- ./pdb_make_so_list.py	(original)
+++ ./pdb_make_so_list.py	(refactored)
@@ -6,7 +6,7 @@
 '''
 
 import sys
-from file_io.pdb import PdbFile
+from .file_io.pdb import PdbFile
 
 if len(sys.argv) != 3:
     print ('\n Usage: SCRIPT [input PDB file] [output SOF list file]\n')
@@ -18,7 +18,7 @@
 f_pdb.close()
 
 if len(chains) != 1:
-    print 'len(chains) != 1'
+    print('len(chains) != 1')
     sys.exit(2)
 
 f_out = open(sys.argv[2],'w')
--- ./pdb_make_vector_movement.py	(original)
+++ ./pdb_make_vector_movement.py	(refactored)
@@ -33,7 +33,7 @@
         print ('Error: c1.num_atom() != c2.num_atom()')
         sys.exit(2)
         
-    for i in xrange(c1.num_atom()):
+    for i in range(c1.num_atom()):
         a1 = c1.get_atom(i)
         a2 = c2.get_atom(i)
         v = (a2.xyz.x - a1.xyz.x, a2.xyz.y - a1.xyz.y, a2.xyz.z - a1.xyz.z)
--- ./pdb_move_to_COM.py	(original)
+++ ./pdb_move_to_COM.py	(refactored)
@@ -5,7 +5,7 @@
 from my_element import Coord
 
 if len(sys.argv) != 3:
-    print 'Usage: % SCRIPT [input pdb] [output pdb]'
+    print('Usage: % SCRIPT [input pdb] [output pdb]')
     sys.exit(2)
     
 f_pdb_in = PdbFile(sys.argv[1])
@@ -17,7 +17,7 @@
 total_atom = 0
 for c in chains :
     total_atom += c.num_atom()
-    for iatom in xrange(c.num_atom()) :
+    for iatom in range(c.num_atom()) :
         com.move(c.get_atom(iatom).xyz)
         
 com.x = - com.x / float(total_atom)
@@ -25,7 +25,7 @@
 com.z = - com.z / float(total_atom)
 
 for c in chains :
-    for iatom in xrange(c.num_atom()) :
+    for iatom in range(c.num_atom()) :
         c.get_atom(iatom).xyz.move(com)
 
 f_pdb_out = PdbFile(sys.argv[2])
--- ./pdb_ninfo.py	(original)
+++ ./pdb_ninfo.py	(refactored)
@@ -31,10 +31,10 @@
 
 xyz = []
 for c in chains:
-    for i in xrange(c.num_atom()):
+    for i in range(c.num_atom()):
         xyz.append(c.get_atom(i).xyz)
     
-print ("## Confirmation: number of atoms = %i" % len(xyz))
+print(("## Confirmation: number of atoms = %i" % len(xyz)))
         
 f_out = open(sys.argv[-1],'w')
 
--- ./pdb_rewrite_chain.py	(original)
+++ ./pdb_rewrite_chain.py	(refactored)
@@ -4,9 +4,9 @@
 import sys
 
 if len(sys.argv) != 4:
-    print 
-    print 'Usage: % SCRIPT [PDB file] [char]  [output PDB file]'
-    print 
+    print() 
+    print('Usage: % SCRIPT [PDB file] [char]  [output PDB file]')
+    print() 
     sys.exit(2)
 
 filename_pdb = sys.argv[1]
--- ./pdb_rna_delete_hydrogen.py	(original)
+++ ./pdb_rna_delete_hydrogen.py	(refactored)
@@ -5,10 +5,10 @@
 
 sys.argv
 if len(sys.argv) != 3:
-    print 
-    print 'This script deletes hydrogen atoms from PDB file.'
-    print 'Usage: % SCRIPT [PDB file] [output PDB file]'
-    print 
+    print() 
+    print('This script deletes hydrogen atoms from PDB file.')
+    print('Usage: % SCRIPT [PDB file] [output PDB file]')
+    print() 
     sys.exit(2)
 
 filename_pdb = sys.argv[1]
--- ./pdb_rna_extract_backbone.py	(original)
+++ ./pdb_rna_extract_backbone.py	(refactored)
@@ -5,10 +5,10 @@
 
 sys.argv
 if len(sys.argv) != 3:
-    print 
-    print 'This script extracts backbone-atoms which have name "?OP?","?P??","???\'" from PDB file.'
-    print 'Usage: % SCRIPT [PDB file] [output PDB file]'
-    print 
+    print() 
+    print('This script extracts backbone-atoms which have name "?OP?","?P??","???\'" from PDB file.')
+    print('Usage: % SCRIPT [PDB file] [output PDB file]')
+    print() 
     sys.exit(2)
 
 filename_pdb = sys.argv[1]
@@ -30,7 +30,7 @@
             pre_res_id = res_id
 
         if res_id != pre_res_id :
-            for i in xrange(6) :
+            for i in range(6) :
                 if backbone[i] :
                     file_out.write(backbone[i])
             backbone = [None, None, None, None, None, None]
@@ -49,7 +49,7 @@
         if line[12:16] == " O3'" :
             backbone[5] = line
 
-for i in xrange(6) :
+for i in range(6) :
     if backbone[i] : 
         file_out.write(backbone[i])
 
--- ./pdb_rna_nucleotide_com.py	(original)
+++ ./pdb_rna_nucleotide_com.py	(refactored)
@@ -16,7 +16,7 @@
 
 if __name__ == '__main__':
     if len(sys.argv) != 3:
-        print 'Usage: %SCRIPT [input PDB file] [output PDB]'
+        print('Usage: %SCRIPT [input PDB file] [output PDB]')
         sys.exit(2)
         
 
@@ -34,7 +34,7 @@
 
 chains_com = []
 
-import elements
+from . import elements
 
 i_serial = 0
 
@@ -54,10 +54,10 @@
         for a in r.atoms:
             if a.element.strip() == 'H':
                 continue
-            if element2mass.has_key(a.element.strip()):
+            if a.element.strip() in element2mass:
                 mass = element2mass[a.element.strip()]
             else:
-                print 'Error: no key %s in element2mass.' % (a.element,)
+                print('Error: no key %s in element2mass.' % (a.element,))
             xyz_sum += a.xyz * mass
             mass_sum += mass
         a_com.xyz = xyz_sum / float(mass_sum)
--- ./pdb_shape.py	(original)
+++ ./pdb_shape.py	(refactored)
@@ -27,17 +27,17 @@
 import numpy as np
 
 if len(sys.argv) != 2:
-    print 'Usage: SCRIPT [PDB]'
-    print ''
-    print 'Returns: %5i %6.3f %6.3f %6.3f % (N, Rg, D, S)'
-    print '    N  = number of particles (atoms)'
-    print '    Rg = radius of gyration'
-    print '    D  = Sphericity (0 <= D <= 1)'
-    print '          D = 0 --> perfect sphere'
-    print '          D > 0 --> anisotropic'
-    print '    S  = Spheroidal shape (-1/4 <= S <= 2)'
-    print '          S < 0 --> oblate'
-    print '          S > 0 --> prolate'
+    print('Usage: SCRIPT [PDB]')
+    print('')
+    print('Returns: %5i %6.3f %6.3f %6.3f % (N, Rg, D, S)')
+    print('    N  = number of particles (atoms)')
+    print('    Rg = radius of gyration')
+    print('    D  = Sphericity (0 <= D <= 1)')
+    print('          D = 0 --> perfect sphere')
+    print('          D > 0 --> anisotropic')
+    print('    S  = Spheroidal shape (-1/4 <= S <= 2)')
+    print('          S < 0 --> oblate')
+    print('          S > 0 --> prolate')
     sys.exit(2)
 
 
@@ -91,4 +91,4 @@
 
 S = 27.0 * ( (w[0]-w_avg) * (w[1]-w_avg) * (w[2]-w_avg) ) / (trT**3)
 
-print '%5i %6.3f %6.3f %6.3f' % (N, Rg, D, S)
+print('%5i %6.3f %6.3f %6.3f' % (N, Rg, D, S))
--- ./pdb_show_ires_inum.py	(original)
+++ ./pdb_show_ires_inum.py	(refactored)
@@ -4,7 +4,7 @@
 import sys
 
 if len(sys.argv) != 2 :
-    print 'Usage: SCRIPT [input PDB]'
+    print('Usage: SCRIPT [input PDB]')
     sys.exit(2)
 
 pdb_cafemol = PdbFile(sys.argv[1])
@@ -26,6 +26,6 @@
 for (ic, c) in enumerate(cafe_chains):
     for (ir, r) in enumerate(c.residues):
         for (ia, a) in enumerate(r.atoms):
-            print('%3i %6i %6i %s %6i %s'
-               % (ic+1, a.res_seq+offset, a.res_seq, a.res_name, a.res_seq, a.name))
+            print(('%3i %6i %6i %s %6i %s'
+               % (ic+1, a.res_seq+offset, a.res_seq, a.res_name, a.res_seq, a.name)))
     offset += c.get_atom(-1).res_seq
--- ./pdb_split_model.py	(original)
+++ ./pdb_split_model.py	(refactored)
@@ -8,7 +8,7 @@
 import sys
 
 if len(sys.argv) != 4:
-    print 'Usage SCRIPT [input pdb] [digit of IDs] [output prefix]'
+    print('Usage SCRIPT [input pdb] [digit of IDs] [output prefix]')
     sys.exit(2)
     
 f_in = open(sys.argv[1])
@@ -27,7 +27,7 @@
             f_out.write(l)
         else:
             print('file is not open for a line:')
-            print('     '+l)
+            print(('     '+l))
     elif l[0:6] == 'ENDMDL':
         f_out.write('END')
         f_out.close()
--- ./plot_files_2column.py	(original)
+++ ./plot_files_2column.py	(refactored)
@@ -8,5 +8,5 @@
 if __name__ == '__main__':
     import sys
     if len(sys.argv) != 5:
-        print 'Usage: % SCRIPT [files] [figure raw] [figure column] ['
+        print('Usage: % SCRIPT [files] [figure raw] [figure column] [')
         
--- ./ptraj_from_ninfo.py	(original)
+++ ./ptraj_from_ninfo.py	(refactored)
@@ -8,7 +8,7 @@
 if __name__ == '__main__':
     import sys
     if not len(sys.argv) in (4,) :
-        print 'Usage: % SCRIPT [ninfo file(i)] [cafemol PDB file(i)] [ptraj file(o)]'
+        print('Usage: % SCRIPT [ninfo file(i)] [cafemol PDB file(i)] [ptraj file(o)]')
         sys.exit(2)
     
     path_output = 'measure/'
@@ -37,7 +37,7 @@
     ires_total = 0
     ires_prev = -1
     for c in chains:
-        for i in xrange(c.num_atom()):
+        for i in range(c.num_atom()):
             ires = c.get_atom(i).res_seq
             if ires != ires_prev:
                 ires_total += 1
@@ -45,8 +45,8 @@
             imp2ires.append(ires_total)
     
     file_ptraj = open(sys.argv[-1],'w')
-    print imp2ires
-    print len(imp2ires)
+    print(imp2ires)
+    print(len(imp2ires))
     
     for bd in ns.bondlengths:
         type_out = bd.type
@@ -68,7 +68,7 @@
             com1 = def_S
             com2 = def_P
         else:
-            print 'Error: invalid bond type, '+bd.type
+            print('Error: invalid bond type, '+bd.type)
             sys.exit(2)
             
         cmd = ('distance bond_%i_%i :%i@%s :%i@%s out %s/bond_%s_%0'
@@ -114,7 +114,7 @@
             com2 = def_P
             com3 = def_S
         else:
-            print 'Error: invalid angle type, '+ba.type
+            print('Error: invalid angle type, '+ba.type)
             sys.exit(2)
         
         cmd = ('angle angl_%i_%i_%i :%i@%s :%i@%s :%i@%s out %s/angl_%s_%0'
@@ -172,7 +172,7 @@
         elif dih.type[1:3] == 'SS':
             continue
         else:
-            print 'Error: invalid dihedral type, ' + dih.type
+            print('Error: invalid dihedral type, ' + dih.type)
             sys.exit(2)
             
         cmd = ('dihedral dih_%i_%i_%i_%i :%i@%s :%i@%s :%i@%s :%i@%s out %s/dih_%s_%0'
@@ -201,7 +201,7 @@
         elif con.type[0] in ('Y','U','C'):
             com1 = def_YUC
         else:
-            print 'Error: invalid contact type, '+con.type
+            print('Error: invalid contact type, '+con.type)
             sys.exit(2)
         if con.type[2] == 'p':
             com2 = def_pro
@@ -214,7 +214,7 @@
         elif con.type[2] in ('Y','U','C'):
             com2 = def_YUC
         else:
-            print 'Error: invalid contact type, '+con.type
+            print('Error: invalid contact type, '+con.type)
             sys.exit(2)
         if type_out in ('p-A','p-G','p-R','p-Y','p-U','p-C'):
             type_out = 'p-B'
@@ -242,14 +242,14 @@
         elif bp.type[0] in ('Y','U','C'):
             com1 = def_YUC
         else:
-            print 'Error: invalid basepair type, '+bp.type
+            print('Error: invalid basepair type, '+bp.type)
             sys.exit(2)
         if bp.type[2] in ('A','G','R'):
             com2 = def_RAG
         elif bp.type[2] in ('Y','U','C'):
             com2 = def_YUC
         else:
-            print 'Error: invalid basepair type, '+bp.type
+            print('Error: invalid basepair type, '+bp.type)
             sys.exit(2)
             
         cmd = ('distance bp_%i_%i :%i@%s :%i@%s out %s/bp_HB%i_%0'
@@ -267,14 +267,14 @@
         elif bs.type[0] in ('Y','U','C'):
             com1 = def_YUC
         else:
-            print 'Error: invalid basestack type, '+bs.type
+            print('Error: invalid basestack type, '+bs.type)
             sys.exit(2)
         if bs.type[2] in ('A','G','R'):
             com2 = def_RAG
         elif bs.type[2] in ('Y','U','C'):
             com2 = def_YUC
         else:
-            print 'Error: invalid basestack type, '+bs.type
+            print('Error: invalid basestack type, '+bs.type)
             sys.exit(2)
             
         cmd = ('distance bs_%i_%i :%i@%s :%i@%s out %s/bs_%0'
--- ./random_matrix_apply.py	(original)
+++ ./random_matrix_apply.py	(refactored)
@@ -6,7 +6,7 @@
 import re
 
 if len(sys.argv) != 4:
-    print 'Usage: % SCRIPT [pdb file] [matrix DIR] [output prefix]'
+    print('Usage: % SCRIPT [pdb file] [matrix DIR] [output prefix]')
     sys.exit(2)
 
 filename_pdb = sys.argv[1]
--- ./random_matrix_make_many.py	(original)
+++ ./random_matrix_make_many.py	(refactored)
@@ -2,11 +2,11 @@
 
 import sys
 import random
-from matrix_transform_make import matrix_transform_make
+from .matrix_transform_make import matrix_transform_make
 from math import pi
 
 if len(sys.argv) != 7:
-     print 'Usage: % SCRIPT [number of files] [seed] [filename prefix] [x] [y] [z]'
+     print('Usage: % SCRIPT [number of files] [seed] [filename prefix] [x] [y] [z]')
      sys.exit(2)
 
 n = int(sys.argv[1])
@@ -16,7 +16,7 @@
 y = float(sys.argv[5])
 z = float(sys.argv[6])
 
-for i in xrange(1,n+1) :
+for i in range(1,n+1) :
      filename = '%s_%04i.mat' % (filename_pre, i)
      a = random.random() * 2.0 * pi
      b = random.random() * 2.0 * pi
--- ./replica_flow.py	(original)
+++ ./replica_flow.py	(refactored)
@@ -4,7 +4,7 @@
 import os
 
 if len(sys.argv) < 4:
-    print 'Usage: SCRIPT [#replica] [rep file1] [[rep file2] [rep file3] ...] [output]'
+    print('Usage: SCRIPT [#replica] [rep file1] [[rep file2] [rep file3] ...] [output]')
     sys.exit(2)
 
 filenames = sys.argv[2:len(sys.argv)-1]
@@ -13,7 +13,7 @@
 if not os.path.isfile(path_out):
     f_out = open(path_out, 'w')
 else:
-    print 'Error: the output file exsits. Please delete it first.'
+    print('Error: the output file exsits. Please delete it first.')
     sys.exit(2)
 #f_out = open(sys.argv[-1], 'x')  # For python 3. The if statement won't be needed.
 
@@ -57,7 +57,7 @@
             break
 
         ## The step column will be labels[0] which won't be used.
-        labels = map(int, l.split())
+        labels = list(map(int, l.split()))
         steps += 1
 
         if steps == 1:
--- ./replica_to_label.py	(original)
+++ ./replica_to_label.py	(refactored)
@@ -11,8 +11,8 @@
 
 if __name__ == '__main__':
     if len(sys.argv) < 5:
-        print 'Usage: %SCRIPT [input Dir] [name] [final ID] [output DIR]'
-        print '       ID shoule be from 0 to final ID.'
+        print('Usage: %SCRIPT [input Dir] [name] [final ID] [output DIR]')
+        print('       ID shoule be from 0 to final ID.')
         sys.exit(2)
 
     dir_in = sys.argv[1]
--- ./replica_to_label_many100.py	(original)
+++ ./replica_to_label_many100.py	(refactored)
@@ -16,8 +16,8 @@
 
 if __name__ == '__main__':
     if len(sys.argv) < 5:
-        print 'Usage: %SCRIPT [input Dir] [name] [final ID] [output DIR]'
-        print '       ID shoule be from 1 to final ID.'
+        print('Usage: %SCRIPT [input Dir] [name] [final ID] [output DIR]')
+        print('       ID shoule be from 1 to final ID.')
         sys.exit(2)
 
     dir_in = sys.argv[1]
@@ -49,7 +49,7 @@
         id_finish = id_end_now
 
         # Prepare output files
-        list_id_out = range(id_begin_now, id_end_now+1)
+        list_id_out = list(range(id_begin_now, id_end_now+1))
         out_ts_files = {}
         out_dcd_files = {}
         for id_lab in list_id_out:
@@ -91,9 +91,9 @@
 
 
         # Close output files
-        for f in out_ts_files.values():
+        for f in list(out_ts_files.values()):
             f.close()
-        for f in out_dcd_files.values():
+        for f in list(out_dcd_files.values()):
             f.close()
     
 
--- ./replica_to_label_many_onebyone.py	(original)
+++ ./replica_to_label_many_onebyone.py	(refactored)
@@ -14,8 +14,8 @@
 
 if __name__ == '__main__':
     if len(sys.argv) < 5:
-        print 'Usage: %SCRIPT [input Dir] [name] [final ID] [output DIR]'
-        print '       ID shoule be from 0 to final ID.'
+        print('Usage: %SCRIPT [input Dir] [name] [final ID] [output DIR]')
+        print('       ID shoule be from 0 to final ID.')
         sys.exit(2)
 
     dir_in = sys.argv[1]
--- ./simp.py	(original)
+++ ./simp.py	(refactored)
@@ -18,7 +18,7 @@
         dist = scipy.linalg.norm
         self.adj_mat = scipy.zeros((self.num_atoms, self.num_atoms))
         self.deg_mat = [0] * self.num_atoms
-        for i in xrange(self.num_atoms - 1):
+        for i in range(self.num_atoms - 1):
             for j in range(i + 1, self.num_atoms):
                 if dist(self.coords[i, :] - self.coords[j, :]) <= cutoff:
                     self.deg_mat[i] += 1.0
@@ -33,18 +33,18 @@
 
     def cmpt_hessian(self):
         self.hessian = scipy.zeros((3*self.num_atoms, 3*self.num_atoms))
-        for i in xrange(self.num_atoms - 1):
+        for i in range(self.num_atoms - 1):
             for j in range(i + 1, self.num_atoms):
                 v_ij = self.coords[j, :] - self.coords[i, :]
                 d2 = sum(v_ij * v_ij)
-                for a in xrange(3):
-                    for b in xrange(3):
+                for a in range(3):
+                    for b in range(3):
                         self.hessian[3*i + a, 3*j + b] = -v_ij[a] * v_ij[b] / d2 * self.adj_mat[i, j]
                         self.hessian[3*j + b, 3*i + a] = self.hessian[3*i + a, 3*j + b]
-        for i in xrange(self.num_atoms):
-            for a in xrange(3):
+        for i in range(self.num_atoms):
+            for a in range(3):
                 for b in range(a, 3):
-                    for j in xrange(self.num_atoms):
+                    for j in range(self.num_atoms):
                         if j != i: 
                             self.hessian[3*i + a, 3*i + b] += -self.hessian[3*i + a, 3*j + b]
                     self.hessian[3*i + b, 3*i + a] = self.hessian[3*i + a, 3*i + b]
@@ -59,20 +59,20 @@
         Bfactors = [self.inverse_hessian[3*i,3*i] +
                     self.inverse_hessian[3*i+1, 3*i+1] +
                     self.inverse_hessian[3*i+2, 3*i+2] 
-                    for i in xrange(self.num_atoms)]
+                    for i in range(self.num_atoms)]
         k = sum(self.pdb_Bfactors) / sum(Bfactors)
-        self.Bfactors = [Bfactors[i] * k for i in xrange(self.num_atoms)]
+        self.Bfactors = [Bfactors[i] * k for i in range(self.num_atoms)]
 
     def cmpt_cross_correlation(self):
         self.cross_correlation = scipy.zeros((self.num_atoms, self.num_atoms))
         self.norm_cross_correlation = scipy.zeros((self.num_atoms, self.num_atoms))
-        for i in xrange(self.num_atoms):
+        for i in range(self.num_atoms):
             for j in range(i, self.num_atoms):
                 self.cross_correlation[i, j] = (self.inverse_hessian[3*i, 3*j] + 
                                                 self.inverse_hessian[3*i+1, 3*j+1] +
                                                 self.inverse_hessian[3*i+2, 3*j+2])
                 self.cross_correlation[j, i] = self.cross_correlation[i, j]
-        for i in xrange(self.num_atoms):
+        for i in range(self.num_atoms):
             for j in range(i, self.num_atoms):
                 if i == j:
                     self.norm_cross_correlation[i, i] = 1.0
@@ -101,8 +101,8 @@
             y = float(line[38:46])
             z = float(line[46:54])
         except ValueError:
-            print "Invalid format(coords)"
-            print line
+            print("Invalid format(coords)")
+            print(line)
             quit()
         return (x, y, z)
     return [ext_coords(line) for line in lines]
@@ -112,15 +112,15 @@
         try:
             b = float(line[60:66])
         except ValueError:
-            print "Invalid format(B-factors)"
-            print line
+            print("Invalid format(B-factors)")
+            print(line)
             quit()
         return b
     return [ext_Bfactors(line) for line in lines]
 
 def plot_figs():
     pylab.subplot(221, aspect="equal")
-    X, Y = pylab.meshgrid(range(ins.num_atoms), range(ins.num_atoms))
+    X, Y = pylab.meshgrid(list(range(ins.num_atoms)), list(range(ins.num_atoms)))
     pylab.pcolor(X, Y, ins.norm_cross_correlation)
     pylab.colorbar()
     pylab.clim(-0.15, 0.15)
@@ -136,7 +136,7 @@
     pylab.grid()
 
     pylab.subplot(223, aspect="equal")
-    X, Y = pylab.meshgrid(range(ins.num_atoms), range(ins.num_atoms))
+    X, Y = pylab.meshgrid(list(range(ins.num_atoms)), list(range(ins.num_atoms)))
     pylab.pcolor(X, Y, ins.adj_mat)
     pylab.colorbar()
     pylab.title("Adjacency Mat.")
--- ./st_concatenate.py	(original)
+++ ./st_concatenate.py	(refactored)
@@ -48,7 +48,7 @@
 if __name__ == '__main__':
         
     if len(sys.argv) != 5:
-        print 'Usage: % SCRIPT [input root dir] [name (file prefix)] [output dir] [last run number]'
+        print('Usage: % SCRIPT [input root dir] [name (file prefix)] [output dir] [last run number]')
         sys.exit(2)
 
     dir_in = sys.argv[1]
@@ -57,7 +57,7 @@
     nrun = int(sys.argv[4])
 
     if nrun < 3:
-        print 'Usage: Error nrun < 3'
+        print('Usage: Error nrun < 3')
         sys.exit(2)
 
     st_concatenate(dir_in, dir_out, nrun)
--- ./stprob_summary_bwyv.py	(original)
+++ ./stprob_summary_bwyv.py	(refactored)
@@ -35,7 +35,7 @@
 
     sim_done.add(sim)
 
-    if n_ratio.has_key(key):
+    if key in n_ratio:
         n_ratio[key] = n_ratio[key] + 1
         sum_ratio[key] = sum_ratio[key] + ratio
     else:
@@ -72,7 +72,7 @@
     ratio = float(l[4])
 
     key = ((cM,frc), ihb)
-    if sum2_ratio.has_key(key):
+    if key in sum2_ratio:
         sum2_ratio[key] = sum2_ratio[key] + (ratio - avg_ratio[key]) ** 2
     else:
         sum2_ratio[key] = (ratio - avg_ratio[key]) ** 2
--- ./tobi.py	(original)
+++ ./tobi.py	(refactored)
@@ -27,23 +27,23 @@
         f = open(filename, 'r')
         
         col = f.readline().split()[1:]
-        for i in xrange(ntype):
+        for i in range(ntype):
             l = f.readline()
             lsp = l.split()
             if lsp[0] != col[i]:
-                print 'Error: lsp[0]!=col[0]'
+                print('Error: lsp[0]!=col[0]')
                 sys.exit(2)
-            for m in xrange(ntype):
+            for m in range(ntype):
                 para[(TYPE2I[col[i]],TYPE2I[col[m]])] = float(lsp[m+1])
         f.close()
         
     def _check(self,para):
-        for mn in para.keys():
+        for mn in list(para.keys()):
             nm = (mn[1],mn[0])
             if para[mn] != para[nm]:
-                print 'Error: inconsistent'
-                print 'para[',mn,']=',para[mn]
-                print 'para[',nm,']=',para[nm]
+                print('Error: inconsistent')
+                print('para[',mn,']=',para[mn])
+                print('para[',nm,']=',para[nm])
     
 def get_atom_type(res, atom):
     if atom == 'N':
@@ -99,7 +99,7 @@
     elif res == 'CYS' and atom == 'SG':
         return TYPE2I['CSg']
     else:
-        print 'Error: get_atom_type in tobi.py'
+        print('Error: get_atom_type in tobi.py')
         sys.exit(2)
         
 
@@ -107,7 +107,7 @@
     
     
     if len(sys.argv) != 2:
-        print 'Usage: SCRIPT [input PDB]'
+        print('Usage: SCRIPT [input PDB]')
         sys.exit(2)
         
     import os
@@ -169,10 +169,10 @@
         atoms_chain.append(atoms)
         types_chain.append(types)
     
-    print 'start main'
-    
-    for i in xrange(num_chain):
-        for j in xrange(i+1, num_chain):
+    print('start main')
+    
+    for i in range(num_chain):
+        for j in range(i+1, num_chain):
             energy[(i,j)] = 0.0
             
             #ii=0
@@ -195,8 +195,8 @@
                         energy[(i,j)] += params.r2[(t1,t2)]
                     #print '%i %i %i %i %10.5f' % (ii, jj, t1, t2, ene)
                     
-    for i in xrange(num_chain):
-        for j in xrange(i+1,num_chain):
-            print '%i %i %12.6f' % (i,j,energy[(i,j)])
+    for i in range(num_chain):
+        for j in range(i+1,num_chain):
+            print('%i %i %12.6f' % (i,j,energy[(i,j)]))
                     
             
--- ./tobi_f.py	(original)
+++ ./tobi_f.py	(refactored)
@@ -26,8 +26,8 @@
         self._check(self.r2)
         self.param1 = np.zeros((self.NUM_PARA, self.NUM_PARA))
         self.param2 = np.zeros((self.NUM_PARA, self.NUM_PARA))
-        for i in xrange(self.NUM_PARA):
-            for j in xrange(self.NUM_PARA):
+        for i in range(self.NUM_PARA):
+            for j in range(self.NUM_PARA):
                 self.param1[i,j] = self.r1[(i,j)]
                 self.param2[i,j] = self.r2[(i,j)]
         
@@ -36,23 +36,23 @@
         f = open(filename, 'r')
         
         col = f.readline().split()[1:]
-        for i in xrange(ntype):
+        for i in range(ntype):
             l = f.readline()
             lsp = l.split()
             if lsp[0] != col[i]:
-                print 'Error: lsp[0]!=col[0]'
+                print('Error: lsp[0]!=col[0]')
                 sys.exit(2)
-            for m in xrange(ntype):
+            for m in range(ntype):
                 para[(TYPE2I[col[i]],TYPE2I[col[m]])] = float(lsp[m+1])
         f.close()
         
     def _check(self,para):
-        for mn in para.keys():
+        for mn in list(para.keys()):
             nm = (mn[1],mn[0])
             if para[mn] != para[nm]:
-                print 'Error: inconsistent'
-                print 'para[',mn,']=',para[mn]
-                print 'para[',nm,']=',para[nm]
+                print('Error: inconsistent')
+                print('para[',mn,']=',para[mn])
+                print('para[',nm,']=',para[nm])
     
 def get_atom_type(res, atom):
     if atom == 'N':
@@ -108,7 +108,7 @@
     elif res == 'CYS' and atom == 'SG':
         return TYPE2I['CSg']
     else:
-        print 'Error: get_atom_type in tobi.py'
+        print('Error: get_atom_type in tobi.py')
         sys.exit(2)
         
 def accept_residue(res):
@@ -172,8 +172,8 @@
     xyz = np.zeros((3,max(num_atom),num_chain))
     atom2type = np.zeros( (max(num_atom),num_chain), dtype=np.int)
     
-    for ichain in xrange(num_chain):
-        for iatom in xrange(num_atom[ichain]):
+    for ichain in range(num_chain):
+        for iatom in range(num_atom[ichain]):
             c = atoms_chain[ichain][iatom].get_coord()
             xyz[0,iatom,ichain] = c[0]
             xyz[1,iatom,ichain] = c[1]
@@ -190,8 +190,8 @@
 if __name__ == "__main__":
     
     if not len(sys.argv) in (2,3):
-        print 'Usage: SCRIPT [input PDB]'
-        print 'Usage: SCRIPT [input PDB dir] [output file]'
+        print('Usage: SCRIPT [input PDB]')
+        print('Usage: SCRIPT [input PDB dir] [output file]')
         sys.exit(2)
         
     import os
@@ -202,9 +202,9 @@
     if len(sys.argv) == 2:
         ene = calc_tobi_for_pdb(sys.argv[1])
         
-        for i in xrange(len(ene)):
-            for j in xrange(i+1,len(ene)):
-                print i+1,j+1,ene[i,j]    
+        for i in range(len(ene)):
+            for j in range(i+1,len(ene)):
+                print(i+1,j+1,ene[i,j])    
                 
     elif len(sys.argv) == 3:
         import glob
@@ -216,8 +216,8 @@
             
             ene = calc_tobi_for_pdb(pdbfilepath)
             
-            for i in xrange(len(ene)):
-                for j in xrange(i+1,len(ene)):
+            for i in range(len(ene)):
+                for j in range(i+1,len(ene)):
                     outfile.write('%s %i %i %12.6f\n' 
                       % ( os.path.basename(pdbfilepath)[:-4], i+1, j+1, ene[i,j]))
             
--- ./torsion.py	(original)
+++ ./torsion.py	(refactored)
@@ -51,7 +51,7 @@
 
 
 if __name__ == "__main__":
-    print 'Test of torsion.py'
+    print('Test of torsion.py')
     print ('''
     ATOM  22440  C4'   G A   0      24.717  92.775  96.702  1.00 31.19           C
     ATOM  22458  P     A A   1      22.332  94.740  95.607  1.00 34.55           P
@@ -66,13 +66,13 @@
     d = np.array([ 18.954 , 96.788 , 90.471])
     e = np.array([ 19.175 , 99.605 , 87.735])
 
-    print "Torsion of C4'-P-C4'-P"
-    print '  flg_360=False(default): %f rad, %f deg' % (torsion(a,b,c,d), torsion(a,b,c,d,True))
-    print '  flg_360=True          : %f rad, %f deg' % (torsion(a,b,c,d,flg_360=True), torsion(a,b,c,d,True,flg_360=True))
-    print '  cos(phi), sin(phi)    : x = %f, y = %f' % torsion_xy(a,b,c,d)
+    print("Torsion of C4'-P-C4'-P")
+    print('  flg_360=False(default): %f rad, %f deg' % (torsion(a,b,c,d), torsion(a,b,c,d,True)))
+    print('  flg_360=True          : %f rad, %f deg' % (torsion(a,b,c,d,flg_360=True), torsion(a,b,c,d,True,flg_360=True)))
+    print('  cos(phi), sin(phi)    : x = %f, y = %f' % torsion_xy(a,b,c,d))
 
-    print "Torsion of P-C4'-P-C4'"
-    print '  flg_360=False(default): %f rad, %f deg' % (torsion(b,c,d,e), torsion(b,c,d,e,True))
-    print '  flg_360=True          : %f rad, %f deg' % (torsion(b,c,d,e,flg_360=True), torsion(b,c,d,e,True,flg_360=True))
-    print '  cos(phi), sin(phi)    : x = %f, y = %f' % torsion_xy(b,c,d,e)
+    print("Torsion of P-C4'-P-C4'")
+    print('  flg_360=False(default): %f rad, %f deg' % (torsion(b,c,d,e), torsion(b,c,d,e,True)))
+    print('  flg_360=True          : %f rad, %f deg' % (torsion(b,c,d,e,flg_360=True), torsion(b,c,d,e,True,flg_360=True)))
+    print('  cos(phi), sin(phi)    : x = %f, y = %f' % torsion_xy(b,c,d,e))
 
--- ./ts_calc_cv.py	(original)
+++ ./ts_calc_cv.py	(refactored)
@@ -15,7 +15,7 @@
 
 if __name__ == '__main__':
     if len(sys.argv) != 5:
-        print 'Usage: %SCRIPT [search query (use "")] [skip] [end] [Energy cutoff]'
+        print('Usage: %SCRIPT [search query (use "")] [skip] [end] [Energy cutoff]')
         sys.exit(2)
 
     nframe_skip = int(sys.argv[2])
@@ -60,5 +60,5 @@
             n += 1
 
         fn = float(n)
-        print temp, ((e_sq/fn - (e/fn)**2) / (BOLTZC*temp*temp))
+        print(temp, ((e_sq/fn - (e/fn)**2) / (BOLTZC*temp*temp)))
 
--- ./ts_concatenate.py	(original)
+++ ./ts_concatenate.py	(refactored)
@@ -57,7 +57,7 @@
             iline = 0
    
     if iline != 0:
-        print 'Error: iline != 0, irun = ',irun
+        print('Error: iline != 0, irun = ',irun)
      
     f_in.close()
    
@@ -93,7 +93,7 @@
                 iline = 0
      
         if iline != 0:
-            print 'Error: iline != 0, irun = ',irun
+            print('Error: iline != 0, irun = ',irun)
      
         f_in.close()
      
@@ -105,7 +105,7 @@
 if __name__ == '__main__':
         
     if len(sys.argv) != 4:
-        print 'Usage: % SCRIPT [input root dir] [output dir] [last run number]'
+        print('Usage: % SCRIPT [input root dir] [output dir] [last run number]')
         sys.exit(2)
 
     dir_in = sys.argv[1]
@@ -113,7 +113,7 @@
     nrun = int(sys.argv[3])
 
     if nrun < 3:
-        print 'Usage: Error nrun < 3'
+        print('Usage: Error nrun < 3')
         sys.exit(2)
 
     ts_concatenate(dir_in, dir_out, nrun)
--- ./ts_concatenate_vpk.py	(original)
+++ ./ts_concatenate_vpk.py	(refactored)
@@ -62,7 +62,7 @@
 if __name__ == '__main__':
         
     if len(sys.argv) != 4:
-        print 'Usage: % SCRIPT [input root dir] [output dir] [last run number]'
+        print('Usage: % SCRIPT [input root dir] [output dir] [last run number]')
         sys.exit(2)
 
     dir_in = sys.argv[1]
@@ -70,7 +70,7 @@
     nrun = int(sys.argv[3])
 
     if nrun < 3:
-        print 'Usage: Error nrun < 3'
+        print('Usage: Error nrun < 3')
         sys.exit(2)
 
     ts_concatenate(dir_in, dir_out, nrun)
--- ./ts_split_unit.py	(original)
+++ ./ts_split_unit.py	(refactored)
@@ -8,7 +8,7 @@
 import sys
 
 if len(sys.argv) != 2:
-    print ' Usage: % SCRIPT [ts file]'
+    print(' Usage: % SCRIPT [ts file]')
     sys.exit(2)
     
 tsfilename = sys.argv[1]
--- ./elements/error.py	(original)
+++ ./elements/error.py	(refactored)
@@ -10,6 +10,6 @@
         self._title = title
         
     def show(self):
-        print 'class:', self._class
-        print 'function:', self._func
-        print 'matter:', self._title
+        print('class:', self._class)
+        print('function:', self._func)
+        print('matter:', self._title)
--- ./elements/ninfo.py	(original)
+++ ./elements/ninfo.py	(refactored)
@@ -21,18 +21,18 @@
         self.type = type_str
 
     def show(self):
-        print 'id',self.id
-        print 'iunit1',self.iunit1
-        print 'iunit2',self.iunit2
-        print 'imp1',self.imp1
-        print 'imp2',self.imp2
-        print 'imp1un',self.imp1un
-        print 'imp2un',self.imp2un
-        print 'native',self.native
-        print 'factor',self.factor
-        print 'correct_mgo',self.correct_mgo
-        print 'coef',self.coef
-        print 'type',self.type
+        print('id',self.id)
+        print('iunit1',self.iunit1)
+        print('iunit2',self.iunit2)
+        print('imp1',self.imp1)
+        print('imp2',self.imp2)
+        print('imp1un',self.imp1un)
+        print('imp2un',self.imp2un)
+        print('native',self.native)
+        print('factor',self.factor)
+        print('correct_mgo',self.correct_mgo)
+        print('coef',self.coef)
+        print('type',self.type)
         
 #**      ibd iunit1-iunit2   imp1 - imp2 imp1un-imp2un      bd_nat    factor_bd  correct_mgo      coef_bd
 #bond      1      1      1      1      2      1      2       3.8531       1.0000       1.0000     110.4000 pp
@@ -77,8 +77,8 @@
     
     def show(self):
         Ninfo.show(self)
-        print 'imp3',self.imp3
-        print 'imp3un',self.imp3un
+        print('imp3',self.imp3)
+        print('imp3un',self.imp3un)
 
 class Dihedral(Ninfo):
 #**     idih iunit1-iunit2   imp1 - imp2 - imp3 - imp4 imp1un-imp2un-imp3un-imp4un      dih_nat   factor_dih  correct_mgo   coef_dih_1   coef_dih_3
@@ -100,11 +100,11 @@
     
     def show(self):
         Ninfo.show(self)
-        print 'imp3',self.imp3
-        print 'imp4',self.imp4
-        print 'imp3un',self.imp3un
-        print 'imp4un',self.imp4un
-        print 'coef_3',self.coef_3
+        print('imp3',self.imp3)
+        print('imp4',self.imp4)
+        print('imp3un',self.imp3un)
+        print('imp4un',self.imp4un)
+        print('coef_3',self.coef_3)
 
 class Contact(Ninfo):
     _counter = 0
@@ -648,8 +648,8 @@
     def dict_of_ninfoset_by_unit(self):
         di = {}
         self.update_info()
-        for i in xrange(1, self.max_unit+1):
-            for j in xrange(i, self.max_unit+1):
+        for i in range(1, self.max_unit+1):
+            for j in range(i, self.max_unit+1):
                 ns = NinfoSet()
                 di[(i,j)] = ns
         for bl in self.bondlengths:
--- ./elements/pdb.py	(original)
+++ ./elements/pdb.py	(refactored)
@@ -21,18 +21,18 @@
         self.charge = 0
         
     def show(self):
-        print 'serial:', self.serial
-        print 'name:', self.name
-        print 'alt_loc:', self.alt_loc
-        print 'res_name:', self.res_name
-        print 'chain_id:', self.chain_id
-        print 'res_seq:', self.res_seq
-        print 'ins_code', self.ins_code
-        print 'xyz', self.xyz.x, self.xyz.y, self.xyz.z
-        print 'occupancy', self.occupancy
-        print 'temp_factor', self.temp_factor
-        print 'element', self.element
-        print 'charge', self.charge
+        print('serial:', self.serial)
+        print('name:', self.name)
+        print('alt_loc:', self.alt_loc)
+        print('res_name:', self.res_name)
+        print('chain_id:', self.chain_id)
+        print('res_seq:', self.res_seq)
+        print('ins_code', self.ins_code)
+        print('xyz', self.xyz.x, self.xyz.y, self.xyz.z)
+        print('occupancy', self.occupancy)
+        print('temp_factor', self.temp_factor)
+        print('element', self.element)
+        print('charge', self.charge)
         
 class Residue :
     def __init__(self):
@@ -63,7 +63,7 @@
     def push_residue(self, r):
         residue_id = len(self.residues)
         num_atom = len(r.atoms)
-        for i in xrange(num_atom):
+        for i in range(num_atom):
             self._where_is_atomX.append((residue_id, i))
         self.residues.append(r)
         
--- ./elements/psf.py	(original)
+++ ./elements/psf.py	(refactored)
@@ -18,10 +18,10 @@
         self.unused = 0
     
     def show(self):
-        print (self.atom_id, self.seg_name, 
+        print((self.atom_id, self.seg_name, 
                self.res_id, self.res_name,
                self.atom_name, self.atom_type,
-               self.charge, self.mass, self.unused)
+               self.charge, self.mass, self.unused))
 
 class Psf(object):
     '''
@@ -48,9 +48,9 @@
     def show(self):
         for atom in self.atoms :
             atom.show()
-        print self.bonds
-        print self.angles
-        print self.dihedrals
-        print self.impropers
-        print self.crossterms
+        print(self.bonds)
+        print(self.angles)
+        print(self.dihedrals)
+        print(self.impropers)
+        print(self.crossterms)
         
--- ./file_io/coord.py	(original)
+++ ./file_io/coord.py	(refactored)
@@ -40,7 +40,7 @@
         self._file.read(8)  # 0.000
         z = struct.unpack('d' * self._nmp, self._file.read(8*self._nmp))
         
-        for i in xrange(self._nmp) :
+        for i in range(self._nmp) :
             xyz = [x[i], y[i], z[i]]
             coord_matrix.append(xyz)
         
@@ -50,7 +50,7 @@
         self._file.seek(3*8*(self._nmp+1), os.SEED_CUR)
      
     def skip(self, num):
-        for i in xrange(num):
+        for i in range(num):
             self.skip_onestep()
        
     def write_onestep(self, coord_matrix):
@@ -81,7 +81,7 @@
 
     def _read_at(self, num):
         self._file.seek(0)
-        for i in xrange(num - 1) :
+        for i in range(num - 1) :
             self.read_onestep()
         return self.read_onestep()
         
--- ./file_io/dcd.py	(original)
+++ ./file_io/dcd.py	(refactored)
@@ -24,21 +24,21 @@
         self.with_unit_cell = False
         
     def show(self):
-        print 'format', self.format
+        print('format', self.format)
         if self.title is not None:
             for line in self.title :
-                print line
-        print 'nset', self.nset
-        print 'istart', self.istart
-        print 'nstep_save', self.nstep_save
-        print 'nstep', self.nstep
-        print 'nunit_real', self.nunit_real
-        print 'delta', self.delta
-        print 'tempk', self.tempk
+                print(line)
+        print('nset', self.nset)
+        print('istart', self.istart)
+        print('nstep_save', self.nstep_save)
+        print('nstep', self.nstep)
+        print('nunit_real', self.nunit_real)
+        print('delta', self.delta)
+        print('tempk', self.tempk)
         if self.nunit_real is not None:
-            for i in xrange(self.nunit_real) :
-                print 'lunit2mp[', i, ']', self.lunit2mp[i]
-        print 'nmp_real', self.nmp_real
+            for i in range(self.nunit_real) :
+                print('lunit2mp[', i, ']', self.lunit2mp[i])
+        print('nmp_real', self.nmp_real)
         
 class DcdFile :
     def __init__(self, filename) :
@@ -110,7 +110,7 @@
             #self._header.tempk = float(bdata[3].strip('\0 '))
             self._header.tempk = float(bdata[3])
             self._header.lunit2mp = []
-            for i in xrange(self._header.nunit_real) :
+            for i in range(self._header.nunit_real) :
     #            self._header.lunit2mp.append(int(bdata[i + 4].strip('\0 ')))
                 self._header.lunit2mp.append(int(bdata[i + 4]))
                 
@@ -140,7 +140,7 @@
             nline = (size - 4) / 80
             bdata = struct.unpack(('i' + '80s' * nline), b)
             self._header.title = []
-            for i in xrange(nline):
+            for i in range(nline):
                 self._header.title.append(bdata[i+1])
                 
             # nmp_real
@@ -181,7 +181,7 @@
         
         p = struct.pack('80s', str(self._header.tempk))
         binary += re_null.sub(' ', p)
-        for i in xrange(self._header.nunit_real) :
+        for i in range(self._header.nunit_real) :
             p = struct.pack('80s', str(self._header.lunit2mp[i]))
             binary += re_null.sub(' ', p)
             
@@ -219,7 +219,7 @@
         b = self._pick_data()
         z = struct.unpack('f' * self._header.nmp_real, b)
         
-        for i in xrange(self._header.nmp_real) :
+        for i in range(self._header.nmp_real) :
             xyz = [x[i], y[i], z[i]]
             coord_matrix.append(xyz)
         
@@ -279,7 +279,7 @@
             raise EOFError('EOF in a middle of dcd.skip_onestep().')
 
     def skip(self, num):
-        for i in xrange(num):
+        for i in range(num):
             self.skip_onestep()
        
     def write_onestep(self, coord_matrix):
@@ -333,7 +333,7 @@
     def _read_at(self, num):
         self._file.seek(0)
         self.read_header()
-        for i in xrange(num - 1) :
+        for i in range(num - 1) :
             self.read_onestep()
         return self.read_onestep()
         
--- ./file_io/drid.py	(original)
+++ ./file_io/drid.py	(refactored)
@@ -21,14 +21,14 @@
         self.n_centroids = lambda: self.mask.shape[0]
         
     def show(self):
-        print self.title
+        print(self.title)
         #print '#(centroid)', len(self.centroids)
         #print '#(atom)', len(self.atoms)
-        print '#(centroids)', len(self.mask.shape[0])
-        print '#(atoms)', len(self.mask.shape[1])
-        print '##### Mask #####'
-        print self.mask
-        print '##### Mask #####'
+        print('#(centroids)', len(self.mask.shape[0]))
+        print('#(atoms)', len(self.mask.shape[1]))
+        print('##### Mask #####')
+        print(self.mask)
+        print('##### Mask #####')
         #for i in xrange(len(self.centroids)) :
         #    print 'centroid %i %i' % (i,self.centroids[i])
         #for i in xrange(len(self.atoms)) :
@@ -68,8 +68,8 @@
         self._header.version = int( self._header.title[3:] )
             
         if self._header.version != 2:
-            print 'Caution: This is not DRID ver.2 format!!'
-            print self._header.title
+            print('Caution: This is not DRID ver.2 format!!')
+            print(self._header.title)
 
         if self._header.version == 1:
             # centroids 
@@ -161,7 +161,7 @@
         self._file.seek(4+num, os.SEEK_CUR)
      
     def skip(self, num):
-        for i in xrange(num):
+        for i in range(num):
             self.skip_onestep()
        
     def write_onestep(self, data):
@@ -197,7 +197,7 @@
     def _read_at(self, num):
         self._file.seek(0)
         self.read_header()
-        for i in xrange(num - 1) :
+        for i in range(num - 1) :
             self.read_onestep()
         return self.read_onestep()
         
--- ./file_io/func_line2ninfo.py	(original)
+++ ./file_io/func_line2ninfo.py	(refactored)
@@ -12,22 +12,22 @@
     num = len(line.split())
     if num != 12 and num != 13:
         raise MyError("func_line2ninfo", "line2bondlength", "")
-    if it.next() != 'bond' :
+    if next(it) != 'bond' :
         raise MyError("func_line2ninfo", "line2bondlength", "This line is not bondlength.")
     info = BondLength()
-    info.id = int(it.next())
-    info.iunit1 = int(it.next())
-    info.iunit2 = int(it.next())
-    info.imp1 = int(it.next())
-    info.imp2 = int(it.next())
-    info.imp1un = int(it.next())
-    info.imp2un = int(it.next())
-    info.native = float(it.next())
-    info.factor = float(it.next())
-    info.correct_mgo = float(it.next())
-    info.coef = float(it.next())
+    info.id = int(next(it))
+    info.iunit1 = int(next(it))
+    info.iunit2 = int(next(it))
+    info.imp1 = int(next(it))
+    info.imp2 = int(next(it))
+    info.imp1un = int(next(it))
+    info.imp2un = int(next(it))
+    info.native = float(next(it))
+    info.factor = float(next(it))
+    info.correct_mgo = float(next(it))
+    info.coef = float(next(it))
     if num == 13:
-        info.type = it.next()
+        info.type = next(it)
     return info
 
 def line2bondangle(line) :
@@ -35,24 +35,24 @@
     num = len(line.split())
     if num != 14 and num != 15:
         raise MyError("func_line2ninfo", "line2bondangle", "")
-    if it.next() != 'angl' :
+    if next(it) != 'angl' :
         raise MyError("func_line2ninfo", "line2bondangle", "This line is not bondangle.")
     info = BondAngle()
-    info.id = int(it.next())
-    info.iunit1 = int(it.next())
-    info.iunit2 = int(it.next())
-    info.imp1 = int(it.next())
-    info.imp2 = int(it.next())
-    info.imp3 = int(it.next())
-    info.imp1un = int(it.next())
-    info.imp2un = int(it.next())
-    info.imp3un = int(it.next())
-    info.native = float(it.next())
-    info.factor = float(it.next())
-    info.correct_mgo = float(it.next())
-    info.coef = float(it.next())
+    info.id = int(next(it))
+    info.iunit1 = int(next(it))
+    info.iunit2 = int(next(it))
+    info.imp1 = int(next(it))
+    info.imp2 = int(next(it))
+    info.imp3 = int(next(it))
+    info.imp1un = int(next(it))
+    info.imp2un = int(next(it))
+    info.imp3un = int(next(it))
+    info.native = float(next(it))
+    info.factor = float(next(it))
+    info.correct_mgo = float(next(it))
+    info.coef = float(next(it))
     if num == 15:
-        info.type = it.next()
+        info.type = next(it)
     return info
 
  
@@ -61,27 +61,27 @@
     num = len(line.split())
     if num != 17 and num != 18:
         raise MyError("func_line2ninfo", "line2dihedral", "")
-    if it.next() != 'dihd' :
+    if next(it) != 'dihd' :
         raise MyError("func_line2ninfo", "line2dihedral", "This line is not dihedral.")
     info = Dihedral()
-    info.id = int(it.next())
-    info.iunit1 = int(it.next())
-    info.iunit2 = int(it.next())
-    info.imp1 = int(it.next())
-    info.imp2 = int(it.next())
-    info.imp3 = int(it.next())
-    info.imp4 = int(it.next())
-    info.imp1un = int(it.next())
-    info.imp2un = int(it.next())
-    info.imp3un = int(it.next())
-    info.imp4un = int(it.next())
-    info.native = float(it.next())
-    info.factor = float(it.next())
-    info.correct_mgo = float(it.next())
-    info.coef = float(it.next())
-    info.coef_3 = float(it.next())
+    info.id = int(next(it))
+    info.iunit1 = int(next(it))
+    info.iunit2 = int(next(it))
+    info.imp1 = int(next(it))
+    info.imp2 = int(next(it))
+    info.imp3 = int(next(it))
+    info.imp4 = int(next(it))
+    info.imp1un = int(next(it))
+    info.imp2un = int(next(it))
+    info.imp3un = int(next(it))
+    info.imp4un = int(next(it))
+    info.native = float(next(it))
+    info.factor = float(next(it))
+    info.correct_mgo = float(next(it))
+    info.coef = float(next(it))
+    info.coef_3 = float(next(it))
     if num == 18:
-        info.type = it.next()
+        info.type = next(it)
     return info
 
 
@@ -90,22 +90,22 @@
     num = len(line.split())
     if num != 12 and num != 13:
         raise MyError("func_line2ninfo", "line2contact", "")
-    if it.next() != 'contact' :
+    if next(it) != 'contact' :
         raise MyError("func_line2ninfo", "line2contact", "This line is not contact.")
     info = Contact()
-    info.id = int(it.next())
-    info.iunit1 = int(it.next())
-    info.iunit2 = int(it.next())
-    info.imp1 = int(it.next())
-    info.imp2 = int(it.next())
-    info.imp1un = int(it.next())
-    info.imp2un = int(it.next())
-    info.native = float(it.next())
-    info.factor = float(it.next())
-    info.dummy = int(it.next())
-    info.coef = float(it.next())
+    info.id = int(next(it))
+    info.iunit1 = int(next(it))
+    info.iunit2 = int(next(it))
+    info.imp1 = int(next(it))
+    info.imp2 = int(next(it))
+    info.imp1un = int(next(it))
+    info.imp2un = int(next(it))
+    info.native = float(next(it))
+    info.factor = float(next(it))
+    info.dummy = int(next(it))
+    info.coef = float(next(it))
     if num == 13:
-        info.type = it.next()
+        info.type = next(it)
     return info
 
 def line2basepair(line) :
@@ -113,22 +113,22 @@
     num = len(line.split())
     if num != 14 :
         raise MyError("func_line2ninfo", "line2basepair", "")
-    if it.next() != 'basepair' :
+    if next(it) != 'basepair' :
         raise MyError("func_line2ninfo", "line2basepair", "This line is not basepair")
     info = BasePair()
-    info.id = int(it.next())
-    info.iunit1 = int(it.next())
-    info.iunit2 = int(it.next())
-    info.imp1 = int(it.next())
-    info.imp2 = int(it.next())
-    info.imp1un = int(it.next())
-    info.imp2un = int(it.next())
-    info.native = float(it.next())
-    info.factor = float(it.next())
-    info.dummy = int(it.next())
-    info.coef = float(it.next())
-    info.type = it.next()
-    info.nhb = int(it.next())
+    info.id = int(next(it))
+    info.iunit1 = int(next(it))
+    info.iunit2 = int(next(it))
+    info.imp1 = int(next(it))
+    info.imp2 = int(next(it))
+    info.imp1un = int(next(it))
+    info.imp2un = int(next(it))
+    info.native = float(next(it))
+    info.factor = float(next(it))
+    info.dummy = int(next(it))
+    info.coef = float(next(it))
+    info.type = next(it)
+    info.nhb = int(next(it))
     return info
 
 def line2basestack(line) :
@@ -136,21 +136,21 @@
     num = len(line.split())
     if num != 13 :
         raise MyError("func_line2ninfo", "line2basestack", "")
-    if it.next() != 'basestack' :
+    if next(it) != 'basestack' :
         raise MyError("func_line2ninfo", "line2basestack", "This line is not basestack")
     info = BaseStack()
-    info.id = int(it.next())
-    info.iunit1 = int(it.next())
-    info.iunit2 = int(it.next())
-    info.imp1 = int(it.next())
-    info.imp2 = int(it.next())
-    info.imp1un = int(it.next())
-    info.imp2un = int(it.next())
-    info.native = float(it.next())
-    info.factor = float(it.next())
-    info.dummy = int(it.next())
-    info.coef = float(it.next())
-    info.type = it.next()
+    info.id = int(next(it))
+    info.iunit1 = int(next(it))
+    info.iunit2 = int(next(it))
+    info.imp1 = int(next(it))
+    info.imp2 = int(next(it))
+    info.imp1un = int(next(it))
+    info.imp2un = int(next(it))
+    info.native = float(next(it))
+    info.factor = float(next(it))
+    info.dummy = int(next(it))
+    info.coef = float(next(it))
+    info.type = next(it)
     return info
 
 
@@ -159,20 +159,20 @@
     num = len(line.split())
     if num != 12 :
         raise MyError("func_line2ninfo", "line2basestackDT", "")
-    if it.next() != 'bs-dist':
+    if next(it) != 'bs-dist':
         raise MyError("func_line2ninfo", "line2basestackDT", "This line is not bs-dist")
     info = BaseStackDT()
-    info.id = int(it.next())
-    info.iunit1 = int(it.next())
-    info.iunit2 = int(it.next())
-    info.imp1 = int(it.next())
-    info.imp2 = int(it.next())
-    info.imp1un = int(it.next())
-    info.imp2un = int(it.next())
-    info.factor = float(it.next())
-    info.native = float(it.next())
-    info.coef = float(it.next())
-    info.type = it.next()
+    info.id = int(next(it))
+    info.iunit1 = int(next(it))
+    info.iunit2 = int(next(it))
+    info.imp1 = int(next(it))
+    info.imp2 = int(next(it))
+    info.imp1un = int(next(it))
+    info.imp2un = int(next(it))
+    info.factor = float(next(it))
+    info.native = float(next(it))
+    info.coef = float(next(it))
+    info.type = next(it)
     info.dih1_id = None
     info.dih2_id = None
     return info
@@ -183,21 +183,21 @@
     num = len(line.split())
     if num != 13 :
         raise MyError("func_line2ninfo", "line2tertiarystackDT", "")
-    if it.next() != 'tbs-dist':
+    if next(it) != 'tbs-dist':
         raise MyError("func_line2ninfo", "line2tertiarystackDT", "This line is not tbs-dist")
     info = TertiaryStackDT()
-    info.id = int(it.next())
-    info.iunit1 = int(it.next())
-    info.iunit2 = int(it.next())
-    info.imp1 = int(it.next())
-    info.imp2 = int(it.next())
-    info.imp1un = int(it.next())
-    info.imp2un = int(it.next())
-    info.factor = float(it.next())
-    info.native = float(it.next())
-    info.coef = float(it.next())
-    info.excess1 = int(it.next())
-    info.excess2 = int(it.next())
+    info.id = int(next(it))
+    info.iunit1 = int(next(it))
+    info.iunit2 = int(next(it))
+    info.imp1 = int(next(it))
+    info.imp2 = int(next(it))
+    info.imp1un = int(next(it))
+    info.imp2un = int(next(it))
+    info.factor = float(next(it))
+    info.native = float(next(it))
+    info.coef = float(next(it))
+    info.excess1 = int(next(it))
+    info.excess2 = int(next(it))
 
     info.ang1_id = None
     info.ang2_id = None
@@ -212,28 +212,28 @@
     num = len(line.split())
     if num < 14 :
         raise MyError("func_line2ninfo", "line2hbondDT", "")
-    if it.next() != 'hb-dist':
+    if next(it) != 'hb-dist':
         raise MyError("func_line2ninfo", "line2hbondDT", "This line is not hb-dist")
     info = HBondDT()
-    info.id = int(it.next())
-    info.iunit1 = int(it.next())
-    info.iunit2 = int(it.next())
-    info.imp1 = int(it.next())
-    info.imp2 = int(it.next())
-    info.imp1un = int(it.next())
-    info.imp2un = int(it.next())
-    info.factor = float(it.next())
-    info.native = float(it.next())
-    info.coef = float(it.next())
-    info.sectert = it.next()
-    info.nHB = int(it.next())
+    info.id = int(next(it))
+    info.iunit1 = int(next(it))
+    info.iunit2 = int(next(it))
+    info.imp1 = int(next(it))
+    info.imp2 = int(next(it))
+    info.imp1un = int(next(it))
+    info.imp2un = int(next(it))
+    info.factor = float(next(it))
+    info.native = float(next(it))
+    info.coef = float(next(it))
+    info.sectert = next(it)
+    info.nHB = int(next(it))
     info.atoms1 = []
     info.atoms2 = []
     try:
         while (True):
-            a = it.next()
+            a = next(it)
             info.atoms1.append(a)
-            a = it.next()
+            a = next(it)
             info.atoms2.append(a)
     except:
         pass
--- ./file_io/ninfo.py	(original)
+++ ./file_io/ninfo.py	(refactored)
@@ -60,41 +60,41 @@
             if line[0:7] == 'bs-dihd':
                 lsp = line.split()
                 itr = iter(lsp)
-                itr.next() # 'bs-dihd'
-                ibs = int(itr.next())
+                next(itr) # 'bs-dihd'
+                ibs = int(next(itr))
                 for bs in ni.basestackDTs:
                     if bs.id == ibs:
                         if bs.dih1_id is None:
-                            bs.dih1_id = int(itr.next())
-                            bs.dih1_iunit1 = int(itr.next())
-                            bs.dih1_iunit2 = int(itr.next())
-                            bs.dih1_imp1 = int(itr.next()) 
-                            bs.dih1_imp2 = int(itr.next())
-                            bs.dih1_imp3 = int(itr.next())
-                            bs.dih1_imp4 = int(itr.next())
-                            bs.dih1_imp1un = int(itr.next()) 
-                            bs.dih1_imp2un = int(itr.next())
-                            bs.dih1_imp3un = int(itr.next())
-                            bs.dih1_imp4un = int(itr.next())
-                            bs.dih1_native = float(itr.next())
-                            bs.dih1_coef   = float(itr.next())
-                            bs.dih1_type = itr.next()
+                            bs.dih1_id = int(next(itr))
+                            bs.dih1_iunit1 = int(next(itr))
+                            bs.dih1_iunit2 = int(next(itr))
+                            bs.dih1_imp1 = int(next(itr)) 
+                            bs.dih1_imp2 = int(next(itr))
+                            bs.dih1_imp3 = int(next(itr))
+                            bs.dih1_imp4 = int(next(itr))
+                            bs.dih1_imp1un = int(next(itr)) 
+                            bs.dih1_imp2un = int(next(itr))
+                            bs.dih1_imp3un = int(next(itr))
+                            bs.dih1_imp4un = int(next(itr))
+                            bs.dih1_native = float(next(itr))
+                            bs.dih1_coef   = float(next(itr))
+                            bs.dih1_type = next(itr)
 
                         elif bs.dih2_id is None:
-                            bs.dih2_id = int(itr.next())
-                            bs.dih2_iunit1 = int(itr.next())
-                            bs.dih2_iunit2 = int(itr.next())
-                            bs.dih2_imp1 = int(itr.next()) 
-                            bs.dih2_imp2 = int(itr.next())
-                            bs.dih2_imp3 = int(itr.next())
-                            bs.dih2_imp4 = int(itr.next())
-                            bs.dih2_imp1un = int(itr.next()) 
-                            bs.dih2_imp2un = int(itr.next())
-                            bs.dih2_imp3un = int(itr.next())
-                            bs.dih2_imp4un = int(itr.next())
-                            bs.dih2_native = float(itr.next())
-                            bs.dih2_coef   = float(itr.next())
-                            bs.dih2_type = itr.next()
+                            bs.dih2_id = int(next(itr))
+                            bs.dih2_iunit1 = int(next(itr))
+                            bs.dih2_iunit2 = int(next(itr))
+                            bs.dih2_imp1 = int(next(itr)) 
+                            bs.dih2_imp2 = int(next(itr))
+                            bs.dih2_imp3 = int(next(itr))
+                            bs.dih2_imp4 = int(next(itr))
+                            bs.dih2_imp1un = int(next(itr)) 
+                            bs.dih2_imp2un = int(next(itr))
+                            bs.dih2_imp3un = int(next(itr))
+                            bs.dih2_imp4un = int(next(itr))
+                            bs.dih2_native = float(next(itr))
+                            bs.dih2_coef   = float(next(itr))
+                            bs.dih2_type = next(itr)
 
                         else:
                             print ('Error dih1 and dih2 are occupied')
@@ -118,35 +118,35 @@
             if line[0:8] == 'tbs-angl':
                 lsp = line.split()
                 itr = iter(lsp)
-                itr.next() # 'tbs-angl'
-                ibs = int(itr.next())
+                next(itr) # 'tbs-angl'
+                ibs = int(next(itr))
                 for bs in ni.tertiarystackDTs:
                     if bs.id == ibs:
                         if bs.ang1_id is None:
-                            bs.ang1_id = int(itr.next())
-                            bs.ang1_iunit1 = int(itr.next())
-                            bs.ang1_iunit2 = int(itr.next())
-                            bs.ang1_imp1 = int(itr.next()) 
-                            bs.ang1_imp2 = int(itr.next())
-                            bs.ang1_imp3 = int(itr.next())
-                            bs.ang1_imp1un = int(itr.next()) 
-                            bs.ang1_imp2un = int(itr.next())
-                            bs.ang1_imp3un = int(itr.next())
-                            bs.ang1_native = float(itr.next())
-                            bs.ang1_coef   = float(itr.next())
+                            bs.ang1_id = int(next(itr))
+                            bs.ang1_iunit1 = int(next(itr))
+                            bs.ang1_iunit2 = int(next(itr))
+                            bs.ang1_imp1 = int(next(itr)) 
+                            bs.ang1_imp2 = int(next(itr))
+                            bs.ang1_imp3 = int(next(itr))
+                            bs.ang1_imp1un = int(next(itr)) 
+                            bs.ang1_imp2un = int(next(itr))
+                            bs.ang1_imp3un = int(next(itr))
+                            bs.ang1_native = float(next(itr))
+                            bs.ang1_coef   = float(next(itr))
 
                         elif bs.ang2_id is None:
-                            bs.ang2_id = int(itr.next())
-                            bs.ang2_iunit1 = int(itr.next())
-                            bs.ang2_iunit2 = int(itr.next())
-                            bs.ang2_imp1 = int(itr.next()) 
-                            bs.ang2_imp2 = int(itr.next())
-                            bs.ang2_imp3 = int(itr.next())
-                            bs.ang2_imp1un = int(itr.next()) 
-                            bs.ang2_imp2un = int(itr.next())
-                            bs.ang2_imp3un = int(itr.next())
-                            bs.ang2_native = float(itr.next())
-                            bs.ang2_coef   = float(itr.next())
+                            bs.ang2_id = int(next(itr))
+                            bs.ang2_iunit1 = int(next(itr))
+                            bs.ang2_iunit2 = int(next(itr))
+                            bs.ang2_imp1 = int(next(itr)) 
+                            bs.ang2_imp2 = int(next(itr))
+                            bs.ang2_imp3 = int(next(itr))
+                            bs.ang2_imp1un = int(next(itr)) 
+                            bs.ang2_imp2un = int(next(itr))
+                            bs.ang2_imp3un = int(next(itr))
+                            bs.ang2_native = float(next(itr))
+                            bs.ang2_coef   = float(next(itr))
 
                         else:
                             print ('Error ang1 and ang2 are occupied')
@@ -157,54 +157,54 @@
             if line[0:8] == 'tbs-dihd':
                 lsp = line.split()
                 itr = iter(lsp)
-                itr.next() # 'tbs-dihd'
-                ibs = int(itr.next())
+                next(itr) # 'tbs-dihd'
+                ibs = int(next(itr))
                 for bs in ni.tertiarystackDTs:
                     if bs.id == ibs:
                         if bs.dih0_id is None:
-                            bs.dih0_id = int(itr.next())
-                            bs.dih0_iunit1 = int(itr.next())
-                            bs.dih0_iunit2 = int(itr.next())
-                            bs.dih0_imp1 = int(itr.next()) 
-                            bs.dih0_imp2 = int(itr.next())
-                            bs.dih0_imp3 = int(itr.next())
-                            bs.dih0_imp4 = int(itr.next())
-                            bs.dih0_imp1un = int(itr.next()) 
-                            bs.dih0_imp2un = int(itr.next())
-                            bs.dih0_imp3un = int(itr.next())
-                            bs.dih0_imp4un = int(itr.next())
-                            bs.dih0_native = float(itr.next())
-                            bs.dih0_coef   = float(itr.next())
+                            bs.dih0_id = int(next(itr))
+                            bs.dih0_iunit1 = int(next(itr))
+                            bs.dih0_iunit2 = int(next(itr))
+                            bs.dih0_imp1 = int(next(itr)) 
+                            bs.dih0_imp2 = int(next(itr))
+                            bs.dih0_imp3 = int(next(itr))
+                            bs.dih0_imp4 = int(next(itr))
+                            bs.dih0_imp1un = int(next(itr)) 
+                            bs.dih0_imp2un = int(next(itr))
+                            bs.dih0_imp3un = int(next(itr))
+                            bs.dih0_imp4un = int(next(itr))
+                            bs.dih0_native = float(next(itr))
+                            bs.dih0_coef   = float(next(itr))
 
                         elif bs.dih1_id is None:
-                            bs.dih1_id = int(itr.next())
-                            bs.dih1_iunit1 = int(itr.next())
-                            bs.dih1_iunit2 = int(itr.next())
-                            bs.dih1_imp1 = int(itr.next()) 
-                            bs.dih1_imp2 = int(itr.next())
-                            bs.dih1_imp3 = int(itr.next())
-                            bs.dih1_imp4 = int(itr.next())
-                            bs.dih1_imp1un = int(itr.next()) 
-                            bs.dih1_imp2un = int(itr.next())
-                            bs.dih1_imp3un = int(itr.next())
-                            bs.dih1_imp4un = int(itr.next())
-                            bs.dih1_native = float(itr.next())
-                            bs.dih1_coef   = float(itr.next())
+                            bs.dih1_id = int(next(itr))
+                            bs.dih1_iunit1 = int(next(itr))
+                            bs.dih1_iunit2 = int(next(itr))
+                            bs.dih1_imp1 = int(next(itr)) 
+                            bs.dih1_imp2 = int(next(itr))
+                            bs.dih1_imp3 = int(next(itr))
+                            bs.dih1_imp4 = int(next(itr))
+                            bs.dih1_imp1un = int(next(itr)) 
+                            bs.dih1_imp2un = int(next(itr))
+                            bs.dih1_imp3un = int(next(itr))
+                            bs.dih1_imp4un = int(next(itr))
+                            bs.dih1_native = float(next(itr))
+                            bs.dih1_coef   = float(next(itr))
 
                         elif bs.dih2_id is None:
-                            bs.dih2_id = int(itr.next())
-                            bs.dih2_iunit1 = int(itr.next())
-                            bs.dih2_iunit2 = int(itr.next())
-                            bs.dih2_imp1 = int(itr.next()) 
-                            bs.dih2_imp2 = int(itr.next())
-                            bs.dih2_imp3 = int(itr.next())
-                            bs.dih2_imp4 = int(itr.next())
-                            bs.dih2_imp1un = int(itr.next()) 
-                            bs.dih2_imp2un = int(itr.next())
-                            bs.dih2_imp3un = int(itr.next())
-                            bs.dih2_imp4un = int(itr.next())
-                            bs.dih2_native = float(itr.next())
-                            bs.dih2_coef   = float(itr.next())
+                            bs.dih2_id = int(next(itr))
+                            bs.dih2_iunit1 = int(next(itr))
+                            bs.dih2_iunit2 = int(next(itr))
+                            bs.dih2_imp1 = int(next(itr)) 
+                            bs.dih2_imp2 = int(next(itr))
+                            bs.dih2_imp3 = int(next(itr))
+                            bs.dih2_imp4 = int(next(itr))
+                            bs.dih2_imp1un = int(next(itr)) 
+                            bs.dih2_imp2un = int(next(itr))
+                            bs.dih2_imp3un = int(next(itr))
+                            bs.dih2_imp4un = int(next(itr))
+                            bs.dih2_native = float(next(itr))
+                            bs.dih2_coef   = float(next(itr))
 
                         else:
                             print ('Error dih1 and dih2 are occupied')
@@ -228,35 +228,35 @@
             if line[0:7] == 'hb-angl':
                 lsp = line.split()
                 itr = iter(lsp)
-                itr.next() # 'hb-angl'
-                ihb = int(itr.next())
+                next(itr) # 'hb-angl'
+                ihb = int(next(itr))
                 for hb in ni.hbondDTs:
                     if hb.id == ihb:
                         if hb.ang1_id is None:
-                            hb.ang1_id = int(itr.next())
-                            hb.ang1_iunit1 = int(itr.next())
-                            hb.ang1_iunit2 = int(itr.next())
-                            hb.ang1_imp1 = int(itr.next()) 
-                            hb.ang1_imp2 = int(itr.next())
-                            hb.ang1_imp3 = int(itr.next())
-                            hb.ang1_imp1un = int(itr.next()) 
-                            hb.ang1_imp2un = int(itr.next())
-                            hb.ang1_imp3un = int(itr.next())
-                            hb.ang1_native = float(itr.next())
-                            hb.ang1_coef   = float(itr.next())
+                            hb.ang1_id = int(next(itr))
+                            hb.ang1_iunit1 = int(next(itr))
+                            hb.ang1_iunit2 = int(next(itr))
+                            hb.ang1_imp1 = int(next(itr)) 
+                            hb.ang1_imp2 = int(next(itr))
+                            hb.ang1_imp3 = int(next(itr))
+                            hb.ang1_imp1un = int(next(itr)) 
+                            hb.ang1_imp2un = int(next(itr))
+                            hb.ang1_imp3un = int(next(itr))
+                            hb.ang1_native = float(next(itr))
+                            hb.ang1_coef   = float(next(itr))
 
                         elif hb.ang2_id is None:
-                            hb.ang2_id = int(itr.next())
-                            hb.ang2_iunit1 = int(itr.next())
-                            hb.ang2_iunit2 = int(itr.next())
-                            hb.ang2_imp1 = int(itr.next()) 
-                            hb.ang2_imp2 = int(itr.next())
-                            hb.ang2_imp3 = int(itr.next())
-                            hb.ang2_imp1un = int(itr.next()) 
-                            hb.ang2_imp2un = int(itr.next())
-                            hb.ang2_imp3un = int(itr.next())
-                            hb.ang2_native = float(itr.next())
-                            hb.ang2_coef   = float(itr.next())
+                            hb.ang2_id = int(next(itr))
+                            hb.ang2_iunit1 = int(next(itr))
+                            hb.ang2_iunit2 = int(next(itr))
+                            hb.ang2_imp1 = int(next(itr)) 
+                            hb.ang2_imp2 = int(next(itr))
+                            hb.ang2_imp3 = int(next(itr))
+                            hb.ang2_imp1un = int(next(itr)) 
+                            hb.ang2_imp2un = int(next(itr))
+                            hb.ang2_imp3un = int(next(itr))
+                            hb.ang2_native = float(next(itr))
+                            hb.ang2_coef   = float(next(itr))
 
                         else:
                             print ('Error ang1 and ang2 are occupied')
@@ -267,54 +267,54 @@
             if line[0:7] == 'hb-dihd':
                 lsp = line.split()
                 itr = iter(lsp)
-                itr.next() # 'hb-dihd'
-                ihb = int(itr.next())
+                next(itr) # 'hb-dihd'
+                ihb = int(next(itr))
                 for hb in ni.hbondDTs:
                     if hb.id == ihb:
                         if hb.dih0_id is None:
-                            hb.dih0_id = int(itr.next())
-                            hb.dih0_iunit1 = int(itr.next())
-                            hb.dih0_iunit2 = int(itr.next())
-                            hb.dih0_imp1 = int(itr.next()) 
-                            hb.dih0_imp2 = int(itr.next())
-                            hb.dih0_imp3 = int(itr.next())
-                            hb.dih0_imp4 = int(itr.next())
-                            hb.dih0_imp1un = int(itr.next()) 
-                            hb.dih0_imp2un = int(itr.next())
-                            hb.dih0_imp3un = int(itr.next())
-                            hb.dih0_imp4un = int(itr.next())
-                            hb.dih0_native = float(itr.next())
-                            hb.dih0_coef   = float(itr.next())
+                            hb.dih0_id = int(next(itr))
+                            hb.dih0_iunit1 = int(next(itr))
+                            hb.dih0_iunit2 = int(next(itr))
+                            hb.dih0_imp1 = int(next(itr)) 
+                            hb.dih0_imp2 = int(next(itr))
+                            hb.dih0_imp3 = int(next(itr))
+                            hb.dih0_imp4 = int(next(itr))
+                            hb.dih0_imp1un = int(next(itr)) 
+                            hb.dih0_imp2un = int(next(itr))
+                            hb.dih0_imp3un = int(next(itr))
+                            hb.dih0_imp4un = int(next(itr))
+                            hb.dih0_native = float(next(itr))
+                            hb.dih0_coef   = float(next(itr))
 
                         elif hb.dih1_id is None:
-                            hb.dih1_id = int(itr.next())
-                            hb.dih1_iunit1 = int(itr.next())
-                            hb.dih1_iunit2 = int(itr.next())
-                            hb.dih1_imp1 = int(itr.next()) 
-                            hb.dih1_imp2 = int(itr.next())
-                            hb.dih1_imp3 = int(itr.next())
-                            hb.dih1_imp4 = int(itr.next())
-                            hb.dih1_imp1un = int(itr.next()) 
-                            hb.dih1_imp2un = int(itr.next())
-                            hb.dih1_imp3un = int(itr.next())
-                            hb.dih1_imp4un = int(itr.next())
-                            hb.dih1_native = float(itr.next())
-                            hb.dih1_coef   = float(itr.next())
+                            hb.dih1_id = int(next(itr))
+                            hb.dih1_iunit1 = int(next(itr))
+                            hb.dih1_iunit2 = int(next(itr))
+                            hb.dih1_imp1 = int(next(itr)) 
+                            hb.dih1_imp2 = int(next(itr))
+                            hb.dih1_imp3 = int(next(itr))
+                            hb.dih1_imp4 = int(next(itr))
+                            hb.dih1_imp1un = int(next(itr)) 
+                            hb.dih1_imp2un = int(next(itr))
+                            hb.dih1_imp3un = int(next(itr))
+                            hb.dih1_imp4un = int(next(itr))
+                            hb.dih1_native = float(next(itr))
+                            hb.dih1_coef   = float(next(itr))
 
                         elif hb.dih2_id is None:
-                            hb.dih2_id = int(itr.next())
-                            hb.dih2_iunit1 = int(itr.next())
-                            hb.dih2_iunit2 = int(itr.next())
-                            hb.dih2_imp1 = int(itr.next()) 
-                            hb.dih2_imp2 = int(itr.next())
-                            hb.dih2_imp3 = int(itr.next())
-                            hb.dih2_imp4 = int(itr.next())
-                            hb.dih2_imp1un = int(itr.next()) 
-                            hb.dih2_imp2un = int(itr.next())
-                            hb.dih2_imp3un = int(itr.next())
-                            hb.dih2_imp4un = int(itr.next())
-                            hb.dih2_native = float(itr.next())
-                            hb.dih2_coef   = float(itr.next())
+                            hb.dih2_id = int(next(itr))
+                            hb.dih2_iunit1 = int(next(itr))
+                            hb.dih2_iunit2 = int(next(itr))
+                            hb.dih2_imp1 = int(next(itr)) 
+                            hb.dih2_imp2 = int(next(itr))
+                            hb.dih2_imp3 = int(next(itr))
+                            hb.dih2_imp4 = int(next(itr))
+                            hb.dih2_imp1un = int(next(itr)) 
+                            hb.dih2_imp2un = int(next(itr))
+                            hb.dih2_imp3un = int(next(itr))
+                            hb.dih2_imp4un = int(next(itr))
+                            hb.dih2_native = float(next(itr))
+                            hb.dih2_coef   = float(next(itr))
 
                         else:
                             print ('Error dih0 and dih1 and dih2 are occupied')
@@ -364,8 +364,8 @@
         if len(ni.contacts) > 0:
             self._file.write('<<<< native contact\n')
             self._file.write('** total_contact = %i\n'%(len(ni.contacts),))
-            for i in xrange(1, num_unit+1) :
-                for j in xrange(i, num_unit+1) :
+            for i in range(1, num_unit+1) :
+                for j in range(i, num_unit+1) :
                     subset = ni.get_contacts_by_unit(i,j)
                     if len(subset) == 0:
                         continue
@@ -381,8 +381,8 @@
         if len(ni.LJs) > 0:
             self._file.write('<<<< LJ\n')
             self._file.write('** total_LJ = %i\n'%(len(ni.LJs),))
-            for i in xrange(1, num_unit+1) :
-                for j in xrange(i, num_unit+1) :
+            for i in range(1, num_unit+1) :
+                for j in range(i, num_unit+1) :
                     subset = ni.get_LJs_by_unit(i,j)
                     if len(subset) == 0:
                         continue
@@ -398,8 +398,8 @@
         if len(ni.basepairs) > 0:
             self._file.write('<<<< native basepair\n')
             self._file.write('** total_contact = %i\n'%(len(ni.basepairs),))
-            for i in xrange(1, num_unit+1) :
-                for j in xrange(i, num_unit+1) :
+            for i in range(1, num_unit+1) :
+                for j in range(i, num_unit+1) :
                     subset = ni.get_basepairs_by_unit(i,j)
                     if len(subset) == 0:
                         continue
--- ./file_io/psf.py	(original)
+++ ./file_io/psf.py	(refactored)
@@ -84,7 +84,7 @@
         while header :
             if header.find('!NATOM') != -1 :
                 n = int(header.split()[0])
-                for i in xrange(n) :
+                for i in range(n) :
                     line = self._file.readline()
                     psf.atoms.append(line2atom(line))
             if header.find('!NBOND') != -1 :
@@ -92,7 +92,7 @@
                 i = 0
                 while i < n :
                     a = [int(x) for x in self._file.readline().split()]
-                    for j in xrange(0, len(a), 2) :
+                    for j in range(0, len(a), 2) :
                         psf.bonds.append((a[j],a[j+1]))
                     i += len(a) / 2
             if header.find('!NTHETA') != -1 :
@@ -100,7 +100,7 @@
                 i = 0
                 while i < n :
                     a = [int(x) for x in self._file.readline().split()]
-                    for j in xrange(0, len(a), 3) :
+                    for j in range(0, len(a), 3) :
                         psf.angles.append((a[j],a[j+1],a[j+2]))
                     i += len(a) / 3
             if header.find('!NPHI') != -1 :
@@ -108,7 +108,7 @@
                 i = 0
                 while i < n :
                     a = [int(x) for x in self._file.readline().split()]
-                    for j in xrange(0, len(a), 4) :
+                    for j in range(0, len(a), 4) :
                         psf.dihedrals.append((a[j],a[j+1],a[j+2],a[j+3]))
                     i += len(a) / 4
             if header.find('!NIMPHI') != -1 :
@@ -116,7 +116,7 @@
                 i = 0
                 while i < n :
                     a = [int(x) for x in self._file.readline().split()]
-                    for j in xrange(0, len(a), 4) :
+                    for j in range(0, len(a), 4) :
                         psf.impropers.append((a[j],a[j+1],a[j+2],a[j+3]))
                     i += len(a) / 4
             if header.find('!NCRTERM') != -1 :
@@ -124,7 +124,7 @@
                 i = 0
                 while i < n :
                     a = [int(x) for x in self._file.readline().split()]
-                    for j in xrange(0, len(a), 4) :
+                    for j in range(0, len(a), 4) :
                         psf.crossterms.append((a[j],a[j+1],a[j+2],a[j+3]))
                     i += len(a) / 4
             header = self._file.readline()
@@ -138,31 +138,31 @@
                 self._file.write(atom2line(atom) + '\n')
         if psf.n_bond() > 0 :
             self._file.write('%8i !NBOND\n' % psf.n_bond())
-            for i in xrange(0, psf.n_bond()) :
+            for i in range(0, psf.n_bond()) :
                 self._file.write('%8i%8i' % psf.bonds[i])
                 if (i+1)%4==0 or i==psf.n_bond()-1 :
                     self._file.write('\n')
         if psf.n_angle() > 0 :
             self._file.write('%8i !NTHETA\n' % psf.n_angle())
-            for i in xrange(0, psf.n_angle()) :
+            for i in range(0, psf.n_angle()) :
                 self._file.write('%8i%8i%8i' % psf.angles[i])
                 if (i+1)%3==0 or i==psf.n_angle()-1 :
                     self._file.write('\n')
         if psf.n_dihedral() > 0 :
             self._file.write('%8i !NPHI\n' % psf.n_dihedral())
-            for i in xrange(0, psf.n_dihedral()) :
+            for i in range(0, psf.n_dihedral()) :
                 self._file.write('%8i%8i%8i' % psf.dihedrals[i])
                 if (i+1)%2==0 or i==psf.n_dihedral()-1 :
                     self._file.write('\n')
         if psf.n_improper() > 0 :
             self._file.write('%8i !NIMPHI\n' % psf.n_improper())
-            for i in xrange(0, psf.n_improper()) :
+            for i in range(0, psf.n_improper()) :
                 self._file.write('%8i%8i%8i' % psf.impropers[i])
                 if (i+1)%2==0 or i==psf.n_improper()-1 :
                     self._file.write('\n')
         if psf.n_crossterm() > 0 :
             self._file.write('%8i !NCRTERM\n' % psf.n_crossterm())
-            for i in xrange(0, psf.n_crossterm()) :
+            for i in range(0, psf.n_crossterm()) :
                 self._file.write('%8i%8i%8i' % psf.crossterms[i])
                 if (i+1)%2==0 or i==psf.n_crossterm()-1 :
                     self._file.write('\n')
@@ -171,8 +171,8 @@
     import sys
     
     if len(sys.argv) != 3:
-        print 'This is debug modeg mode of PsfFile class'
-        print 'Usage: SCRIPT [input psf file] [output psf file]'
+        print('This is debug modeg mode of PsfFile class')
+        print('Usage: SCRIPT [input psf file] [output psf file]')
         sys.exit(2)
     
     in_file = PsfFile(sys.argv[1])    
--- ./file_io/psf_new.py	(original)
+++ ./file_io/psf_new.py	(refactored)
@@ -62,7 +62,7 @@
         while header :
             if header.find('!NATOM') != -1 :
                 n = int(header.split()[0])
-                for i in xrange(n) :
+                for i in range(n) :
                     line = self._file.readline()
                     psf.atoms.append(line2atom(line))
             if header.find('!NBOND') != -1 :
@@ -70,7 +70,7 @@
                 i = 0
                 while i < n :
                     a = [int(x) for x in self._file.readline().split()]
-                    for j in xrange(0, len(a), 2) :
+                    for j in range(0, len(a), 2) :
                         psf.bonds.append((a[j],a[j+1]))
                     i += len(a) / 2
             if header.find('!NTHETA') != -1 :
@@ -78,7 +78,7 @@
                 i = 0
                 while i < n :
                     a = [int(x) for x in self._file.readline().split()]
-                    for j in xrange(0, len(a), 3) :
+                    for j in range(0, len(a), 3) :
                         psf.angles.append((a[j],a[j+1],a[j+2]))
                     i += len(a) / 3
             if header.find('!NPHI') != -1 :
@@ -86,7 +86,7 @@
                 i = 0
                 while i < n :
                     a = [int(x) for x in self._file.readline().split()]
-                    for j in xrange(0, len(a), 4) :
+                    for j in range(0, len(a), 4) :
                         psf.dihedrals.append((a[j],a[j+1],a[j+2],a[j+3]))
                     i += len(a) / 4
             if header.find('!NIMPHI') != -1 :
@@ -94,7 +94,7 @@
                 i = 0
                 while i < n :
                     a = [int(x) for x in self._file.readline().split()]
-                    for j in xrange(0, len(a), 4) :
+                    for j in range(0, len(a), 4) :
                         psf.impropers.append((a[j],a[j+1],a[j+2],a[j+3]))
                     i += len(a) / 4
             if header.find('!NCRTERM') != -1 :
@@ -102,7 +102,7 @@
                 i = 0
                 while i < n :
                     a = [int(x) for x in self._file.readline().split()]
-                    for j in xrange(0, len(a), 4) :
+                    for j in range(0, len(a), 4) :
                         psf.crossterms.append((a[j],a[j+1],a[j+2],a[j+3]))
                     i += len(a) / 4
             header = self._file.readline()
@@ -116,31 +116,31 @@
                 self._file.write(atom2line(atom) + '\n')
         if psf.n_bond() > 0 :
             self._file.write('%8i !NBOND\n' % psf.n_bond())
-            for i in xrange(0, psf.n_bond()) :
+            for i in range(0, psf.n_bond()) :
                 self._file.write('%8i%8i' % psf.bonds[i])
                 if (i+1)%4==0 or i==psf.n_bond()-1 :
                     self._file.write('\n')
         if psf.n_angle() > 0 :
             self._file.write('%8i !NTHETA\n' % psf.n_angle())
-            for i in xrange(0, psf.n_angle()) :
+            for i in range(0, psf.n_angle()) :
                 self._file.write('%8i%8i%8i' % psf.angles[i])
                 if (i+1)%3==0 or i==psf.n_angle()-1 :
                     self._file.write('\n')
         if psf.n_dihedral() > 0 :
             self._file.write('%8i !NPHI\n' % psf.n_dihedral())
-            for i in xrange(0, psf.n_dihedral()) :
+            for i in range(0, psf.n_dihedral()) :
                 self._file.write('%8i%8i%8i' % psf.dihedrals[i])
                 if (i+1)%2==0 or i==psf.n_dihedral()-1 :
                     self._file.write('\n')
         if psf.n_improper() > 0 :
             self._file.write('%8i !NIMPHI\n' % psf.n_improper())
-            for i in xrange(0, psf.n_improper()) :
+            for i in range(0, psf.n_improper()) :
                 self._file.write('%8i%8i%8i' % psf.impropers[i])
                 if (i+1)%2==0 or i==psf.n_improper()-1 :
                     self._file.write('\n')
         if psf.n_crossterm() > 0 :
             self._file.write('%8i !NCRTERM\n' % psf.n_crossterm())
-            for i in xrange(0, psf.n_crossterm()) :
+            for i in range(0, psf.n_crossterm()) :
                 self._file.write('%8i%8i%8i' % psf.crossterms[i])
                 if (i+1)%2==0 or i==psf.n_crossterm()-1 :
                     self._file.write('\n')
@@ -149,8 +149,8 @@
     import sys
     
     if len(sys.argv) != 3:
-        print 'This is debug modeg mode of PsfFile class'
-        print 'Usage: SCRIPT [input psf file] [output psf file]'
+        print('This is debug modeg mode of PsfFile class')
+        print('Usage: SCRIPT [input psf file] [output psf file]')
         sys.exit(2)
     
     in_file = PsfFile(sys.argv[1])    
--- ./file_io/ts.py	(original)
+++ ./file_io/ts.py	(refactored)
@@ -50,45 +50,45 @@
         self.e_thbond = None
         
     def show(self):
-        print 'step', self.step
-        print 'temp', self.temp
-        print 'label', self.label
-        
-        print 'rg', self.rg
-        print 'rmsd', self.rmsd
-        print 'q', self.q
+        print('step', self.step)
+        print('temp', self.temp)
+        print('label', self.label)
+        
+        print('rg', self.rg)
+        print('rmsd', self.rmsd)
+        print('q', self.q)
         
         #print 'mgo_kai', self.mgo_kai
         #print 'mgo_coef', self.mgo_coef
         #print 'mgo_q', self.mgo_q
         #print 'mgo_state', self.mgo_state
         
-        print 'e_tot', self.e_tot
-        print 'e_velo', self.e_velo
-        print 'e_local', self.e_local
-        print 'e_go', self.e_go
-        print 'e_morse', self.e_morse
-        print 'e_repul', self.e_repul
-        print 'e_dna_solv', self.e_dna_solv
-        print 'e_dna_base', self.e_dna_base
-        print 'e_ele', self.e_ele
-        print 'e_ion_hyd', self.e_ion_hyd
-        print 'e_hp', self.e_hp
-        print 'e_lip_tail', self.e_lip_tail
-        print 'e_lip_int', self.e_lip_int
-        print 'e_lip_solv', self.e_lip_solv
-        print 'e_box', self.e_box
-        print 'e_cap', self.e_cap
-        print 'e_bridge', self.e_bridge
-        print 'e_pull', self.e_pull
-        print 'e_anch', self.e_anch
-        print 'e_rest1d', self.e_rest1d
-        print 'e_implig', self.e_implig
-        print 'e_window', self.e_window
-        print 'e_stack', self.e_stack
-        print 'e_hbond', self.e_hbond
-        print 'e_tstack', self.e_tstack
-        print 'e_thbond', self.e_thbond
+        print('e_tot', self.e_tot)
+        print('e_velo', self.e_velo)
+        print('e_local', self.e_local)
+        print('e_go', self.e_go)
+        print('e_morse', self.e_morse)
+        print('e_repul', self.e_repul)
+        print('e_dna_solv', self.e_dna_solv)
+        print('e_dna_base', self.e_dna_base)
+        print('e_ele', self.e_ele)
+        print('e_ion_hyd', self.e_ion_hyd)
+        print('e_hp', self.e_hp)
+        print('e_lip_tail', self.e_lip_tail)
+        print('e_lip_int', self.e_lip_int)
+        print('e_lip_solv', self.e_lip_solv)
+        print('e_box', self.e_box)
+        print('e_cap', self.e_cap)
+        print('e_bridge', self.e_bridge)
+        print('e_pull', self.e_pull)
+        print('e_anch', self.e_anch)
+        print('e_rest1d', self.e_rest1d)
+        print('e_implig', self.e_implig)
+        print('e_window', self.e_window)
+        print('e_stack', self.e_stack)
+        print('e_hbond', self.e_hbond)
+        print('e_tstack', self.e_tstack)
+        print('e_thbond', self.e_thbond)
                 
 class TsFile(object):
     def __init__(self, filename) :
@@ -122,7 +122,7 @@
         self._file.seek(0)
         
         # skip 5 lines
-        for i in xrange(5):
+        for i in range(5):
             self.header_lines.append( self._file.readline() )
             
         # read header
@@ -160,7 +160,7 @@
             
         # skip 9 lines
         self._file.seek(0)
-        for i in xrange(9):
+        for i in range(9):
             self._file.readline()
 
     def write_header(self):
@@ -189,12 +189,12 @@
         if self.flg_u_u:
             #for i in xrange(self.num_unit+1):
             #for i in xrange(self.num_unit):  # There is no "#all" line
-            for i in xrange(nlines):
+            for i in range(nlines):
                 l = self._file.readline()
                 lines.append(l)
                 ts_list.append(l.split()[1:])
 
-            for i in xrange(self.num_unit*(self.num_unit-1)/2):
+            for i in range(self.num_unit*(self.num_unit-1)/2):
                 l = self._file.readline()
                 lines.append(l)
                 ts_list.append(l.split()[1:])
@@ -204,7 +204,7 @@
             #    l = self._file.readline()
             #    lines.append(l)
             #    ts_list.append(l.split())
-            for i in xrange(nlines):
+            for i in range(nlines):
                 l = self._file.readline()
                 lines.append(l)
                 ts_list.append(l.split()[1:])
@@ -216,11 +216,11 @@
             self._file.write(l)
     
     def skip_onestep(self):
-        for i in xrange(self.num_unit +2):
+        for i in range(self.num_unit +2):
             self._file.readline()
      
     def skip(self, num):
-        for i in xrange((self.num_unit +2)*num):
+        for i in range((self.num_unit +2)*num):
             self._file.readline()
        
     #def write_onestep(self, coord_matrix):
--- ./pca/pca_dcd.py	(original)
+++ ./pca/pca_dcd.py	(refactored)
@@ -7,7 +7,7 @@
 from numpy import zeros, float32
 
 if len(sys.argv) != 3:
-    print 'Usage: % SCRIPT [input DCD] [output]'
+    print('Usage: % SCRIPT [input DCD] [output]')
     sys.exit(2)
     
 filename_out = sys.argv[2]
@@ -17,7 +17,7 @@
 dcd.read_header()
 nmp = dcd.get_header().nmp_real
 
-print 'nmp=%i\n'%nmp
+print('nmp=%i\n'%nmp)
 num_model = 0
 covariance = zeros((nmp*3, nmp*3), dtype=float32)
 variance = zeros((nmp*3,), dtype=float32)
@@ -26,39 +26,39 @@
     data = dcd.read_onestep()
     num_model += 1
     
-    for i_mp in xrange(nmp) :
-        for i_xyz in xrange(3) :
+    for i_mp in range(nmp) :
+        for i_xyz in range(3) :
             i = i_mp + i_xyz
-            for j_mp in xrange(i_mp+1) :
-                for j_xyz in xrange(3):
+            for j_mp in range(i_mp+1) :
+                for j_xyz in range(3):
                     j = j_mp + j_xyz
                     covariance[i,j] += data[i_mp][i_xyz] * data[j_mp][j_xyz]
             variance[i] += data[i_mp][i_xyz]
             
 a = zeros((nmp*3,nmp*3), dtype=float32)
-for i in xrange(nmp):
-    for j in xrange(i+1) :
+for i in range(nmp):
+    for j in range(i+1) :
         a[i,j] = covariance[i,j] / float(num_model) \
                 - variance[i] * variance[j] / (float(num_model) **2)
-    for j in xrange(i+1, nmp) :
+    for j in range(i+1, nmp) :
         a[i,j] = covariance[j,i] / float(num_model) \
                 - variance[i] * variance[j] / (float(num_model) **2)
 
 (w, v) = linalg.eigh(a,eigvalus=(0,1))
 
-print w 
-print v
+print(w) 
+print(v)
 
 
 
 file_out = open(filename_out,'w')
 file_out.write('#value\n')
-for i in xrange(1) :
+for i in range(1) :
     file_out.write('%20e\n' % w[i])
 
-for i in xrange(1) :
+for i in range(1) :
     file_out.write('#vector%10i\n' % i)
-    for j in xrange(nmp*3) :
+    for j in range(nmp*3) :
         file_out.write('%20e\n' % v[j,i])
 
 file_out.close()
--- ./pca/pca_dcd_preIMKL.py	(original)
+++ ./pca/pca_dcd_preIMKL.py	(refactored)
@@ -6,7 +6,7 @@
 from numpy import zeros, float32
 
 if len(sys.argv) != 3:
-    print 'Usage: % SCRIPT [input DCD] [output]'
+    print('Usage: % SCRIPT [input DCD] [output]')
     sys.exit(2)
     
 filename_out = sys.argv[2]
@@ -16,7 +16,7 @@
 dcd.read_header()
 nmp = dcd.get_header().nmp_real
 
-print 'nmp=%i\n'%nmp
+print('nmp=%i\n'%nmp)
 num_model = 0
 covariance = zeros((nmp*3, nmp*3), dtype=float32)
 variance = zeros((nmp*3,), dtype=float32)
@@ -24,7 +24,7 @@
 while dcd.has_more_data() :
     data = dcd.read_onestep()
     num_model += 1
-    print num_model
+    print(num_model)
     
 #    for i_mp in xrange(nmp) :
 #        for i_xyz in xrange(3) :
@@ -46,8 +46,8 @@
 
 file_out = open(filename_out,'w')
 file_out.write('%i\n' % nmp*3)
-for i in xrange(nmp*3) :
-    for j in xrange(i,nmp*3):
+for i in range(nmp*3) :
+    for j in range(i,nmp*3):
         file_out.write('%22.20f\n' % a[i,j])
 
 file_out.close()
--- ./pca/pca_dcd_to_pc.py	(original)
+++ ./pca/pca_dcd_to_pc.py	(refactored)
@@ -8,7 +8,7 @@
 from cafysis.file_io.dcd import DcdFile
 
 if len(sys.argv) < 5:
-    print 'Usage: % SCRIPT [input dcd] [ev file] [,ev file ....] [output average file] [output PC file]'
+    print('Usage: % SCRIPT [input dcd] [ev file] [,ev file ....] [output average file] [output PC file]')
     sys.exit(2)
     
 f_dcd = DcdFile(sys.argv[1])
@@ -21,7 +21,7 @@
 # Read eigen values
 num_ev = len(sys.argv) - 4
 ev = []
-for i in xrange(num_ev) :
+for i in range(num_ev) :
     f_ev = open(sys.argv[i+2], 'r')
     ev_tmp = [] 
     for line in f_ev :
@@ -34,7 +34,7 @@
 num_dimension = len(ev[0])
 for v in ev :
     if len(v) != num_dimension :
-        print 'len(v) != num_dimension, %i' % num_dimension
+        print('len(v) != num_dimension, %i' % num_dimension)
         sys.exit(2)
 
 #debug
@@ -44,7 +44,7 @@
 #        print value
 
 # Calculate average structure (data_ave)
-data_ave = [0.0 for i in xrange(num_dimension)]
+data_ave = [0.0 for i in range(num_dimension)]
 num_data = 0
 while f_dcd.has_more_data() :
     num_data += 1
@@ -54,7 +54,7 @@
         for xyz in atom :
             data_ave[idx] += xyz
             idx += 1
-for i in xrange(len(data_ave)) :
+for i in range(len(data_ave)) :
     data_ave[i] /= float(num_data)
     f_ave.write('%12.5f\n' % data_ave[i])
 
--- ./pca/pca_dcd_to_pc_filter.py	(original)
+++ ./pca/pca_dcd_to_pc_filter.py	(refactored)
@@ -8,7 +8,7 @@
 from cafysis.file_io.dcd import DcdFile
 
 if len(sys.argv) < 6:
-    print 'Usage: % SCRIPT [input dcd] [filter file] [ev file] [,ev file ....] [output average file] [output PC file]'
+    print('Usage: % SCRIPT [input dcd] [filter file] [ev file] [,ev file ....] [output average file] [output PC file]')
     sys.exit(2)
     
 f_dcd = DcdFile(sys.argv[1])
@@ -21,7 +21,7 @@
 # Read eigen values
 num_ev = len(sys.argv) - 5
 ev = []
-for i in xrange(num_ev) :
+for i in range(num_ev) :
     f_ev = open(sys.argv[i+3], 'r')
     ev_tmp = [] 
     for line in f_ev :
@@ -43,7 +43,7 @@
 # Check for ev
 for v in ev :
     if len(v) != num_dimension :
-        print 'len(v) != num_dimension, %i' % num_dimension
+        print('len(v) != num_dimension, %i' % num_dimension)
         sys.exit(2)
 
 #debug
@@ -53,7 +53,7 @@
 #        print value
 
 # Calculate average structure (data_ave)
-data_ave = [0.0 for i in xrange(num_dimension)]
+data_ave = [0.0 for i in range(num_dimension)]
 num_data = 0
 while f_dcd.has_more_data() :
     num_data += 1
@@ -65,7 +65,7 @@
         for xyz in atom :
             data_ave[idx] += xyz
             idx += 1
-for i in xrange(len(data_ave)) :
+for i in range(len(data_ave)) :
     data_ave[i] /= float(num_data)
     f_ave.write('%12.5f\n' % data_ave[i])
 
--- ./pca/pca_dihxy_to_pc.py	(original)
+++ ./pca/pca_dihxy_to_pc.py	(refactored)
@@ -10,7 +10,7 @@
 import numpy as np
 
 if len(sys.argv) < 5:
-    print 'Usage: % SCRIPT [input dcd] [ev file] [,ev file ....] [output average file] [output PC file]'
+    print('Usage: % SCRIPT [input dcd] [ev file] [,ev file ....] [output average file] [output PC file]')
     sys.exit(2)
     
 f_dihxy = open(sys.argv[1], 'rb')
@@ -21,7 +21,7 @@
 # Read eigen values
 num_ev = len(sys.argv) - 4
 ev = []
-for i in xrange(num_ev) :
+for i in range(num_ev) :
     f_ev = open(sys.argv[i+2], 'r')
     ev_tmp = [] 
     for line in f_ev :
@@ -34,11 +34,11 @@
 num_dimension = len(ev[0])
 for v in ev :
     if len(v) != num_dimension :
-        print 'len(v) != num_dimension, %i' % num_dimension
+        print('len(v) != num_dimension, %i' % num_dimension)
         sys.exit(2)
 
 # Calculate average structure (data_ave)
-data_ave = [0.0 for i in xrange(num_dimension)]
+data_ave = [0.0 for i in range(num_dimension)]
 num_data = 0
 
 flg_more_data = True
@@ -61,7 +61,7 @@
         f_dihxy.seek(-4,os.SEEK_CUR)
         flg_more_data = True
 
-for i in xrange(len(data_ave)) :
+for i in range(len(data_ave)) :
     data_ave[i] /= float(num_data)
     f_ave.write('%12.5f\n' % data_ave[i])
 
--- ./pca/pca_make_pullfile.py	(original)
+++ ./pca/pca_make_pullfile.py	(refactored)
@@ -3,19 +3,19 @@
 import sys
 
 if (len(sys.argv) < 5) or (len(sys.argv) % 2 != 1) :
-    print ''
-    print ' Usage: SCRIPT [input pca file] [(ID begin, ID end) ...] [output pull file]'
-    print ''
+    print('')
+    print(' Usage: SCRIPT [input pca file] [(ID begin, ID end) ...] [output pull file]')
+    print('')
     sys.exit(2)
     
 f_in = open(sys.argv[1], 'r')
 f_out = open(sys.argv[-1], 'w')
 
 mps = []
-for i_pair in xrange((len(sys.argv)-3) / 2) :
+for i_pair in range((len(sys.argv)-3) / 2) :
     id_begin = int(sys.argv[2+i_pair*2])
     id_end = int(sys.argv[2+i_pair*2+1])
-    for imp in xrange(id_begin, id_end+1) :
+    for imp in range(id_begin, id_end+1) :
         mps.append(imp)
     
 imp = 0
@@ -34,4 +34,4 @@
         imp += 1
         i_xyz = 0
     
-print ('# of mass points : %i' % imp)
+print(('# of mass points : %i' % imp))
--- ./pca/pca_pdb_to_pc.py	(original)
+++ ./pca/pca_pdb_to_pc.py	(refactored)
@@ -8,14 +8,14 @@
 from cafysis.file_io.pdb import PdbFile
 
 if len(sys.argv) < 5:
-    print 'Usage: % SCRIPT [average file] [input pdb] [ev file] [,ev file ....] [output PC file]'
+    print('Usage: % SCRIPT [average file] [input pdb] [ev file] [,ev file ....] [output PC file]')
     sys.exit(2)
     
 data_ave = []
 for line in open(sys.argv[1], 'r'):
     data_ave.append(float(line.strip()))
 
-print ("#Dimension: %s" % len(data_ave))
+print(("#Dimension: %s" % len(data_ave)))
 
 f_pdb = PdbFile(sys.argv[2])
 f_pdb.open_to_read()
@@ -25,7 +25,7 @@
 # Read eigen values
 num_ev = len(sys.argv) - 4
 ev = []
-for i in xrange(num_ev) :
+for i in range(num_ev) :
     f_ev = open(sys.argv[i+3], 'r')
     ev_tmp = [] 
     for line in f_ev :
@@ -38,7 +38,7 @@
 num_dimension = len(ev[0])
 for v in ev :
     if len(v) != num_dimension :
-        print 'len(v) != num_dimension, %i' % num_dimension
+        print('len(v) != num_dimension, %i' % num_dimension)
         sys.exit(2)
 
 #debug
@@ -54,7 +54,7 @@
     x = 0.0
     idx = 0
     for c in chains:
-        for i in xrange(c.num_atom()):
+        for i in range(c.num_atom()):
             c.get_atom(i).xyz.x
             x += (c.get_atom(i).xyz.x - data_ave[idx]) * v[idx]
             idx += 1
--- ./pca/pca_remove_translation.py	(original)
+++ ./pca/pca_remove_translation.py	(refactored)
@@ -5,10 +5,10 @@
 from numpy import float64, zeros
 
 if (len(sys.argv) < 6) or (len(sys.argv) % 2 != 0) :
-    print ''
-    print ' Usage: SCRIPT [input pca file] [input pdb file] [(ID begin, ID end) ...] [output pca file]'
+    print('')
+    print(' Usage: SCRIPT [input pca file] [input pdb file] [(ID begin, ID end) ...] [output pca file]')
     #print ' Usage: SCRIPT [input pca file] [input pdb file] [(ID begin, ID end) ...]'
-    print ''
+    print('')
     sys.exit(2)
 
 f_in = open(sys.argv[1], 'r')
@@ -19,10 +19,10 @@
 f_out = open(sys.argv[-1], 'w')
 
 mps = []
-for i_pair in xrange((len(sys.argv) - 3) / 2) :
+for i_pair in range((len(sys.argv) - 3) / 2) :
     id_begin = int(sys.argv[3 + i_pair * 2])
     id_end = int(sys.argv[3 + i_pair * 2 + 1])
-    for imp in xrange(id_begin, id_end + 1) :
+    for imp in range(id_begin, id_end + 1) :
         mps.append(imp)
 nmp = len(mps)
 
@@ -47,7 +47,7 @@
 xyzs = []
 imp = 0
 for c in chains :
-    for imp_chain in xrange(c.num_atom()) :
+    for imp_chain in range(c.num_atom()) :
         imp += 1
         if imp in mps :
             xyzs.append(c.get_atom(imp_chain).xyz)
@@ -60,8 +60,8 @@
     center[0] += xyz.x
     center[1] += xyz.y
     center[2] += xyz.z
-print 'center='
-print [value / len(xyzs) for value in center]
+print('center=')
+print([value / len(xyzs) for value in center])
 
 # calculate translation
 translate = [0.0, 0.0, 0.0]
@@ -69,8 +69,8 @@
     translate[0] += vec[0]
     translate[1] += vec[1]
     translate[2] += vec[2]
-print 'translate(BEFORE)='
-print translate
+print('translate(BEFORE)=')
+print(translate)
 
 # remove translation
 translate[0] /= float(nmp)
--- ./pca/pca_remove_translation_rotation.py	(original)
+++ ./pca/pca_remove_translation_rotation.py	(refactored)
@@ -6,10 +6,10 @@
 from numpy import float64, zeros
 
 if (len(sys.argv) < 6) or (len(sys.argv) % 2 != 0) :
-    print ''
+    print('')
     #print ' Usage: SCRIPT [input pca file] [input pdb file] [(ID begin, ID end) ...] [output pca file]'
-    print ' Usage: SCRIPT [input pca file] [input pdb file] [(ID begin, ID end) ...]'
-    print ''
+    print(' Usage: SCRIPT [input pca file] [input pdb file] [(ID begin, ID end) ...]')
+    print('')
     sys.exit(2)
 
 f_in = open(sys.argv[1], 'r')
@@ -20,10 +20,10 @@
 f_out = open(sys.argv[-1], 'w')
 
 mps = []
-for i_pair in xrange((len(sys.argv) - 3) / 2) :
+for i_pair in range((len(sys.argv) - 3) / 2) :
     id_begin = int(sys.argv[3 + i_pair * 2])
     id_end = int(sys.argv[3 + i_pair * 2 + 1])
-    for imp in xrange(id_begin, id_end + 1) :
+    for imp in range(id_begin, id_end + 1) :
         mps.append(imp)
 nmp = len(mps)
 
@@ -48,7 +48,7 @@
 xyzs = []
 imp = 0
 for c in chains :
-    for imp_chain in xrange(c.num_atom()) :
+    for imp_chain in range(c.num_atom()) :
         imp += 1
         if imp in mps :
             xyzs.append(c.get_atom(imp_chain).xyz)
@@ -61,8 +61,8 @@
     center[0] += xyz.x
     center[1] += xyz.y
     center[2] += xyz.z
-print 'center='
-print [value / len(xyzs) for value in center]
+print('center=')
+print([value / len(xyzs) for value in center])
 
 # calculate translation
 translate = [0.0, 0.0, 0.0]
@@ -70,8 +70,8 @@
     translate[0] += vec[0]
     translate[1] += vec[1]
     translate[2] += vec[2]
-print 'translate(BEFORE)='
-print translate
+print('translate(BEFORE)=')
+print(translate)
 
 # remove translation
 translate[0] /= float(nmp)
@@ -88,18 +88,18 @@
     translate[0] += vec[0]
     translate[1] += vec[1]
     translate[2] += vec[2]
-print 'translate(AFTER)='
-print translate
+print('translate(AFTER)=')
+print(translate)
 
 # calculate angular momentum
 anglmt = [0.0, 0.0, 0.0]
-for i in xrange(len(mps)) :
+for i in range(len(mps)) :
     anglmt[0] += xyzs[i].y * vecs[i][2] - xyzs[i].z * vecs[i][1]
     anglmt[1] += xyzs[i].z * vecs[i][0] - xyzs[i].x * vecs[i][2]
     anglmt[2] += xyzs[i].x * vecs[i][1] - xyzs[i].y * vecs[i][0]
 
-print 'angular momentum(BEFORE)='
-print anglmt
+print('angular momentum(BEFORE)=')
+print(anglmt)
 
 txx = 0.0
 txy = 0.0
@@ -136,7 +136,7 @@
 
 ier = gauss_jordan(rot, etator, 3)
 if ier == -1 :
-    print 'util_ppgauss is failed'
+    print('util_ppgauss is failed')
     sys.exit(2)
     
 #print 'etator'
@@ -155,13 +155,13 @@
 
 # calculate angular momentum
 anglmt = [0.0, 0.0, 0.0]
-for i in xrange(len(mps)) :
+for i in range(len(mps)) :
     anglmt[0] += xyzs[i].y * vecs[i][2] - xyzs[i].z * vecs[i][1]
     anglmt[1] += xyzs[i].z * vecs[i][0] - xyzs[i].x * vecs[i][2]
     anglmt[2] += xyzs[i].x * vecs[i][1] - xyzs[i].y * vecs[i][0]
 
-print 'angular momentum(AFTER)='
-print anglmt
+print('angular momentum(AFTER)=')
+print(anglmt)
 
 for vec in vecs:
     f_out.write('%30.20f\n' % vec[0])
--- ./pca/pca_rotation.py	(original)
+++ ./pca/pca_rotation.py	(refactored)
@@ -4,10 +4,10 @@
 from file_pdb import PdbFile
 
 if (len(sys.argv) < 5) or (len(sys.argv) % 2 != 1) :
-    print ''
+    print('')
     #print ' Usage: SCRIPT [input pca file] [input pdb file] [(ID begin, ID end) ...] [output pull file]'
-    print ' Usage: SCRIPT [input pca file] [input pdb file] [(ID begin, ID end) ...]'
-    print ''
+    print(' Usage: SCRIPT [input pca file] [input pdb file] [(ID begin, ID end) ...]')
+    print('')
     sys.exit(2)
     
 f_in = open(sys.argv[1], 'r')
@@ -18,10 +18,10 @@
 #f_out = open(sys.argv[-1], 'w')
 
 mps = []
-for i_pair in xrange((len(sys.argv)-3) / 2) :
+for i_pair in range((len(sys.argv)-3) / 2) :
     id_begin = int(sys.argv[3+i_pair*2])
     id_end = int(sys.argv[3+i_pair*2+1])
-    for imp in xrange(id_begin, id_end+1) :
+    for imp in range(id_begin, id_end+1) :
         mps.append(imp)
         
 imp = 0
@@ -45,7 +45,7 @@
 xyzs = []
 imp = 0
 for c in chains :
-    for imp_chain in xrange(c.num_atom()) :
+    for imp_chain in range(c.num_atom()) :
         imp += 1
         if imp in mps :
             xyzs.append(c.get_atom(imp_chain).xyz)
@@ -67,18 +67,18 @@
     translate[0] += vec[0]
     translate[1] += vec[1]
     translate[2] += vec[2]
-print 'translation='
+print('translation=')
 #print [value / len(xyzs) for value in translate]
-print translate
+print(translate)
     
     
 anglmt = [0.0, 0.0, 0.0]
-for i in xrange(len(mps)) :
+for i in range(len(mps)) :
     anglmt[0] += xyzs[i].y * vecs[i][2] - xyzs[i].z * vecs[i][1]
     anglmt[1] += xyzs[i].z * vecs[i][0] - xyzs[i].x * vecs[i][2]
     anglmt[2] += xyzs[i].x * vecs[i][1] - xyzs[i].y * vecs[i][0]
     
-print 'rotation='
-print anglmt
+print('rotation=')
+print(anglmt)
     
     
--- ./pca/pca_ts_freeenergy.py	(original)
+++ ./pca/pca_ts_freeenergy.py	(refactored)
@@ -40,22 +40,22 @@
     x2 = float(linesp[8])
     if (x1 < pc1_min or x1 > pc1_max or x2 < pc2_min or x2 > pc2_max):
         num_out_range += 1
-        print ("#Out of the range: %s" % line.strip())
+        print(("#Out of the range: %s" % line.strip()))
         continue
     ene.append(float(linesp[3]))
     pc1.append(float(linesp[7]))
     pc2.append(float(linesp[8]))
     
 print("### Number of out-of-range")
-print ("%i" % num_out_range)
+print(("%i" % num_out_range))
 print("### Confirmation: number of data")
-print("ene: %i" % len(ene))
-print("pc1: %i" % len(pc1))
-print("pc2: %i" % len(pc2))
+print(("ene: %i" % len(ene)))
+print(("pc1: %i" % len(pc1)))
+print(("pc2: %i" % len(pc2)))
 print("### Confirmation: min and max")
-print("ene: %f - %f" % (min(ene), max(ene)))
-print("pc1: %f - %f" % (min(pc1), max(pc1)))
-print("pc2: %f - %f" % (min(pc2), max(pc2)))
+print(("ene: %f - %f" % (min(ene), max(ene))))
+print(("pc1: %f - %f" % (min(pc1), max(pc1))))
+print(("pc2: %f - %f" % (min(pc2), max(pc2))))
 
 pc1_bins = np.arange(pc1_min, pc1_max, pc1_wid)
 pc2_bins = np.arange(pc2_min, pc2_max, pc2_wid)
--- ./pca/pca_vector_add.py	(original)
+++ ./pca/pca_vector_add.py	(refactored)
@@ -31,7 +31,7 @@
         i += 1
     if i != n :
         print ('')
-        print ('Error: i != n; i=%i, n=%i', (i,n))
+        print(('Error: i != n; i=%i, n=%i', (i,n)))
         print ('')
         sys.exit(2)
 
--- ./pca/pca_vector_dot.py	(original)
+++ ./pca/pca_vector_dot.py	(refactored)
@@ -26,9 +26,9 @@
 
 if len(vec1) != len(vec2) :
     print ('Error: two vectors have different dimension.')
-    print ('       len(vec1) = %i, len(vec2) =%i\n' %(len(vec1), len(vec2)))
+    print(('       len(vec1) = %i, len(vec2) =%i\n' %(len(vec1), len(vec2))))
     sys.exit(2)
     
-print ('dimension = %i' % len(vec1))
+print(('dimension = %i' % len(vec1)))
 
-print dot(vec1, vec2)
+print(dot(vec1, vec2))
--- ./pca/pca_vector_mask.py	(original)
+++ ./pca/pca_vector_mask.py	(refactored)
@@ -21,7 +21,7 @@
 
 mask_id = []
 for pair in id_pairs:
-    mask_id.extend(range(pair[0], pair[1]+1)) 
+    mask_id.extend(list(range(pair[0], pair[1]+1))) 
 
 i_xyz = 0
 i_mp = 0
--- ./pca/pca_vector_norm.py	(original)
+++ ./pca/pca_vector_norm.py	(refactored)
@@ -17,7 +17,7 @@
     vec.append(float(line))
 f_vec.close()
     
-print ('dimension = %i' % len(vec))
+print(('dimension = %i' % len(vec)))
 
 #norm = 0.0
 #for v in vec :
@@ -25,12 +25,12 @@
 #    
 #norm = math.sqrt(norm)
 
-for i in xrange(len(vec)/3) :
+for i in range(len(vec)/3) :
     a = vec[3*i]**2 + vec[3*i+1]**2 + vec[3*i+2]**2
-    print ('%i %30.20f' % (3*i, math.sqrt(a)))
+    print(('%i %30.20f' % (3*i, math.sqrt(a))))
     
 value_norm = norm(vec)
-print ('norm = %f' % value_norm)
+print(('norm = %f' % value_norm))
 
 if len(sys.argv) == 3:
     f_out = open(sys.argv[2], 'w')
